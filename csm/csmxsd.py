# .\csmxsd.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:b5f787bad412bfe7abad9debb95439fa9889d6e1
# Generated 2017-04-04 16:01:29.375000 by PyXB version 1.2.5 using Python 2.7.12.final.0
# Namespace csm

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:7d610a80-1971-11e7-86ab-463500000031')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.5'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('csm', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {csm}ObjectIdentifier
class ObjectIdentifier (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ObjectIdentifier')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 3, 1)
    _Documentation = None
ObjectIdentifier._CF_pattern = pyxb.binding.facets.CF_pattern()
ObjectIdentifier._CF_pattern.addPattern(pattern='[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}')
ObjectIdentifier._InitializeFacetMap(ObjectIdentifier._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'ObjectIdentifier', ObjectIdentifier)
_module_typeBindings.ObjectIdentifier = ObjectIdentifier

# Atomic simple type: {csm}ProtocolPort
class ProtocolPort (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProtocolPort')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 78, 1)
    _Documentation = None
ProtocolPort._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'ProtocolPort', ProtocolPort)
_module_typeBindings.ProtocolPort = ProtocolPort

# Atomic simple type: {csm}OSType
class OSType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OSType')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 120, 1)
    _Documentation = None
OSType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=OSType, enum_prefix=None)
OSType.ios = OSType._CF_enumeration.addEnumeration(unicode_value='ios', tag='ios')
OSType.fwsm = OSType._CF_enumeration.addEnumeration(unicode_value='fwsm', tag='fwsm')
OSType.asa = OSType._CF_enumeration.addEnumeration(unicode_value='asa', tag='asa')
OSType.ips = OSType._CF_enumeration.addEnumeration(unicode_value='ips', tag='ips')
OSType.pix = OSType._CF_enumeration.addEnumeration(unicode_value='pix', tag='pix')
OSType.undefined = OSType._CF_enumeration.addEnumeration(unicode_value='undefined', tag='undefined')
OSType._InitializeFacetMap(OSType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'OSType', OSType)
_module_typeBindings.OSType = OSType

# Atomic simple type: {csm}IPTransportProtocol
class IPTransportProtocol (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IPTransportProtocol')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 131, 1)
    _Documentation = None
IPTransportProtocol._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=IPTransportProtocol, enum_prefix=None)
IPTransportProtocol.TCP = IPTransportProtocol._CF_enumeration.addEnumeration(unicode_value='TCP', tag='TCP')
IPTransportProtocol.UDP = IPTransportProtocol._CF_enumeration.addEnumeration(unicode_value='UDP', tag='UDP')
IPTransportProtocol.IP = IPTransportProtocol._CF_enumeration.addEnumeration(unicode_value='IP', tag='IP')
IPTransportProtocol._InitializeFacetMap(IPTransportProtocol._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'IPTransportProtocol', IPTransportProtocol)
_module_typeBindings.IPTransportProtocol = IPTransportProtocol

# Atomic simple type: {csm}ConfigurationState
class ConfigurationState (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConfigurationState')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 138, 1)
    _Documentation = None
ConfigurationState._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ConfigurationState, enum_prefix=None)
ConfigurationState.undefined = ConfigurationState._CF_enumeration.addEnumeration(unicode_value='undefined', tag='undefined')
ConfigurationState.committed = ConfigurationState._CF_enumeration.addEnumeration(unicode_value='committed', tag='committed')
ConfigurationState.deployed = ConfigurationState._CF_enumeration.addEnumeration(unicode_value='deployed', tag='deployed')
ConfigurationState._InitializeFacetMap(ConfigurationState._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ConfigurationState', ConfigurationState)
_module_typeBindings.ConfigurationState = ConfigurationState

# Atomic simple type: {csm}DeviceCapability
class DeviceCapability (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceCapability')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 145, 1)
    _Documentation = None
DeviceCapability._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DeviceCapability, enum_prefix=None)
DeviceCapability.firewall = DeviceCapability._CF_enumeration.addEnumeration(unicode_value='firewall', tag='firewall')
DeviceCapability.ids = DeviceCapability._CF_enumeration.addEnumeration(unicode_value='ids', tag='ids')
DeviceCapability.router = DeviceCapability._CF_enumeration.addEnumeration(unicode_value='router', tag='router')
DeviceCapability.switch = DeviceCapability._CF_enumeration.addEnumeration(unicode_value='switch', tag='switch')
DeviceCapability.emptyString = DeviceCapability._CF_enumeration.addEnumeration(unicode_value='*', tag='emptyString')
DeviceCapability._InitializeFacetMap(DeviceCapability._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DeviceCapability', DeviceCapability)
_module_typeBindings.DeviceCapability = DeviceCapability

# Atomic simple type: {csm}SubscriptionOperation
class SubscriptionOperation (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SubscriptionOperation')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 170, 1)
    _Documentation = None
SubscriptionOperation._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SubscriptionOperation, enum_prefix=None)
SubscriptionOperation.add = SubscriptionOperation._CF_enumeration.addEnumeration(unicode_value='add', tag='add')
SubscriptionOperation.delete = SubscriptionOperation._CF_enumeration.addEnumeration(unicode_value='delete', tag='delete')
SubscriptionOperation._InitializeFacetMap(SubscriptionOperation._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SubscriptionOperation', SubscriptionOperation)
_module_typeBindings.SubscriptionOperation = SubscriptionOperation

# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 108, 9)
    _Documentation = None
STD_ANON._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON, enum_prefix=None)
STD_ANON.IPv4_Only = STD_ANON._CF_enumeration.addEnumeration(unicode_value='IPv4 Only', tag='IPv4_Only')
STD_ANON.IPv6_Only = STD_ANON._CF_enumeration.addEnumeration(unicode_value='IPv6 Only', tag='IPv6_Only')
STD_ANON.Default = STD_ANON._CF_enumeration.addEnumeration(unicode_value='Default', tag='Default')
STD_ANON._InitializeFacetMap(STD_ANON._CF_enumeration)
_module_typeBindings.STD_ANON = STD_ANON

# Atomic simple type: {csm}OperatorType
class OperatorType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OperatorType')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 144, 1)
    _Documentation = None
OperatorType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=OperatorType, enum_prefix=None)
OperatorType.gt = OperatorType._CF_enumeration.addEnumeration(unicode_value='gt', tag='gt')
OperatorType.lt = OperatorType._CF_enumeration.addEnumeration(unicode_value='lt', tag='lt')
OperatorType.eq = OperatorType._CF_enumeration.addEnumeration(unicode_value='eq', tag='eq')
OperatorType.neq = OperatorType._CF_enumeration.addEnumeration(unicode_value='neq', tag='neq')
OperatorType._InitializeFacetMap(OperatorType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'OperatorType', OperatorType)
_module_typeBindings.OperatorType = OperatorType

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 319, 24)
    _Documentation = None
STD_ANON_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_, enum_prefix=None)
STD_ANON_.in_ = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='in', tag='in_')
STD_ANON_.out = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='out', tag='out')
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_enumeration)
_module_typeBindings.STD_ANON_ = STD_ANON_

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 358, 24)
    _Documentation = None
STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2.None_ = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='None', tag='None_')
STD_ANON_2.Established = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='Established', tag='Established')
STD_ANON_2.Fragment = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='Fragment', tag='Fragment')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)
_module_typeBindings.STD_ANON_2 = STD_ANON_2

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1275, 30)
    _Documentation = None
STD_ANON_3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_3, enum_prefix=None)
STD_ANON_3.IP = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='IP', tag='IP')
STD_ANON_3.OSI = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='OSI', tag='OSI')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_enumeration)
_module_typeBindings.STD_ANON_3 = STD_ANON_3

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1296, 33)
    _Documentation = None
STD_ANON_4._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_4, enum_prefix=None)
STD_ANON_4.Internal = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='Internal', tag='Internal')
STD_ANON_4.External1 = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='External1', tag='External1')
STD_ANON_4.External2 = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='External2', tag='External2')
STD_ANON_4.NSSAExternal1 = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='NSSAExternal1', tag='NSSAExternal1')
STD_ANON_4.NSSAExternal2 = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='NSSAExternal2', tag='NSSAExternal2')
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_enumeration)
_module_typeBindings.STD_ANON_4 = STD_ANON_4

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1335, 24)
    _Documentation = None
STD_ANON_5._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_5, enum_prefix=None)
STD_ANON_5.Static_Host = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Static Host', tag='Static_Host')
STD_ANON_5.Static_Network = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Static Network', tag='Static_Network')
STD_ANON_5.Static_Port = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Static Port', tag='Static_Port')
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_enumeration)
_module_typeBindings.STD_ANON_5 = STD_ANON_5

# Atomic simple type: {csm}NATType
class NATType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NATType')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1430, 4)
    _Documentation = None
NATType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NATType, enum_prefix=None)
NATType.Static = NATType._CF_enumeration.addEnumeration(unicode_value='Static', tag='Static')
NATType.Dynamic = NATType._CF_enumeration.addEnumeration(unicode_value='Dynamic', tag='Dynamic')
NATType._InitializeFacetMap(NATType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'NATType', NATType)
_module_typeBindings.NATType = NATType

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1518, 24)
    _Documentation = None
STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_6, enum_prefix=None)
STD_ANON_6.NAT = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='NAT', tag='NAT')
STD_ANON_6.PAT = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='PAT', tag='PAT')
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)
_module_typeBindings.STD_ANON_6 = STD_ANON_6

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.unsignedInt, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1571, 24)
    _Documentation = None
STD_ANON_7._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_7, enum_prefix=None)
STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_enumeration)
_module_typeBindings.STD_ANON_7 = STD_ANON_7

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1630, 24)
    _Documentation = None
STD_ANON_8._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_8, enum_prefix=None)
STD_ANON_8.Unidirectional = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Unidirectional', tag='Unidirectional')
STD_ANON_8.Bidirectional = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Bidirectional', tag='Bidirectional')
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_enumeration)
_module_typeBindings.STD_ANON_8 = STD_ANON_8

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.unsignedInt, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1648, 24)
    _Documentation = None
STD_ANON_9._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_9, enum_prefix=None)
STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='2', tag=None)
STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='3', tag=None)
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_enumeration)
_module_typeBindings.STD_ANON_9 = STD_ANON_9

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2122, 3)
    _Documentation = None
STD_ANON_10._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_10, enum_prefix=None)
STD_ANON_10.device = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='device', tag='device')
STD_ANON_10.file = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='file', tag='file')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_enumeration)
_module_typeBindings.STD_ANON_10 = STD_ANON_10

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2133, 7)
    _Documentation = None
STD_ANON_11._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_11, enum_prefix=None)
STD_ANON_11.over_write_changes_and_show_warnings = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='over write changes and show warnings', tag='over_write_changes_and_show_warnings')
STD_ANON_11.cancel_deployment = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='cancel deployment', tag='cancel_deployment')
STD_ANON_11.don_not_check_for_changes = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='don not check for changes', tag='don_not_check_for_changes')
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_enumeration)
_module_typeBindings.STD_ANON_11 = STD_ANON_11

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2191, 4)
    _Documentation = None
STD_ANON_12._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_12, enum_prefix=None)
STD_ANON_12.Critical = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='Critical', tag='Critical')
STD_ANON_12.Warning = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='Warning', tag='Warning')
STD_ANON_12.Info = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='Info', tag='Info')
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_enumeration)
_module_typeBindings.STD_ANON_12 = STD_ANON_12

# Atomic simple type: [anonymous]
class STD_ANON_13 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2212, 4)
    _Documentation = None
STD_ANON_13._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_13, enum_prefix=None)
STD_ANON_13.Critical = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='Critical', tag='Critical')
STD_ANON_13.Warning = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='Warning', tag='Warning')
STD_ANON_13.Info = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='Info', tag='Info')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_enumeration)
_module_typeBindings.STD_ANON_13 = STD_ANON_13

# Atomic simple type: [anonymous]
class STD_ANON_14 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2493, 6)
    _Documentation = None
STD_ANON_14._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_14, enum_prefix=None)
STD_ANON_14.DeviceAccessRuleFirewallPolicy = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='DeviceAccessRuleFirewallPolicy', tag='DeviceAccessRuleFirewallPolicy')
STD_ANON_14.DeviceAccessRuleUnifiedFirewallPolicy = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='DeviceAccessRuleUnifiedFirewallPolicy', tag='DeviceAccessRuleUnifiedFirewallPolicy')
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_enumeration)
_module_typeBindings.STD_ANON_14 = STD_ANON_14

# Atomic simple type: {csm}PolicyObjectType
class PolicyObjectType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolicyObjectType')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2574, 1)
    _Documentation = None
PolicyObjectType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PolicyObjectType, enum_prefix=None)
PolicyObjectType.NetworkPolicyObject = PolicyObjectType._CF_enumeration.addEnumeration(unicode_value='NetworkPolicyObject', tag='NetworkPolicyObject')
PolicyObjectType.ServicePolicyObject = PolicyObjectType._CF_enumeration.addEnumeration(unicode_value='ServicePolicyObject', tag='ServicePolicyObject')
PolicyObjectType.IdentityUserGroupPolicyObject = PolicyObjectType._CF_enumeration.addEnumeration(unicode_value='IdentityUserGroupPolicyObject', tag='IdentityUserGroupPolicyObject')
PolicyObjectType.InterfaceRolePolicyObject = PolicyObjectType._CF_enumeration.addEnumeration(unicode_value='InterfaceRolePolicyObject', tag='InterfaceRolePolicyObject')
PolicyObjectType.SecurityGroupPolicyObject = PolicyObjectType._CF_enumeration.addEnumeration(unicode_value='SecurityGroupPolicyObject', tag='SecurityGroupPolicyObject')
PolicyObjectType.TimeRangePolicyObject = PolicyObjectType._CF_enumeration.addEnumeration(unicode_value='TimeRangePolicyObject', tag='TimeRangePolicyObject')
PolicyObjectType.PortListPolicyObject = PolicyObjectType._CF_enumeration.addEnumeration(unicode_value='PortListPolicyObject', tag='PortListPolicyObject')
PolicyObjectType._InitializeFacetMap(PolicyObjectType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PolicyObjectType', PolicyObjectType)
_module_typeBindings.PolicyObjectType = PolicyObjectType

# Atomic simple type: {csm}PolicyObjectTypeExtended
class PolicyObjectTypeExtended (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolicyObjectTypeExtended')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2587, 1)
    _Documentation = None
PolicyObjectTypeExtended._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PolicyObjectTypeExtended, enum_prefix=None)
PolicyObjectTypeExtended.NetworkPolicyObject = PolicyObjectTypeExtended._CF_enumeration.addEnumeration(unicode_value='NetworkPolicyObject', tag='NetworkPolicyObject')
PolicyObjectTypeExtended.ServicePolicyObject = PolicyObjectTypeExtended._CF_enumeration.addEnumeration(unicode_value='ServicePolicyObject', tag='ServicePolicyObject')
PolicyObjectTypeExtended.IdentityUserGroupPolicyObject = PolicyObjectTypeExtended._CF_enumeration.addEnumeration(unicode_value='IdentityUserGroupPolicyObject', tag='IdentityUserGroupPolicyObject')
PolicyObjectTypeExtended.InterfaceRolePolicyObject = PolicyObjectTypeExtended._CF_enumeration.addEnumeration(unicode_value='InterfaceRolePolicyObject', tag='InterfaceRolePolicyObject')
PolicyObjectTypeExtended.SecurityGroupPolicyObject = PolicyObjectTypeExtended._CF_enumeration.addEnumeration(unicode_value='SecurityGroupPolicyObject', tag='SecurityGroupPolicyObject')
PolicyObjectTypeExtended.TimeRangePolicyObject = PolicyObjectTypeExtended._CF_enumeration.addEnumeration(unicode_value='TimeRangePolicyObject', tag='TimeRangePolicyObject')
PolicyObjectTypeExtended.StandardACEPolicyObject = PolicyObjectTypeExtended._CF_enumeration.addEnumeration(unicode_value='StandardACEPolicyObject', tag='StandardACEPolicyObject')
PolicyObjectTypeExtended.ExtendedACEPolicyObject = PolicyObjectTypeExtended._CF_enumeration.addEnumeration(unicode_value='ExtendedACEPolicyObject', tag='ExtendedACEPolicyObject')
PolicyObjectTypeExtended.ACLPolicyObject = PolicyObjectTypeExtended._CF_enumeration.addEnumeration(unicode_value='ACLPolicyObject', tag='ACLPolicyObject')
PolicyObjectTypeExtended.PortListPolicyObject = PolicyObjectTypeExtended._CF_enumeration.addEnumeration(unicode_value='PortListPolicyObject', tag='PortListPolicyObject')
PolicyObjectTypeExtended.SLAMonitorPolicyObject = PolicyObjectTypeExtended._CF_enumeration.addEnumeration(unicode_value='SLAMonitorPolicyObject', tag='SLAMonitorPolicyObject')
PolicyObjectTypeExtended._InitializeFacetMap(PolicyObjectTypeExtended._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PolicyObjectTypeExtended', PolicyObjectTypeExtended)
_module_typeBindings.PolicyObjectTypeExtended = PolicyObjectTypeExtended

# Atomic simple type: {csm}OperationStatus
class OperationStatus (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OperationStatus')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2603, 1)
    _Documentation = None
OperationStatus._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=OperationStatus, enum_prefix=None)
OperationStatus.SUCCESS = OperationStatus._CF_enumeration.addEnumeration(unicode_value='SUCCESS', tag='SUCCESS')
OperationStatus.FAILED = OperationStatus._CF_enumeration.addEnumeration(unicode_value='FAILED', tag='FAILED')
OperationStatus._InitializeFacetMap(OperationStatus._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'OperationStatus', OperationStatus)
_module_typeBindings.OperationStatus = OperationStatus

# Atomic simple type: [anonymous]
class STD_ANON_15 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2622, 5)
    _Documentation = None
STD_ANON_15._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_15, enum_prefix=None)
STD_ANON_15.In = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='In', tag='In')
STD_ANON_15.Out = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Out', tag='Out')
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_enumeration)
_module_typeBindings.STD_ANON_15 = STD_ANON_15

# Atomic simple type: {csm}PolicyConfigType
class PolicyConfigType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolicyConfigType')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2642, 1)
    _Documentation = None
PolicyConfigType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PolicyConfigType, enum_prefix=None)
PolicyConfigType.DeviceAccessRuleFirewallPolicy = PolicyConfigType._CF_enumeration.addEnumeration(unicode_value='DeviceAccessRuleFirewallPolicy', tag='DeviceAccessRuleFirewallPolicy')
PolicyConfigType.DeviceAccessRuleUnifiedFirewallPolicy = PolicyConfigType._CF_enumeration.addEnumeration(unicode_value='DeviceAccessRuleUnifiedFirewallPolicy', tag='DeviceAccessRuleUnifiedFirewallPolicy')
PolicyConfigType.FirewallACLSettingsPolicy = PolicyConfigType._CF_enumeration.addEnumeration(unicode_value='FirewallACLSettingsPolicy', tag='FirewallACLSettingsPolicy')
PolicyConfigType._InitializeFacetMap(PolicyConfigType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PolicyConfigType', PolicyConfigType)
_module_typeBindings.PolicyConfigType = PolicyConfigType

# Atomic simple type: {csm}EventType
class EventType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EventType')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 4, 1)
    _Documentation = None
EventType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EventType, enum_prefix=None)
EventType.syslog = EventType._CF_enumeration.addEnumeration(unicode_value='syslog', tag='syslog')
EventType._InitializeFacetMap(EventType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EventType', EventType)
_module_typeBindings.EventType = EventType

# Atomic simple type: {csm}EventFormat
class EventFormat (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EventFormat')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 9, 1)
    _Documentation = None
EventFormat._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EventFormat, enum_prefix=None)
EventFormat.xml = EventFormat._CF_enumeration.addEnumeration(unicode_value='xml', tag='xml')
EventFormat.plainText = EventFormat._CF_enumeration.addEnumeration(unicode_value='plainText', tag='plainText')
EventFormat._InitializeFacetMap(EventFormat._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EventFormat', EventFormat)
_module_typeBindings.EventFormat = EventFormat

# Atomic simple type: {csm}EventCategory
class EventCategory (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EventCategory')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 15, 1)
    _Documentation = None
EventCategory._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EventCategory, enum_prefix=None)
EventCategory.configChange = EventCategory._CF_enumeration.addEnumeration(unicode_value='configChange', tag='configChange')
EventCategory.deviceStatus = EventCategory._CF_enumeration.addEnumeration(unicode_value='deviceStatus', tag='deviceStatus')
EventCategory._InitializeFacetMap(EventCategory._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EventCategory', EventCategory)
_module_typeBindings.EventCategory = EventCategory

# Atomic simple type: {csm}UpdateType
class UpdateType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UpdateType')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 27, 1)
    _Documentation = None
UpdateType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=UpdateType, enum_prefix=None)
UpdateType.NO_OOB = UpdateType._CF_enumeration.addEnumeration(unicode_value='NO_OOB', tag='NO_OOB')
UpdateType.OOB = UpdateType._CF_enumeration.addEnumeration(unicode_value='OOB', tag='OOB')
UpdateType.DEVICE_DOWN = UpdateType._CF_enumeration.addEnumeration(unicode_value='DEVICE_DOWN', tag='DEVICE_DOWN')
UpdateType.DEVICE_UP = UpdateType._CF_enumeration.addEnumeration(unicode_value='DEVICE_UP', tag='DEVICE_UP')
UpdateType._InitializeFacetMap(UpdateType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'UpdateType', UpdateType)
_module_typeBindings.UpdateType = UpdateType

# Atomic simple type: {csm}DeploymentType
class DeploymentType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeploymentType')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 35, 1)
    _Documentation = None
DeploymentType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DeploymentType, enum_prefix=None)
DeploymentType.Device = DeploymentType._CF_enumeration.addEnumeration(unicode_value='Device', tag='Device')
DeploymentType.File = DeploymentType._CF_enumeration.addEnumeration(unicode_value='File', tag='File')
DeploymentType.AUS = DeploymentType._CF_enumeration.addEnumeration(unicode_value='AUS', tag='AUS')
DeploymentType.CNS = DeploymentType._CF_enumeration.addEnumeration(unicode_value='CNS', tag='CNS')
DeploymentType.TMS = DeploymentType._CF_enumeration.addEnumeration(unicode_value='TMS', tag='TMS')
DeploymentType.Unknown = DeploymentType._CF_enumeration.addEnumeration(unicode_value='Unknown', tag='Unknown')
DeploymentType.NOT_APPLICABLE = DeploymentType._CF_enumeration.addEnumeration(unicode_value='NOT_APPLICABLE', tag='NOT_APPLICABLE')
DeploymentType._InitializeFacetMap(DeploymentType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DeploymentType', DeploymentType)
_module_typeBindings.DeploymentType = DeploymentType

# Atomic simple type: {csm}Result
class Result (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Result')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 5, 1)
    _Documentation = None
Result._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Result, enum_prefix=None)
Result.ok = Result._CF_enumeration.addEnumeration(unicode_value='ok', tag='ok')
Result.timeout = Result._CF_enumeration.addEnumeration(unicode_value='timeout', tag='timeout')
Result.failed = Result._CF_enumeration.addEnumeration(unicode_value='failed', tag='failed')
Result._InitializeFacetMap(Result._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'Result', Result)
_module_typeBindings.Result = Result

# Atomic simple type: [anonymous]
class STD_ANON_16 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 20, 4)
    _Documentation = None
STD_ANON_16._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_16._CF_pattern.addPattern(pattern='[sS][hH][oO][wW]')
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_pattern)
_module_typeBindings.STD_ANON_16 = STD_ANON_16

# Atomic simple type: [anonymous]
class STD_ANON_17 (pyxb.binding.datatypes.unsignedInt):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 28, 16)
    _Documentation = None
STD_ANON_17._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_17, value=pyxb.binding.datatypes.unsignedInt(1))
STD_ANON_17._InitializeFacetMap(STD_ANON_17._CF_minInclusive)
_module_typeBindings.STD_ANON_17 = STD_ANON_17

# Complex type {csm}ObjectIdentifierList with content type ELEMENT_ONLY
class ObjectIdentifierList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}ObjectIdentifierList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ObjectIdentifierList')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element gid uses Python identifier gid
    __gid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gid'), 'gid', '__csm_ObjectIdentifierList_gid', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 10, 3), )

    
    gid = property(__gid.value, __gid.set, None, None)

    _ElementMap.update({
        __gid.name() : __gid
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ObjectIdentifierList = ObjectIdentifierList
Namespace.addCategoryObject('typeBinding', 'ObjectIdentifierList', ObjectIdentifierList)


# Complex type {csm}BaseObject with content type ELEMENT_ONLY
class BaseObject (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}BaseObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BaseObject')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 14, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element gid uses Python identifier gid
    __gid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gid'), 'gid', '__csm_BaseObject_gid', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3), )

    
    gid = property(__gid.value, __gid.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__csm_BaseObject_name', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element lastUpdateTime uses Python identifier lastUpdateTime
    __lastUpdateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'lastUpdateTime'), 'lastUpdateTime', '__csm_BaseObject_lastUpdateTime', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3), )

    
    lastUpdateTime = property(__lastUpdateTime.value, __lastUpdateTime.set, None, None)

    
    # Element parentGID uses Python identifier parentGID
    __parentGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parentGID'), 'parentGID', '__csm_BaseObject_parentGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3), )

    
    parentGID = property(__parentGID.value, __parentGID.set, None, None)

    
    # Element updatedByUser uses Python identifier updatedByUser
    __updatedByUser = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'updatedByUser'), 'updatedByUser', '__csm_BaseObject_updatedByUser', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3), )

    
    updatedByUser = property(__updatedByUser.value, __updatedByUser.set, None, None)

    
    # Element lastCommitTime uses Python identifier lastCommitTime
    __lastCommitTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'lastCommitTime'), 'lastCommitTime', '__csm_BaseObject_lastCommitTime', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3), )

    
    lastCommitTime = property(__lastCommitTime.value, __lastCommitTime.set, None, None)

    
    # Element ticketId uses Python identifier ticketId
    __ticketId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ticketId'), 'ticketId', '__csm_BaseObject_ticketId', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3), )

    
    ticketId = property(__ticketId.value, __ticketId.set, None, None)

    
    # Element activityName uses Python identifier activityName
    __activityName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'activityName'), 'activityName', '__csm_BaseObject_activityName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3), )

    
    activityName = property(__activityName.value, __activityName.set, None, None)

    _ElementMap.update({
        __gid.name() : __gid,
        __name.name() : __name,
        __lastUpdateTime.name() : __lastUpdateTime,
        __parentGID.name() : __parentGID,
        __updatedByUser.name() : __updatedByUser,
        __lastCommitTime.name() : __lastCommitTime,
        __ticketId.name() : __ticketId,
        __activityName.name() : __activityName
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BaseObject = BaseObject
Namespace.addCategoryObject('typeBinding', 'BaseObject', BaseObject)


# Complex type {csm}BaseError with content type ELEMENT_ONLY
class BaseError (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}BaseError with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BaseError')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 30, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element code uses Python identifier code
    __code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'code'), 'code', '__csm_BaseError_code', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 32, 3), )

    
    code = property(__code.value, __code.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__csm_BaseError_description', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 33, 3), )

    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        __code.name() : __code,
        __description.name() : __description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BaseError = BaseError
Namespace.addCategoryObject('typeBinding', 'BaseError', BaseError)


# Complex type {csm}BaseReqResp with content type ELEMENT_ONLY
class BaseReqResp (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}BaseReqResp with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BaseReqResp')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 36, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element protVersion uses Python identifier protVersion
    __protVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'protVersion'), 'protVersion', '__csm_BaseReqResp_protVersion', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3), )

    
    protVersion = property(__protVersion.value, __protVersion.set, None, None)

    
    # Element reqId uses Python identifier reqId
    __reqId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'reqId'), 'reqId', '__csm_BaseReqResp_reqId', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3), )

    
    reqId = property(__reqId.value, __reqId.set, None, None)

    
    # Element startIndex uses Python identifier startIndex
    __startIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'startIndex'), 'startIndex', '__csm_BaseReqResp_startIndex', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3), )

    
    startIndex = property(__startIndex.value, __startIndex.set, None, None)

    
    # Element endIndex uses Python identifier endIndex
    __endIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'endIndex'), 'endIndex', '__csm_BaseReqResp_endIndex', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3), )

    
    endIndex = property(__endIndex.value, __endIndex.set, None, None)

    
    # Element totalCount uses Python identifier totalCount
    __totalCount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'totalCount'), 'totalCount', '__csm_BaseReqResp_totalCount', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3), )

    
    totalCount = property(__totalCount.value, __totalCount.set, None, None)

    
    # Element error uses Python identifier error
    __error = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'error'), 'error', '__csm_BaseReqResp_error', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3), )

    
    error = property(__error.value, __error.set, None, None)

    _ElementMap.update({
        __protVersion.name() : __protVersion,
        __reqId.name() : __reqId,
        __startIndex.name() : __startIndex,
        __endIndex.name() : __endIndex,
        __totalCount.name() : __totalCount,
        __error.name() : __error
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BaseReqResp = BaseReqResp
Namespace.addCategoryObject('typeBinding', 'BaseReqResp', BaseReqResp)


# Complex type {csm}EntityDescriptor with content type ELEMENT_ONLY
class EntityDescriptor (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}EntityDescriptor with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EntityDescriptor')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 46, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__csm_EntityDescriptor_name', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 48, 3), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__csm_EntityDescriptor_type', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 49, 3), )

    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __type.name() : __type
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.EntityDescriptor = EntityDescriptor
Namespace.addCategoryObject('typeBinding', 'EntityDescriptor', EntityDescriptor)


# Complex type {csm}PortIdentifier with content type ELEMENT_ONLY
class PortIdentifier (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}PortIdentifier with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PortIdentifier')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 70, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element slotNum uses Python identifier slotNum
    __slotNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'slotNum'), 'slotNum', '__csm_PortIdentifier_slotNum', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 73, 3), )

    
    slotNum = property(__slotNum.value, __slotNum.set, None, None)

    
    # Element moduleNum uses Python identifier moduleNum
    __moduleNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'moduleNum'), 'moduleNum', '__csm_PortIdentifier_moduleNum', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 74, 3), )

    
    moduleNum = property(__moduleNum.value, __moduleNum.set, None, None)

    
    # Element portNum uses Python identifier portNum
    __portNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'portNum'), 'portNum', '__csm_PortIdentifier_portNum', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 75, 3), )

    
    portNum = property(__portNum.value, __portNum.set, None, None)

    _ElementMap.update({
        __slotNum.name() : __slotNum,
        __moduleNum.name() : __moduleNum,
        __portNum.name() : __portNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PortIdentifier = PortIdentifier
Namespace.addCategoryObject('typeBinding', 'PortIdentifier', PortIdentifier)


# Complex type {csm}InterfaceList with content type ELEMENT_ONLY
class InterfaceList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}InterfaceList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterfaceList')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 81, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element interface uses Python identifier interface
    __interface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interface'), 'interface', '__csm_InterfaceList_interface', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 83, 3), )

    
    interface = property(__interface.value, __interface.set, None, None)

    _ElementMap.update({
        __interface.name() : __interface
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterfaceList = InterfaceList
Namespace.addCategoryObject('typeBinding', 'InterfaceList', InterfaceList)


# Complex type {csm}Interface with content type ELEMENT_ONLY
class Interface (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}Interface with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Interface')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 86, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__csm_Interface_type', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 88, 3), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element identifier uses Python identifier identifier
    __identifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'identifier'), 'identifier', '__csm_Interface_identifier', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 89, 3), )

    
    identifier = property(__identifier.value, __identifier.set, None, None)

    
    # Element ipInterface uses Python identifier ipInterface
    __ipInterface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ipInterface'), 'ipInterface', '__csm_Interface_ipInterface', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 90, 3), )

    
    ipInterface = property(__ipInterface.value, __ipInterface.set, None, None)

    
    # Element macInterface uses Python identifier macInterface
    __macInterface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'macInterface'), 'macInterface', '__csm_Interface_macInterface', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 91, 3), )

    
    macInterface = property(__macInterface.value, __macInterface.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __identifier.name() : __identifier,
        __ipInterface.name() : __ipInterface,
        __macInterface.name() : __macInterface
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Interface = Interface
Namespace.addCategoryObject('typeBinding', 'Interface', Interface)


# Complex type {csm}MACInterfaceAttrs with content type ELEMENT_ONLY
class MACInterfaceAttrs (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}MACInterfaceAttrs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MACInterfaceAttrs')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 94, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element macAddress uses Python identifier macAddress
    __macAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'macAddress'), 'macAddress', '__csm_MACInterfaceAttrs_macAddress', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 96, 3), )

    
    macAddress = property(__macAddress.value, __macAddress.set, None, None)

    _ElementMap.update({
        __macAddress.name() : __macAddress
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MACInterfaceAttrs = MACInterfaceAttrs
Namespace.addCategoryObject('typeBinding', 'MACInterfaceAttrs', MACInterfaceAttrs)


# Complex type {csm}IPInterfaceAttrs with content type ELEMENT_ONLY
class IPInterfaceAttrs (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}IPInterfaceAttrs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IPInterfaceAttrs')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element domainName uses Python identifier domainName
    __domainName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'domainName'), 'domainName', '__csm_IPInterfaceAttrs_domainName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 101, 3), )

    
    domainName = property(__domainName.value, __domainName.set, None, None)

    
    # Element ipAddress uses Python identifier ipAddress
    __ipAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ipAddress'), 'ipAddress', '__csm_IPInterfaceAttrs_ipAddress', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 102, 3), )

    
    ipAddress = property(__ipAddress.value, __ipAddress.set, None, None)

    
    # Element isNatAddress uses Python identifier isNatAddress
    __isNatAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isNatAddress'), 'isNatAddress', '__csm_IPInterfaceAttrs_isNatAddress', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 103, 3), )

    
    isNatAddress = property(__isNatAddress.value, __isNatAddress.set, None, None)

    
    # Element realIpAddress uses Python identifier realIpAddress
    __realIpAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'realIpAddress'), 'realIpAddress', '__csm_IPInterfaceAttrs_realIpAddress', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 104, 3), )

    
    realIpAddress = property(__realIpAddress.value, __realIpAddress.set, None, None)

    _ElementMap.update({
        __domainName.name() : __domainName,
        __ipAddress.name() : __ipAddress,
        __isNatAddress.name() : __isNatAddress,
        __realIpAddress.name() : __realIpAddress
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.IPInterfaceAttrs = IPInterfaceAttrs
Namespace.addCategoryObject('typeBinding', 'IPInterfaceAttrs', IPInterfaceAttrs)


# Complex type {csm}DeviceGroupPath with content type ELEMENT_ONLY
class DeviceGroupPath (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}DeviceGroupPath with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceGroupPath')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 165, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element pathItem uses Python identifier pathItem
    __pathItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pathItem'), 'pathItem', '__csm_DeviceGroupPath_pathItem', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 167, 3), )

    
    pathItem = property(__pathItem.value, __pathItem.set, None, None)

    _ElementMap.update({
        __pathItem.name() : __pathItem
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceGroupPath = DeviceGroupPath
Namespace.addCategoryObject('typeBinding', 'DeviceGroupPath', DeviceGroupPath)


# Complex type {csm}NetworkInterfaceObjectsRefs with content type ELEMENT_ONLY
class NetworkInterfaceObjectsRefs (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}NetworkInterfaceObjectsRefs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NetworkInterfaceObjectsRefs')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 37, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element networkObjectGIDs uses Python identifier networkObjectGIDs
    __networkObjectGIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'networkObjectGIDs'), 'networkObjectGIDs', '__csm_NetworkInterfaceObjectsRefs_networkObjectGIDs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 39, 12), )

    
    networkObjectGIDs = property(__networkObjectGIDs.value, __networkObjectGIDs.set, None, None)

    
    # Element interfaceRoleObjectGIDs uses Python identifier interfaceRoleObjectGIDs
    __interfaceRoleObjectGIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceRoleObjectGIDs'), 'interfaceRoleObjectGIDs', '__csm_NetworkInterfaceObjectsRefs_interfaceRoleObjectGIDs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 40, 12), )

    
    interfaceRoleObjectGIDs = property(__interfaceRoleObjectGIDs.value, __interfaceRoleObjectGIDs.set, None, None)

    
    # Element ipv4Data uses Python identifier ipv4Data
    __ipv4Data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ipv4Data'), 'ipv4Data', '__csm_NetworkInterfaceObjectsRefs_ipv4Data', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 42, 16), )

    
    ipv4Data = property(__ipv4Data.value, __ipv4Data.set, None, None)

    
    # Element ipData uses Python identifier ipData
    __ipData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ipData'), 'ipData', '__csm_NetworkInterfaceObjectsRefs_ipData', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 43, 16), )

    
    ipData = property(__ipData.value, __ipData.set, None, None)

    _ElementMap.update({
        __networkObjectGIDs.name() : __networkObjectGIDs,
        __interfaceRoleObjectGIDs.name() : __interfaceRoleObjectGIDs,
        __ipv4Data.name() : __ipv4Data,
        __ipData.name() : __ipData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.NetworkInterfaceObjectsRefs = NetworkInterfaceObjectsRefs
Namespace.addCategoryObject('typeBinding', 'NetworkInterfaceObjectsRefs', NetworkInterfaceObjectsRefs)


# Complex type {csm}NetworkObjectsRefs with content type ELEMENT_ONLY
class NetworkObjectsRefs (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}NetworkObjectsRefs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NetworkObjectsRefs')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 47, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element networkObjectGIDs uses Python identifier networkObjectGIDs
    __networkObjectGIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'networkObjectGIDs'), 'networkObjectGIDs', '__csm_NetworkObjectsRefs_networkObjectGIDs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 49, 12), )

    
    networkObjectGIDs = property(__networkObjectGIDs.value, __networkObjectGIDs.set, None, None)

    
    # Element ipv4Data uses Python identifier ipv4Data
    __ipv4Data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ipv4Data'), 'ipv4Data', '__csm_NetworkObjectsRefs_ipv4Data', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 51, 16), )

    
    ipv4Data = property(__ipv4Data.value, __ipv4Data.set, None, None)

    
    # Element ipData uses Python identifier ipData
    __ipData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ipData'), 'ipData', '__csm_NetworkObjectsRefs_ipData', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 52, 16), )

    
    ipData = property(__ipData.value, __ipData.set, None, None)

    _ElementMap.update({
        __networkObjectGIDs.name() : __networkObjectGIDs,
        __ipv4Data.name() : __ipv4Data,
        __ipData.name() : __ipData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.NetworkObjectsRefs = NetworkObjectsRefs
Namespace.addCategoryObject('typeBinding', 'NetworkObjectsRefs', NetworkObjectsRefs)


# Complex type {csm}SecurityGrpObjectsRef with content type ELEMENT_ONLY
class SecurityGrpObjectsRef (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}SecurityGrpObjectsRef with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SecurityGrpObjectsRef')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 56, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element securityGrpObjectGID uses Python identifier securityGrpObjectGID
    __securityGrpObjectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'securityGrpObjectGID'), 'securityGrpObjectGID', '__csm_SecurityGrpObjectsRef_securityGrpObjectGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 58, 14), )

    
    securityGrpObjectGID = property(__securityGrpObjectGID.value, __securityGrpObjectGID.set, None, None)

    
    # Element secName uses Python identifier secName
    __secName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'secName'), 'secName', '__csm_SecurityGrpObjectsRef_secName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 59, 14), )

    
    secName = property(__secName.value, __secName.set, None, None)

    
    # Element secTag uses Python identifier secTag
    __secTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'secTag'), 'secTag', '__csm_SecurityGrpObjectsRef_secTag', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 60, 14), )

    
    secTag = property(__secTag.value, __secTag.set, None, None)

    _ElementMap.update({
        __securityGrpObjectGID.name() : __securityGrpObjectGID,
        __secName.name() : __secName,
        __secTag.name() : __secTag
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SecurityGrpObjectsRef = SecurityGrpObjectsRef
Namespace.addCategoryObject('typeBinding', 'SecurityGrpObjectsRef', SecurityGrpObjectsRef)


# Complex type {csm}SecurityGrpObjectsRefs with content type ELEMENT_ONLY
class SecurityGrpObjectsRefs (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}SecurityGrpObjectsRefs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SecurityGrpObjectsRefs')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 63, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element securityTag uses Python identifier securityTag
    __securityTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'securityTag'), 'securityTag', '__csm_SecurityGrpObjectsRefs_securityTag', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 65, 12), )

    
    securityTag = property(__securityTag.value, __securityTag.set, None, None)

    _ElementMap.update({
        __securityTag.name() : __securityTag
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SecurityGrpObjectsRefs = SecurityGrpObjectsRefs
Namespace.addCategoryObject('typeBinding', 'SecurityGrpObjectsRefs', SecurityGrpObjectsRefs)


# Complex type {csm}IdentityUserGrpObjectsRefs with content type ELEMENT_ONLY
class IdentityUserGrpObjectsRefs (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}IdentityUserGrpObjectsRefs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IdentityUserGrpObjectsRefs')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 68, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element identityUserGrpObjectGIDs uses Python identifier identityUserGrpObjectGIDs
    __identityUserGrpObjectGIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'identityUserGrpObjectGIDs'), 'identityUserGrpObjectGIDs', '__csm_IdentityUserGrpObjectsRefs_identityUserGrpObjectGIDs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 70, 12), )

    
    identityUserGrpObjectGIDs = property(__identityUserGrpObjectGIDs.value, __identityUserGrpObjectGIDs.set, None, None)

    
    # Element userNameData uses Python identifier userNameData
    __userNameData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'userNameData'), 'userNameData', '__csm_IdentityUserGrpObjectsRefs_userNameData', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 71, 12), )

    
    userNameData = property(__userNameData.value, __userNameData.set, None, None)

    
    # Element userGroupData uses Python identifier userGroupData
    __userGroupData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'userGroupData'), 'userGroupData', '__csm_IdentityUserGrpObjectsRefs_userGroupData', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 72, 12), )

    
    userGroupData = property(__userGroupData.value, __userGroupData.set, None, None)

    _ElementMap.update({
        __identityUserGrpObjectGIDs.name() : __identityUserGrpObjectGIDs,
        __userNameData.name() : __userNameData,
        __userGroupData.name() : __userGroupData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.IdentityUserGrpObjectsRefs = IdentityUserGrpObjectsRefs
Namespace.addCategoryObject('typeBinding', 'IdentityUserGrpObjectsRefs', IdentityUserGrpObjectsRefs)


# Complex type {csm}NetworkObjectRefs with content type ELEMENT_ONLY
class NetworkObjectRefs (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}NetworkObjectRefs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NetworkObjectRefs')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 75, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element networkObjectGID uses Python identifier networkObjectGID
    __networkObjectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'networkObjectGID'), 'networkObjectGID', '__csm_NetworkObjectRefs_networkObjectGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 77, 12), )

    
    networkObjectGID = property(__networkObjectGID.value, __networkObjectGID.set, None, None)

    
    # Element ipv4Data uses Python identifier ipv4Data
    __ipv4Data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ipv4Data'), 'ipv4Data', '__csm_NetworkObjectRefs_ipv4Data', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 79, 16), )

    
    ipv4Data = property(__ipv4Data.value, __ipv4Data.set, None, None)

    
    # Element ipData uses Python identifier ipData
    __ipData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ipData'), 'ipData', '__csm_NetworkObjectRefs_ipData', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 80, 16), )

    
    ipData = property(__ipData.value, __ipData.set, None, None)

    
    # Element interfaceKeyword uses Python identifier interfaceKeyword
    __interfaceKeyword = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceKeyword'), 'interfaceKeyword', '__csm_NetworkObjectRefs_interfaceKeyword', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 82, 4), )

    
    interfaceKeyword = property(__interfaceKeyword.value, __interfaceKeyword.set, None, None)

    _ElementMap.update({
        __networkObjectGID.name() : __networkObjectGID,
        __ipv4Data.name() : __ipv4Data,
        __ipData.name() : __ipData,
        __interfaceKeyword.name() : __interfaceKeyword
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.NetworkObjectRefs = NetworkObjectRefs
Namespace.addCategoryObject('typeBinding', 'NetworkObjectRefs', NetworkObjectRefs)


# Complex type {csm}NetworkOrIPRef with content type ELEMENT_ONLY
class NetworkOrIPRef (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}NetworkOrIPRef with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NetworkOrIPRef')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 85, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element hostOrNetworkObjectGID uses Python identifier hostOrNetworkObjectGID
    __hostOrNetworkObjectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'hostOrNetworkObjectGID'), 'hostOrNetworkObjectGID', '__csm_NetworkOrIPRef_hostOrNetworkObjectGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 87, 12), )

    
    hostOrNetworkObjectGID = property(__hostOrNetworkObjectGID.value, __hostOrNetworkObjectGID.set, None, None)

    
    # Element ipv4Data uses Python identifier ipv4Data
    __ipv4Data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ipv4Data'), 'ipv4Data', '__csm_NetworkOrIPRef_ipv4Data', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 89, 16), )

    
    ipv4Data = property(__ipv4Data.value, __ipv4Data.set, None, None)

    
    # Element ipData uses Python identifier ipData
    __ipData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ipData'), 'ipData', '__csm_NetworkOrIPRef_ipData', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 90, 16), )

    
    ipData = property(__ipData.value, __ipData.set, None, None)

    _ElementMap.update({
        __hostOrNetworkObjectGID.name() : __hostOrNetworkObjectGID,
        __ipv4Data.name() : __ipv4Data,
        __ipData.name() : __ipData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.NetworkOrIPRef = NetworkOrIPRef
Namespace.addCategoryObject('typeBinding', 'NetworkOrIPRef', NetworkOrIPRef)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 103, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__csm_CTD_ANON_value', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 105, 8), )

    
    value_ = property(__value.value, __value.set, None, None)

    
    # Element fqdnType uses Python identifier fqdnType
    __fqdnType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fqdnType'), 'fqdnType', '__csm_CTD_ANON_fqdnType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 107, 8), )

    
    fqdnType = property(__fqdnType.value, __fqdnType.set, None, None)

    _ElementMap.update({
        __value.name() : __value,
        __fqdnType.name() : __fqdnType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {csm}PortRange with content type ELEMENT_ONLY
class PortRange (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}PortRange with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PortRange')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 165, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element operator uses Python identifier operator
    __operator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operator'), 'operator', '__csm_PortRange_operator', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 167, 3), )

    
    operator = property(__operator.value, __operator.set, None, None)

    
    # Element startPort uses Python identifier startPort
    __startPort = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'startPort'), 'startPort', '__csm_PortRange_startPort', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 168, 3), )

    
    startPort = property(__startPort.value, __startPort.set, None, None)

    
    # Element endPort uses Python identifier endPort
    __endPort = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'endPort'), 'endPort', '__csm_PortRange_endPort', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 169, 3), )

    
    endPort = property(__endPort.value, __endPort.set, None, None)

    _ElementMap.update({
        __operator.name() : __operator,
        __startPort.name() : __startPort,
        __endPort.name() : __endPort
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PortRange = PortRange
Namespace.addCategoryObject('typeBinding', 'PortRange', PortRange)


# Complex type {csm}ServiceParameters with content type ELEMENT_ONLY
class ServiceParameters (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}ServiceParameters with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ServiceParameters')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 173, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element protocol uses Python identifier protocol
    __protocol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'protocol'), 'protocol', '__csm_ServiceParameters_protocol', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 175, 12), )

    
    protocol = property(__protocol.value, __protocol.set, None, None)

    
    # Element sourcePort uses Python identifier sourcePort
    __sourcePort = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sourcePort'), 'sourcePort', '__csm_ServiceParameters_sourcePort', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 176, 12), )

    
    sourcePort = property(__sourcePort.value, __sourcePort.set, None, None)

    
    # Element destinationPort uses Python identifier destinationPort
    __destinationPort = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'destinationPort'), 'destinationPort', '__csm_ServiceParameters_destinationPort', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 184, 12), )

    
    destinationPort = property(__destinationPort.value, __destinationPort.set, None, None)

    
    # Element icmpMessage uses Python identifier icmpMessage
    __icmpMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'icmpMessage'), 'icmpMessage', '__csm_ServiceParameters_icmpMessage', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 192, 12), )

    
    icmpMessage = property(__icmpMessage.value, __icmpMessage.set, None, None)

    _ElementMap.update({
        __protocol.name() : __protocol,
        __sourcePort.name() : __sourcePort,
        __destinationPort.name() : __destinationPort,
        __icmpMessage.name() : __icmpMessage
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ServiceParameters = ServiceParameters
Namespace.addCategoryObject('typeBinding', 'ServiceParameters', ServiceParameters)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 177, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element port uses Python identifier port
    __port = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'port'), 'port', '__csm_CTD_ANON__port', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 179, 24), )

    
    port = property(__port.value, __port.set, None, None)

    
    # Element portRefGID uses Python identifier portRefGID
    __portRefGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'portRefGID'), 'portRefGID', '__csm_CTD_ANON__portRefGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 180, 24), )

    
    portRefGID = property(__portRefGID.value, __portRefGID.set, None, None)

    _ElementMap.update({
        __port.name() : __port,
        __portRefGID.name() : __portRefGID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_ = CTD_ANON_


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 185, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element port uses Python identifier port
    __port = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'port'), 'port', '__csm_CTD_ANON_2_port', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 187, 24), )

    
    port = property(__port.value, __port.set, None, None)

    
    # Element portRefGID uses Python identifier portRefGID
    __portRefGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'portRefGID'), 'portRefGID', '__csm_CTD_ANON_2_portRefGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 188, 24), )

    
    portRefGID = property(__portRefGID.value, __portRefGID.set, None, None)

    _ElementMap.update({
        __port.name() : __port,
        __portRefGID.name() : __portRefGID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_2 = CTD_ANON_2


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 222, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element dayOfWeekInterval uses Python identifier dayOfWeekInterval
    __dayOfWeekInterval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dayOfWeekInterval'), 'dayOfWeekInterval', '__csm_CTD_ANON_3_dayOfWeekInterval', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 224, 32), )

    
    dayOfWeekInterval = property(__dayOfWeekInterval.value, __dayOfWeekInterval.set, None, None)

    
    # Element weeklyInterval uses Python identifier weeklyInterval
    __weeklyInterval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'weeklyInterval'), 'weeklyInterval', '__csm_CTD_ANON_3_weeklyInterval', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 233, 32), )

    
    weeklyInterval = property(__weeklyInterval.value, __weeklyInterval.set, None, None)

    _ElementMap.update({
        __dayOfWeekInterval.name() : __dayOfWeekInterval,
        __weeklyInterval.name() : __weeklyInterval
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_3 = CTD_ANON_3


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 225, 36)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element dayOfWeek uses Python identifier dayOfWeek
    __dayOfWeek = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dayOfWeek'), 'dayOfWeek', '__csm_CTD_ANON_4_dayOfWeek', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 227, 44), )

    
    dayOfWeek = property(__dayOfWeek.value, __dayOfWeek.set, None, None)

    
    # Element startTime uses Python identifier startTime
    __startTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'startTime'), 'startTime', '__csm_CTD_ANON_4_startTime', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 228, 44), )

    
    startTime = property(__startTime.value, __startTime.set, None, None)

    
    # Element endTime uses Python identifier endTime
    __endTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'endTime'), 'endTime', '__csm_CTD_ANON_4_endTime', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 229, 44), )

    
    endTime = property(__endTime.value, __endTime.set, None, None)

    _ElementMap.update({
        __dayOfWeek.name() : __dayOfWeek,
        __startTime.name() : __startTime,
        __endTime.name() : __endTime
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_4 = CTD_ANON_4


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 234, 36)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element startDay uses Python identifier startDay
    __startDay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'startDay'), 'startDay', '__csm_CTD_ANON_5_startDay', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 236, 44), )

    
    startDay = property(__startDay.value, __startDay.set, None, None)

    
    # Element startTime uses Python identifier startTime
    __startTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'startTime'), 'startTime', '__csm_CTD_ANON_5_startTime', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 237, 44), )

    
    startTime = property(__startTime.value, __startTime.set, None, None)

    
    # Element endDay uses Python identifier endDay
    __endDay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'endDay'), 'endDay', '__csm_CTD_ANON_5_endDay', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 238, 44), )

    
    endDay = property(__endDay.value, __endDay.set, None, None)

    
    # Element endTime uses Python identifier endTime
    __endTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'endTime'), 'endTime', '__csm_CTD_ANON_5_endTime', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 239, 44), )

    
    endTime = property(__endTime.value, __endTime.set, None, None)

    _ElementMap.update({
        __startDay.name() : __startDay,
        __startTime.name() : __startTime,
        __endDay.name() : __endDay,
        __endTime.name() : __endTime
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_5 = CTD_ANON_5


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 299, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element sequenceNumber uses Python identifier sequenceNumber
    __sequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sequenceNumber'), 'sequenceNumber', '__csm_CTD_ANON_6_sequenceNumber', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 301, 32), )

    
    sequenceNumber = property(__sequenceNumber.value, __sequenceNumber.set, None, None)

    
    # Element aclObjectReferenceGID uses Python identifier aclObjectReferenceGID
    __aclObjectReferenceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'aclObjectReferenceGID'), 'aclObjectReferenceGID', '__csm_CTD_ANON_6_aclObjectReferenceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 303, 36), )

    
    aclObjectReferenceGID = property(__aclObjectReferenceGID.value, __aclObjectReferenceGID.set, None, None)

    
    # Element aceReferenceGID uses Python identifier aceReferenceGID
    __aceReferenceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'aceReferenceGID'), 'aceReferenceGID', '__csm_CTD_ANON_6_aceReferenceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 304, 36), )

    
    aceReferenceGID = property(__aceReferenceGID.value, __aceReferenceGID.set, None, None)

    _ElementMap.update({
        __sequenceNumber.name() : __sequenceNumber,
        __aclObjectReferenceGID.name() : __aclObjectReferenceGID,
        __aceReferenceGID.name() : __aceReferenceGID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_6 = CTD_ANON_6


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 334, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element serviceObjectGIDs uses Python identifier serviceObjectGIDs
    __serviceObjectGIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serviceObjectGIDs'), 'serviceObjectGIDs', '__csm_CTD_ANON_7_serviceObjectGIDs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 336, 32), )

    
    serviceObjectGIDs = property(__serviceObjectGIDs.value, __serviceObjectGIDs.set, None, None)

    
    # Element serviceParameters uses Python identifier serviceParameters
    __serviceParameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serviceParameters'), 'serviceParameters', '__csm_CTD_ANON_7_serviceParameters', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 337, 32), )

    
    serviceParameters = property(__serviceParameters.value, __serviceParameters.set, None, None)

    _ElementMap.update({
        __serviceObjectGIDs.name() : __serviceObjectGIDs,
        __serviceParameters.name() : __serviceParameters
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_7 = CTD_ANON_7


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 342, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element isFirewallLoggingEnabled uses Python identifier isFirewallLoggingEnabled
    __isFirewallLoggingEnabled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isFirewallLoggingEnabled'), 'isFirewallLoggingEnabled', '__csm_CTD_ANON_8_isFirewallLoggingEnabled', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 344, 32), )

    
    isFirewallLoggingEnabled = property(__isFirewallLoggingEnabled.value, __isFirewallLoggingEnabled.set, None, None)

    
    # Element isDefaultLogging uses Python identifier isDefaultLogging
    __isDefaultLogging = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isDefaultLogging'), 'isDefaultLogging', '__csm_CTD_ANON_8_isDefaultLogging', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 346, 36), )

    
    isDefaultLogging = property(__isDefaultLogging.value, __isDefaultLogging.set, None, None)

    
    # Element loggingInterval uses Python identifier loggingInterval
    __loggingInterval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'loggingInterval'), 'loggingInterval', '__csm_CTD_ANON_8_loggingInterval', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 348, 40), )

    
    loggingInterval = property(__loggingInterval.value, __loggingInterval.set, None, None)

    
    # Element loggingLevel uses Python identifier loggingLevel
    __loggingLevel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'loggingLevel'), 'loggingLevel', '__csm_CTD_ANON_8_loggingLevel', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 349, 40), )

    
    loggingLevel = property(__loggingLevel.value, __loggingLevel.set, None, None)

    
    # Element isIOSLoggingEnabled uses Python identifier isIOSLoggingEnabled
    __isIOSLoggingEnabled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isIOSLoggingEnabled'), 'isIOSLoggingEnabled', '__csm_CTD_ANON_8_isIOSLoggingEnabled', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 352, 32), )

    
    isIOSLoggingEnabled = property(__isIOSLoggingEnabled.value, __isIOSLoggingEnabled.set, None, None)

    
    # Element isLogInput uses Python identifier isLogInput
    __isLogInput = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isLogInput'), 'isLogInput', '__csm_CTD_ANON_8_isLogInput', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 353, 32), )

    
    isLogInput = property(__isLogInput.value, __isLogInput.set, None, None)

    _ElementMap.update({
        __isFirewallLoggingEnabled.name() : __isFirewallLoggingEnabled,
        __isDefaultLogging.name() : __isDefaultLogging,
        __loggingInterval.name() : __loggingInterval,
        __loggingLevel.name() : __loggingLevel,
        __isIOSLoggingEnabled.name() : __isIOSLoggingEnabled,
        __isLogInput.name() : __isLogInput
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_8 = CTD_ANON_8


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 871, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element useAsDefaultRoute uses Python identifier useAsDefaultRoute
    __useAsDefaultRoute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'useAsDefaultRoute'), 'useAsDefaultRoute', '__csm_CTD_ANON_9_useAsDefaultRoute', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 873, 32), )

    
    useAsDefaultRoute = property(__useAsDefaultRoute.value, __useAsDefaultRoute.set, None, None)

    
    # Element prefix uses Python identifier prefix
    __prefix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'prefix'), 'prefix', '__csm_CTD_ANON_9_prefix', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 874, 32), )

    
    prefix = property(__prefix.value, __prefix.set, None, None)

    _ElementMap.update({
        __useAsDefaultRoute.name() : __useAsDefaultRoute,
        __prefix.name() : __prefix
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_9 = CTD_ANON_9


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 879, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element forwardingInterfaceGID uses Python identifier forwardingInterfaceGID
    __forwardingInterfaceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'forwardingInterfaceGID'), 'forwardingInterfaceGID', '__csm_CTD_ANON_10_forwardingInterfaceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 881, 32), )

    
    forwardingInterfaceGID = property(__forwardingInterfaceGID.value, __forwardingInterfaceGID.set, None, None)

    
    # Element forwardingIPAddress uses Python identifier forwardingIPAddress
    __forwardingIPAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'forwardingIPAddress'), 'forwardingIPAddress', '__csm_CTD_ANON_10_forwardingIPAddress', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 882, 32), )

    
    forwardingIPAddress = property(__forwardingIPAddress.value, __forwardingIPAddress.set, None, None)

    _ElementMap.update({
        __forwardingInterfaceGID.name() : __forwardingInterfaceGID,
        __forwardingIPAddress.name() : __forwardingIPAddress
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_10 = CTD_ANON_10


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1258, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ipAddress uses Python identifier ipAddress
    __ipAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ipAddress'), 'ipAddress', '__csm_CTD_ANON_11_ipAddress', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1260, 32), )

    
    ipAddress = property(__ipAddress.value, __ipAddress.set, None, None)

    
    # Element asNumber uses Python identifier asNumber
    __asNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'asNumber'), 'asNumber', '__csm_CTD_ANON_11_asNumber', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1261, 32), )

    
    asNumber = property(__asNumber.value, __asNumber.set, None, None)

    _ElementMap.update({
        __ipAddress.name() : __ipAddress,
        __asNumber.name() : __asNumber
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_11 = CTD_ANON_11


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1269, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element protocol uses Python identifier protocol
    __protocol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'protocol'), 'protocol', '__csm_CTD_ANON_12_protocol', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1271, 32), )

    
    protocol = property(__protocol.value, __protocol.set, None, None)

    
    # Element metric uses Python identifier metric
    __metric = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'metric'), 'metric', '__csm_CTD_ANON_12_metric', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1312, 32), )

    
    metric = property(__metric.value, __metric.set, None, None)

    _ElementMap.update({
        __protocol.name() : __protocol,
        __metric.name() : __metric
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_12 = CTD_ANON_12


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1272, 36)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element static uses Python identifier static
    __static = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'static'), 'static', '__csm_CTD_ANON_13_static', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1274, 44), )

    
    static = property(__static.value, __static.set, None, None)

    
    # Element connected uses Python identifier connected
    __connected = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'connected'), 'connected', '__csm_CTD_ANON_13_connected', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1282, 44), )

    
    connected = property(__connected.value, __connected.set, None, None)

    
    # Element rip uses Python identifier rip
    __rip = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'rip'), 'rip', '__csm_CTD_ANON_13_rip', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1283, 44), )

    
    rip = property(__rip.value, __rip.set, None, None)

    
    # Element eigrp uses Python identifier eigrp
    __eigrp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'eigrp'), 'eigrp', '__csm_CTD_ANON_13_eigrp', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1284, 44), )

    
    eigrp = property(__eigrp.value, __eigrp.set, None, None)

    
    # Element ospf uses Python identifier ospf
    __ospf = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ospf'), 'ospf', '__csm_CTD_ANON_13_ospf', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1291, 44), )

    
    ospf = property(__ospf.value, __ospf.set, None, None)

    _ElementMap.update({
        __static.name() : __static,
        __connected.name() : __connected,
        __rip.name() : __rip,
        __eigrp.name() : __eigrp,
        __ospf.name() : __ospf
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_13 = CTD_ANON_13


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1285, 48)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element asNumber uses Python identifier asNumber
    __asNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'asNumber'), 'asNumber', '__csm_CTD_ANON_14_asNumber', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1287, 56), )

    
    asNumber = property(__asNumber.value, __asNumber.set, None, None)

    _ElementMap.update({
        __asNumber.name() : __asNumber
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_14 = CTD_ANON_14


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1292, 48)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element processId uses Python identifier processId
    __processId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'processId'), 'processId', '__csm_CTD_ANON_15_processId', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1294, 56), )

    
    processId = property(__processId.value, __processId.set, None, None)

    
    # Element match uses Python identifier match
    __match = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'match'), 'match', '__csm_CTD_ANON_15_match', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1295, 56), )

    
    match = property(__match.value, __match.set, None, None)

    _ElementMap.update({
        __processId.name() : __processId,
        __match.name() : __match
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_15 = CTD_ANON_15


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1345, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element originalIP uses Python identifier originalIP
    __originalIP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'originalIP'), 'originalIP', '__csm_CTD_ANON_16_originalIP', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1347, 32), )

    
    originalIP = property(__originalIP.value, __originalIP.set, None, None)

    
    # Element interfaceGID uses Python identifier interfaceGID
    __interfaceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceGID'), 'interfaceGID', '__csm_CTD_ANON_16_interfaceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1348, 32), )

    
    interfaceGID = property(__interfaceGID.value, __interfaceGID.set, None, None)

    _ElementMap.update({
        __originalIP.name() : __originalIP,
        __interfaceGID.name() : __interfaceGID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_16 = CTD_ANON_16


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_17 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1353, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element protocol uses Python identifier protocol
    __protocol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'protocol'), 'protocol', '__csm_CTD_ANON_17_protocol', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1355, 32), )

    
    protocol = property(__protocol.value, __protocol.set, None, None)

    
    # Element localPort uses Python identifier localPort
    __localPort = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'localPort'), 'localPort', '__csm_CTD_ANON_17_localPort', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1356, 32), )

    
    localPort = property(__localPort.value, __localPort.set, None, None)

    
    # Element globalPort uses Python identifier globalPort
    __globalPort = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'globalPort'), 'globalPort', '__csm_CTD_ANON_17_globalPort', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1357, 32), )

    
    globalPort = property(__globalPort.value, __globalPort.set, None, None)

    _ElementMap.update({
        __protocol.name() : __protocol,
        __localPort.name() : __localPort,
        __globalPort.name() : __globalPort
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_17 = CTD_ANON_17


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_18 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1362, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element noAlias uses Python identifier noAlias
    __noAlias = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'noAlias'), 'noAlias', '__csm_CTD_ANON_18_noAlias', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1364, 32), )

    
    noAlias = property(__noAlias.value, __noAlias.set, None, None)

    
    # Element noPayload uses Python identifier noPayload
    __noPayload = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'noPayload'), 'noPayload', '__csm_CTD_ANON_18_noPayload', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1365, 32), )

    
    noPayload = property(__noPayload.value, __noPayload.set, None, None)

    
    # Element createExtTransEntry uses Python identifier createExtTransEntry
    __createExtTransEntry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'createExtTransEntry'), 'createExtTransEntry', '__csm_CTD_ANON_18_createExtTransEntry', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1366, 32), )

    
    createExtTransEntry = property(__createExtTransEntry.value, __createExtTransEntry.set, None, None)

    _ElementMap.update({
        __noAlias.name() : __noAlias,
        __noPayload.name() : __noPayload,
        __createExtTransEntry.name() : __createExtTransEntry
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_18 = CTD_ANON_18


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1380, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element interfaceGID uses Python identifier interfaceGID
    __interfaceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceGID'), 'interfaceGID', '__csm_CTD_ANON_19_interfaceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1382, 32), )

    
    interfaceGID = property(__interfaceGID.value, __interfaceGID.set, None, None)

    
    # Element addressPool uses Python identifier addressPool
    __addressPool = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'addressPool'), 'addressPool', '__csm_CTD_ANON_19_addressPool', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1383, 32), )

    
    addressPool = property(__addressPool.value, __addressPool.set, None, None)

    _ElementMap.update({
        __interfaceGID.name() : __interfaceGID,
        __addressPool.name() : __addressPool
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_19 = CTD_ANON_19


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1388, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element enablePortTrans uses Python identifier enablePortTrans
    __enablePortTrans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'enablePortTrans'), 'enablePortTrans', '__csm_CTD_ANON_20_enablePortTrans', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1390, 32), )

    
    enablePortTrans = property(__enablePortTrans.value, __enablePortTrans.set, None, None)

    
    # Element noTransVPN uses Python identifier noTransVPN
    __noTransVPN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'noTransVPN'), 'noTransVPN', '__csm_CTD_ANON_20_noTransVPN', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1391, 32), )

    
    noTransVPN = property(__noTransVPN.value, __noTransVPN.set, None, None)

    _ElementMap.update({
        __enablePortTrans.name() : __enablePortTrans,
        __noTransVPN.name() : __noTransVPN
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_20 = CTD_ANON_20


# Complex type {csm}FirewallNATAdvancedOptions with content type ELEMENT_ONLY
class FirewallNATAdvancedOptions (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}FirewallNATAdvancedOptions with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FirewallNATAdvancedOptions')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1420, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element isTransDNSReplies uses Python identifier isTransDNSReplies
    __isTransDNSReplies = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isTransDNSReplies'), 'isTransDNSReplies', '__csm_FirewallNATAdvancedOptions_isTransDNSReplies', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1422, 12), )

    
    isTransDNSReplies = property(__isTransDNSReplies.value, __isTransDNSReplies.set, None, None)

    
    # Element maxTCPConnPerRule uses Python identifier maxTCPConnPerRule
    __maxTCPConnPerRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'maxTCPConnPerRule'), 'maxTCPConnPerRule', '__csm_FirewallNATAdvancedOptions_maxTCPConnPerRule', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1423, 12), )

    
    maxTCPConnPerRule = property(__maxTCPConnPerRule.value, __maxTCPConnPerRule.set, None, None)

    
    # Element maxUDPConnPerRule uses Python identifier maxUDPConnPerRule
    __maxUDPConnPerRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'maxUDPConnPerRule'), 'maxUDPConnPerRule', '__csm_FirewallNATAdvancedOptions_maxUDPConnPerRule', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1424, 12), )

    
    maxUDPConnPerRule = property(__maxUDPConnPerRule.value, __maxUDPConnPerRule.set, None, None)

    
    # Element maxEmbConnections uses Python identifier maxEmbConnections
    __maxEmbConnections = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'maxEmbConnections'), 'maxEmbConnections', '__csm_FirewallNATAdvancedOptions_maxEmbConnections', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1425, 12), )

    
    maxEmbConnections = property(__maxEmbConnections.value, __maxEmbConnections.set, None, None)

    
    # Element randomizeSeqNum uses Python identifier randomizeSeqNum
    __randomizeSeqNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'randomizeSeqNum'), 'randomizeSeqNum', '__csm_FirewallNATAdvancedOptions_randomizeSeqNum', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1426, 12), )

    
    randomizeSeqNum = property(__randomizeSeqNum.value, __randomizeSeqNum.set, None, None)

    _ElementMap.update({
        __isTransDNSReplies.name() : __isTransDNSReplies,
        __maxTCPConnPerRule.name() : __maxTCPConnPerRule,
        __maxUDPConnPerRule.name() : __maxUDPConnPerRule,
        __maxEmbConnections.name() : __maxEmbConnections,
        __randomizeSeqNum.name() : __randomizeSeqNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.FirewallNATAdvancedOptions = FirewallNATAdvancedOptions
Namespace.addCategoryObject('typeBinding', 'FirewallNATAdvancedOptions', FirewallNATAdvancedOptions)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1500, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element serviceData uses Python identifier serviceData
    __serviceData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serviceData'), 'serviceData', '__csm_CTD_ANON_21_serviceData', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1502, 32), )

    
    serviceData = property(__serviceData.value, __serviceData.set, None, None)

    
    # Element serviceObjectGID uses Python identifier serviceObjectGID
    __serviceObjectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serviceObjectGID'), 'serviceObjectGID', '__csm_CTD_ANON_21_serviceObjectGID', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1503, 32), )

    
    serviceObjectGID = property(__serviceObjectGID.value, __serviceObjectGID.set, None, None)

    _ElementMap.update({
        __serviceData.name() : __serviceData,
        __serviceObjectGID.name() : __serviceObjectGID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_21 = CTD_ANON_21


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_22 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1530, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element destAddress uses Python identifier destAddress
    __destAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'destAddress'), 'destAddress', '__csm_CTD_ANON_22_destAddress', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1532, 32), )

    
    destAddress = property(__destAddress.value, __destAddress.set, None, None)

    
    # Element services uses Python identifier services
    __services = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'services'), 'services', '__csm_CTD_ANON_22_services', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1533, 32), )

    
    services = property(__services.value, __services.set, None, None)

    _ElementMap.update({
        __destAddress.name() : __destAddress,
        __services.name() : __services
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_22 = CTD_ANON_22


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1534, 36)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element serviceData uses Python identifier serviceData
    __serviceData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serviceData'), 'serviceData', '__csm_CTD_ANON_23_serviceData', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1536, 44), )

    
    serviceData = property(__serviceData.value, __serviceData.set, None, None)

    
    # Element serviceObjectGID uses Python identifier serviceObjectGID
    __serviceObjectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serviceObjectGID'), 'serviceObjectGID', '__csm_CTD_ANON_23_serviceObjectGID', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1537, 44), )

    
    serviceObjectGID = property(__serviceObjectGID.value, __serviceObjectGID.set, None, None)

    _ElementMap.update({
        __serviceData.name() : __serviceData,
        __serviceObjectGID.name() : __serviceObjectGID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_23 = CTD_ANON_23


# Complex type {csm}PatOptions with content type ELEMENT_ONLY
class PatOptions (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}PatOptions with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PatOptions')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1552, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element patAddressPool uses Python identifier patAddressPool
    __patAddressPool = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'patAddressPool'), 'patAddressPool', '__csm_PatOptions_patAddressPool', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1554, 2), )

    
    patAddressPool = property(__patAddressPool.value, __patAddressPool.set, None, None)

    
    # Element isPatAllocatedInRoundRobin uses Python identifier isPatAllocatedInRoundRobin
    __isPatAllocatedInRoundRobin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isPatAllocatedInRoundRobin'), 'isPatAllocatedInRoundRobin', '__csm_PatOptions_isPatAllocatedInRoundRobin', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1562, 2), )

    
    isPatAllocatedInRoundRobin = property(__isPatAllocatedInRoundRobin.value, __isPatAllocatedInRoundRobin.set, None, None)

    _ElementMap.update({
        __patAddressPool.name() : __patAddressPool,
        __isPatAllocatedInRoundRobin.name() : __isPatAllocatedInRoundRobin
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PatOptions = PatOptions
Namespace.addCategoryObject('typeBinding', 'PatOptions', PatOptions)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1555, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element patPoolAddressGID uses Python identifier patPoolAddressGID
    __patPoolAddressGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'patPoolAddressGID'), 'patPoolAddressGID', '__csm_CTD_ANON_24_patPoolAddressGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1557, 5), )

    
    patPoolAddressGID = property(__patPoolAddressGID.value, __patPoolAddressGID.set, None, None)

    
    # Element interfaceKeyword uses Python identifier interfaceKeyword
    __interfaceKeyword = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceKeyword'), 'interfaceKeyword', '__csm_CTD_ANON_24_interfaceKeyword', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1558, 5), )

    
    interfaceKeyword = property(__interfaceKeyword.value, __interfaceKeyword.set, None, None)

    _ElementMap.update({
        __patPoolAddressGID.name() : __patPoolAddressGID,
        __interfaceKeyword.name() : __interfaceKeyword
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_24 = CTD_ANON_24


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1580, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element realInterfaceGID uses Python identifier realInterfaceGID
    __realInterfaceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'realInterfaceGID'), 'realInterfaceGID', '__csm_CTD_ANON_25_realInterfaceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1582, 32), )

    
    realInterfaceGID = property(__realInterfaceGID.value, __realInterfaceGID.set, None, None)

    
    # Element realInterfaceName uses Python identifier realInterfaceName
    __realInterfaceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'realInterfaceName'), 'realInterfaceName', '__csm_CTD_ANON_25_realInterfaceName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1583, 32), )

    
    realInterfaceName = property(__realInterfaceName.value, __realInterfaceName.set, None, None)

    _ElementMap.update({
        __realInterfaceGID.name() : __realInterfaceGID,
        __realInterfaceName.name() : __realInterfaceName
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_25 = CTD_ANON_25


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_26 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1588, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element mappedInterfaceGID uses Python identifier mappedInterfaceGID
    __mappedInterfaceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'mappedInterfaceGID'), 'mappedInterfaceGID', '__csm_CTD_ANON_26_mappedInterfaceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1590, 32), )

    
    mappedInterfaceGID = property(__mappedInterfaceGID.value, __mappedInterfaceGID.set, None, None)

    
    # Element mappedInterfaceName uses Python identifier mappedInterfaceName
    __mappedInterfaceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'mappedInterfaceName'), 'mappedInterfaceName', '__csm_CTD_ANON_26_mappedInterfaceName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1591, 32), )

    
    mappedInterfaceName = property(__mappedInterfaceName.value, __mappedInterfaceName.set, None, None)

    _ElementMap.update({
        __mappedInterfaceGID.name() : __mappedInterfaceGID,
        __mappedInterfaceName.name() : __mappedInterfaceName
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_26 = CTD_ANON_26


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1596, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element natType uses Python identifier natType
    __natType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'natType'), 'natType', '__csm_CTD_ANON_27_natType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1598, 32), )

    
    natType = property(__natType.value, __natType.set, None, None)

    
    # Element originalObjectGID uses Python identifier originalObjectGID
    __originalObjectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'originalObjectGID'), 'originalObjectGID', '__csm_CTD_ANON_27_originalObjectGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1599, 32), )

    
    originalObjectGID = property(__originalObjectGID.value, __originalObjectGID.set, None, None)

    
    # Element translated uses Python identifier translated
    __translated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'translated'), 'translated', '__csm_CTD_ANON_27_translated', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1600, 8), )

    
    translated = property(__translated.value, __translated.set, None, None)

    _ElementMap.update({
        __natType.name() : __natType,
        __originalObjectGID.name() : __originalObjectGID,
        __translated.name() : __translated
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_27 = CTD_ANON_27


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_28 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1601, 33)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element objectGID uses Python identifier objectGID
    __objectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'objectGID'), 'objectGID', '__csm_CTD_ANON_28_objectGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1603, 35), )

    
    objectGID = property(__objectGID.value, __objectGID.set, None, None)

    
    # Element patPool uses Python identifier patPool
    __patPool = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'patPool'), 'patPool', '__csm_CTD_ANON_28_patPool', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1604, 35), )

    
    patPool = property(__patPool.value, __patPool.set, None, None)

    _ElementMap.update({
        __objectGID.name() : __objectGID,
        __patPool.name() : __patPool
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_28 = CTD_ANON_28


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1612, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element natType uses Python identifier natType
    __natType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'natType'), 'natType', '__csm_CTD_ANON_29_natType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1614, 32), )

    
    natType = property(__natType.value, __natType.set, None, None)

    
    # Element originalObject uses Python identifier originalObject
    __originalObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'originalObject'), 'originalObject', '__csm_CTD_ANON_29_originalObject', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1615, 8), )

    
    originalObject = property(__originalObject.value, __originalObject.set, None, None)

    
    # Element translatedObjectGID uses Python identifier translatedObjectGID
    __translatedObjectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'translatedObjectGID'), 'translatedObjectGID', '__csm_CTD_ANON_29_translatedObjectGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1616, 8), )

    
    translatedObjectGID = property(__translatedObjectGID.value, __translatedObjectGID.set, None, None)

    _ElementMap.update({
        __natType.name() : __natType,
        __originalObject.name() : __originalObject,
        __translatedObjectGID.name() : __translatedObjectGID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_29 = CTD_ANON_29


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1621, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element originalObjectGID uses Python identifier originalObjectGID
    __originalObjectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'originalObjectGID'), 'originalObjectGID', '__csm_CTD_ANON_30_originalObjectGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1623, 32), )

    
    originalObjectGID = property(__originalObjectGID.value, __originalObjectGID.set, None, None)

    
    # Element transObjectGID uses Python identifier transObjectGID
    __transObjectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'transObjectGID'), 'transObjectGID', '__csm_CTD_ANON_30_transObjectGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1624, 32), )

    
    transObjectGID = property(__transObjectGID.value, __transObjectGID.set, None, None)

    _ElementMap.update({
        __originalObjectGID.name() : __originalObjectGID,
        __transObjectGID.name() : __transObjectGID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_30 = CTD_ANON_30


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_31 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1661, 33)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element objectGID uses Python identifier objectGID
    __objectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'objectGID'), 'objectGID', '__csm_CTD_ANON_31_objectGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1663, 35), )

    
    objectGID = property(__objectGID.value, __objectGID.set, None, None)

    
    # Element patPool uses Python identifier patPool
    __patPool = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'patPool'), 'patPool', '__csm_CTD_ANON_31_patPool', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1664, 35), )

    
    patPool = property(__patPool.value, __patPool.set, None, None)

    _ElementMap.update({
        __objectGID.name() : __objectGID,
        __patPool.name() : __patPool
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_31 = CTD_ANON_31


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_32 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1673, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element protocol uses Python identifier protocol
    __protocol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'protocol'), 'protocol', '__csm_CTD_ANON_32_protocol', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1675, 32), )

    
    protocol = property(__protocol.value, __protocol.set, None, None)

    
    # Element originalPort uses Python identifier originalPort
    __originalPort = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'originalPort'), 'originalPort', '__csm_CTD_ANON_32_originalPort', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1676, 32), )

    
    originalPort = property(__originalPort.value, __originalPort.set, None, None)

    
    # Element transPort uses Python identifier transPort
    __transPort = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'transPort'), 'transPort', '__csm_CTD_ANON_32_transPort', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1677, 32), )

    
    transPort = property(__transPort.value, __transPort.set, None, None)

    _ElementMap.update({
        __protocol.name() : __protocol,
        __originalPort.name() : __originalPort,
        __transPort.name() : __transPort
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_32 = CTD_ANON_32


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_33 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1735, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element deviceCapability uses Python identifier deviceCapability
    __deviceCapability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceCapability'), 'deviceCapability', '__csm_CTD_ANON_33_deviceCapability', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1737, 32), )

    
    deviceCapability = property(__deviceCapability.value, __deviceCapability.set, None, None)

    
    # Element deviceName uses Python identifier deviceName
    __deviceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceName'), 'deviceName', '__csm_CTD_ANON_33_deviceName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1739, 32), )

    
    deviceName = property(__deviceName.value, __deviceName.set, None, None)

    
    # Element ipv4Address uses Python identifier ipv4Address
    __ipv4Address = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ipv4Address'), 'ipv4Address', '__csm_CTD_ANON_33_ipv4Address', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1740, 32), )

    
    ipv4Address = property(__ipv4Address.value, __ipv4Address.set, None, None)

    
    # Element sysObjectID uses Python identifier sysObjectID
    __sysObjectID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sysObjectID'), 'sysObjectID', '__csm_CTD_ANON_33_sysObjectID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1741, 32), )

    
    sysObjectID = property(__sysObjectID.value, __sysObjectID.set, None, None)

    
    # Element gid uses Python identifier gid
    __gid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gid'), 'gid', '__csm_CTD_ANON_33_gid', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1742, 32), )

    
    gid = property(__gid.value, __gid.set, None, None)

    _ElementMap.update({
        __deviceCapability.name() : __deviceCapability,
        __deviceName.name() : __deviceName,
        __ipv4Address.name() : __ipv4Address,
        __sysObjectID.name() : __sysObjectID,
        __gid.name() : __gid
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_33 = CTD_ANON_33


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_34 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1842, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element policyDesc uses Python identifier policyDesc
    __policyDesc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyDesc'), 'policyDesc', '__csm_CTD_ANON_34_policyDesc', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1844, 32), )

    
    policyDesc = property(__policyDesc.value, __policyDesc.set, None, None)

    _ElementMap.update({
        __policyDesc.name() : __policyDesc
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_34 = CTD_ANON_34


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_35 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1999, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element policyName uses Python identifier policyName
    __policyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyName'), 'policyName', '__csm_CTD_ANON_35_policyName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2001, 32), )

    
    policyName = property(__policyName.value, __policyName.set, None, None)

    
    # Element deviceAssignments uses Python identifier deviceAssignments
    __deviceAssignments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceAssignments'), 'deviceAssignments', '__csm_CTD_ANON_35_deviceAssignments', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2002, 32), )

    
    deviceAssignments = property(__deviceAssignments.value, __deviceAssignments.set, None, None)

    _ElementMap.update({
        __policyName.name() : __policyName,
        __deviceAssignments.name() : __deviceAssignments
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_35 = CTD_ANON_35


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_36 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2003, 36)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element device uses Python identifier device
    __device = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'device'), 'device', '__csm_CTD_ANON_36_device', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2005, 44), )

    
    device = property(__device.value, __device.set, None, None)

    _ElementMap.update({
        __device.name() : __device
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_36 = CTD_ANON_36


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2006, 48)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element deviceGID uses Python identifier deviceGID
    __deviceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGID'), 'deviceGID', '__csm_CTD_ANON_37_deviceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2008, 56), )

    
    deviceGID = property(__deviceGID.value, __deviceGID.set, None, None)

    
    # Element deviceName uses Python identifier deviceName
    __deviceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceName'), 'deviceName', '__csm_CTD_ANON_37_deviceName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2009, 56), )

    
    deviceName = property(__deviceName.value, __deviceName.set, None, None)

    _ElementMap.update({
        __deviceGID.name() : __deviceGID,
        __deviceName.name() : __deviceName
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_37 = CTD_ANON_37


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_38 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2029, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element deviceAccessRuleFirewallPolicy uses Python identifier deviceAccessRuleFirewallPolicy
    __deviceAccessRuleFirewallPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceAccessRuleFirewallPolicy'), 'deviceAccessRuleFirewallPolicy', '__csm_CTD_ANON_38_deviceAccessRuleFirewallPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2032, 32), )

    
    deviceAccessRuleFirewallPolicy = property(__deviceAccessRuleFirewallPolicy.value, __deviceAccessRuleFirewallPolicy.set, None, None)

    
    # Element deviceAccessRuleUnifiedFirewallPolicy uses Python identifier deviceAccessRuleUnifiedFirewallPolicy
    __deviceAccessRuleUnifiedFirewallPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceAccessRuleUnifiedFirewallPolicy'), 'deviceAccessRuleUnifiedFirewallPolicy', '__csm_CTD_ANON_38_deviceAccessRuleUnifiedFirewallPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2033, 32), )

    
    deviceAccessRuleUnifiedFirewallPolicy = property(__deviceAccessRuleUnifiedFirewallPolicy.value, __deviceAccessRuleUnifiedFirewallPolicy.set, None, None)

    
    # Element firewallACLSettingsPolicy uses Python identifier firewallACLSettingsPolicy
    __firewallACLSettingsPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'firewallACLSettingsPolicy'), 'firewallACLSettingsPolicy', '__csm_CTD_ANON_38_firewallACLSettingsPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2034, 32), )

    
    firewallACLSettingsPolicy = property(__firewallACLSettingsPolicy.value, __firewallACLSettingsPolicy.set, None, None)

    
    # Element deviceStaticRoutingRouterPolicy uses Python identifier deviceStaticRoutingRouterPolicy
    __deviceStaticRoutingRouterPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceStaticRoutingRouterPolicy'), 'deviceStaticRoutingRouterPolicy', '__csm_CTD_ANON_38_deviceStaticRoutingRouterPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2043, 32), )

    
    deviceStaticRoutingRouterPolicy = property(__deviceStaticRoutingRouterPolicy.value, __deviceStaticRoutingRouterPolicy.set, None, None)

    
    # Element deviceStaticRoutingFirewallPolicy uses Python identifier deviceStaticRoutingFirewallPolicy
    __deviceStaticRoutingFirewallPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceStaticRoutingFirewallPolicy'), 'deviceStaticRoutingFirewallPolicy', '__csm_CTD_ANON_38_deviceStaticRoutingFirewallPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2044, 32), )

    
    deviceStaticRoutingFirewallPolicy = property(__deviceStaticRoutingFirewallPolicy.value, __deviceStaticRoutingFirewallPolicy.set, None, None)

    
    # Element deviceBgpRouterPolicy uses Python identifier deviceBgpRouterPolicy
    __deviceBgpRouterPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceBgpRouterPolicy'), 'deviceBgpRouterPolicy', '__csm_CTD_ANON_38_deviceBgpRouterPolicy', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2049, 32), )

    
    deviceBgpRouterPolicy = property(__deviceBgpRouterPolicy.value, __deviceBgpRouterPolicy.set, None, None)

    
    # Element interfaceNATRouterPolicy uses Python identifier interfaceNATRouterPolicy
    __interfaceNATRouterPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceNATRouterPolicy'), 'interfaceNATRouterPolicy', '__csm_CTD_ANON_38_interfaceNATRouterPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2050, 32), )

    
    interfaceNATRouterPolicy = property(__interfaceNATRouterPolicy.value, __interfaceNATRouterPolicy.set, None, None)

    
    # Element interfaceNATStaticRulesRouterPolicy uses Python identifier interfaceNATStaticRulesRouterPolicy
    __interfaceNATStaticRulesRouterPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceNATStaticRulesRouterPolicy'), 'interfaceNATStaticRulesRouterPolicy', '__csm_CTD_ANON_38_interfaceNATStaticRulesRouterPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2051, 32), )

    
    interfaceNATStaticRulesRouterPolicy = property(__interfaceNATStaticRulesRouterPolicy.value, __interfaceNATStaticRulesRouterPolicy.set, None, None)

    
    # Element interfaceNATDynamicRulesRouterPolicy uses Python identifier interfaceNATDynamicRulesRouterPolicy
    __interfaceNATDynamicRulesRouterPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceNATDynamicRulesRouterPolicy'), 'interfaceNATDynamicRulesRouterPolicy', '__csm_CTD_ANON_38_interfaceNATDynamicRulesRouterPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2052, 32), )

    
    interfaceNATDynamicRulesRouterPolicy = property(__interfaceNATDynamicRulesRouterPolicy.value, __interfaceNATDynamicRulesRouterPolicy.set, None, None)

    
    # Element deviceNATTimeoutsRouterPolicy uses Python identifier deviceNATTimeoutsRouterPolicy
    __deviceNATTimeoutsRouterPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceNATTimeoutsRouterPolicy'), 'deviceNATTimeoutsRouterPolicy', '__csm_CTD_ANON_38_deviceNATTimeoutsRouterPolicy', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2053, 32), )

    
    deviceNATTimeoutsRouterPolicy = property(__deviceNATTimeoutsRouterPolicy.value, __deviceNATTimeoutsRouterPolicy.set, None, None)

    
    # Element interfaceNATAddressPoolFirewallPolicy uses Python identifier interfaceNATAddressPoolFirewallPolicy
    __interfaceNATAddressPoolFirewallPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceNATAddressPoolFirewallPolicy'), 'interfaceNATAddressPoolFirewallPolicy', '__csm_CTD_ANON_38_interfaceNATAddressPoolFirewallPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2054, 32), )

    
    interfaceNATAddressPoolFirewallPolicy = property(__interfaceNATAddressPoolFirewallPolicy.value, __interfaceNATAddressPoolFirewallPolicy.set, None, None)

    
    # Element deviceNATTransOptionsFirewallPolicy uses Python identifier deviceNATTransOptionsFirewallPolicy
    __deviceNATTransOptionsFirewallPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceNATTransOptionsFirewallPolicy'), 'deviceNATTransOptionsFirewallPolicy', '__csm_CTD_ANON_38_deviceNATTransOptionsFirewallPolicy', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2055, 32), )

    
    deviceNATTransOptionsFirewallPolicy = property(__deviceNATTransOptionsFirewallPolicy.value, __deviceNATTransOptionsFirewallPolicy.set, None, None)

    
    # Element interfaceNATTransExemptionsFirewallPolicy uses Python identifier interfaceNATTransExemptionsFirewallPolicy
    __interfaceNATTransExemptionsFirewallPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceNATTransExemptionsFirewallPolicy'), 'interfaceNATTransExemptionsFirewallPolicy', '__csm_CTD_ANON_38_interfaceNATTransExemptionsFirewallPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2056, 32), )

    
    interfaceNATTransExemptionsFirewallPolicy = property(__interfaceNATTransExemptionsFirewallPolicy.value, __interfaceNATTransExemptionsFirewallPolicy.set, None, None)

    
    # Element interfaceNATDynamicRulesFirewallPolicy uses Python identifier interfaceNATDynamicRulesFirewallPolicy
    __interfaceNATDynamicRulesFirewallPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceNATDynamicRulesFirewallPolicy'), 'interfaceNATDynamicRulesFirewallPolicy', '__csm_CTD_ANON_38_interfaceNATDynamicRulesFirewallPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2057, 32), )

    
    interfaceNATDynamicRulesFirewallPolicy = property(__interfaceNATDynamicRulesFirewallPolicy.value, __interfaceNATDynamicRulesFirewallPolicy.set, None, None)

    
    # Element interfaceNATPolicyDynamicRulesFirewallPolicy uses Python identifier interfaceNATPolicyDynamicRulesFirewallPolicy
    __interfaceNATPolicyDynamicRulesFirewallPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceNATPolicyDynamicRulesFirewallPolicy'), 'interfaceNATPolicyDynamicRulesFirewallPolicy', '__csm_CTD_ANON_38_interfaceNATPolicyDynamicRulesFirewallPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2058, 32), )

    
    interfaceNATPolicyDynamicRulesFirewallPolicy = property(__interfaceNATPolicyDynamicRulesFirewallPolicy.value, __interfaceNATPolicyDynamicRulesFirewallPolicy.set, None, None)

    
    # Element interfaceNATStaticRulesFirewallPolicy uses Python identifier interfaceNATStaticRulesFirewallPolicy
    __interfaceNATStaticRulesFirewallPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceNATStaticRulesFirewallPolicy'), 'interfaceNATStaticRulesFirewallPolicy', '__csm_CTD_ANON_38_interfaceNATStaticRulesFirewallPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2059, 32), )

    
    interfaceNATStaticRulesFirewallPolicy = property(__interfaceNATStaticRulesFirewallPolicy.value, __interfaceNATStaticRulesFirewallPolicy.set, None, None)

    
    # Element interfaceNATManualFirewallPolicy uses Python identifier interfaceNATManualFirewallPolicy
    __interfaceNATManualFirewallPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceNATManualFirewallPolicy'), 'interfaceNATManualFirewallPolicy', '__csm_CTD_ANON_38_interfaceNATManualFirewallPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2060, 32), )

    
    interfaceNATManualFirewallPolicy = property(__interfaceNATManualFirewallPolicy.value, __interfaceNATManualFirewallPolicy.set, None, None)

    
    # Element interfaceNATObjectFirewallPolicy uses Python identifier interfaceNATObjectFirewallPolicy
    __interfaceNATObjectFirewallPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceNATObjectFirewallPolicy'), 'interfaceNATObjectFirewallPolicy', '__csm_CTD_ANON_38_interfaceNATObjectFirewallPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2061, 32), )

    
    interfaceNATObjectFirewallPolicy = property(__interfaceNATObjectFirewallPolicy.value, __interfaceNATObjectFirewallPolicy.set, None, None)

    
    # Element interfaceNAT64ManualFirewallPolicy uses Python identifier interfaceNAT64ManualFirewallPolicy
    __interfaceNAT64ManualFirewallPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceNAT64ManualFirewallPolicy'), 'interfaceNAT64ManualFirewallPolicy', '__csm_CTD_ANON_38_interfaceNAT64ManualFirewallPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2062, 32), )

    
    interfaceNAT64ManualFirewallPolicy = property(__interfaceNAT64ManualFirewallPolicy.value, __interfaceNAT64ManualFirewallPolicy.set, None, None)

    
    # Element interfaceNAT64ObjectFirewallPolicy uses Python identifier interfaceNAT64ObjectFirewallPolicy
    __interfaceNAT64ObjectFirewallPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceNAT64ObjectFirewallPolicy'), 'interfaceNAT64ObjectFirewallPolicy', '__csm_CTD_ANON_38_interfaceNAT64ObjectFirewallPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2063, 32), )

    
    interfaceNAT64ObjectFirewallPolicy = property(__interfaceNAT64ObjectFirewallPolicy.value, __interfaceNAT64ObjectFirewallPolicy.set, None, None)

    _ElementMap.update({
        __deviceAccessRuleFirewallPolicy.name() : __deviceAccessRuleFirewallPolicy,
        __deviceAccessRuleUnifiedFirewallPolicy.name() : __deviceAccessRuleUnifiedFirewallPolicy,
        __firewallACLSettingsPolicy.name() : __firewallACLSettingsPolicy,
        __deviceStaticRoutingRouterPolicy.name() : __deviceStaticRoutingRouterPolicy,
        __deviceStaticRoutingFirewallPolicy.name() : __deviceStaticRoutingFirewallPolicy,
        __deviceBgpRouterPolicy.name() : __deviceBgpRouterPolicy,
        __interfaceNATRouterPolicy.name() : __interfaceNATRouterPolicy,
        __interfaceNATStaticRulesRouterPolicy.name() : __interfaceNATStaticRulesRouterPolicy,
        __interfaceNATDynamicRulesRouterPolicy.name() : __interfaceNATDynamicRulesRouterPolicy,
        __deviceNATTimeoutsRouterPolicy.name() : __deviceNATTimeoutsRouterPolicy,
        __interfaceNATAddressPoolFirewallPolicy.name() : __interfaceNATAddressPoolFirewallPolicy,
        __deviceNATTransOptionsFirewallPolicy.name() : __deviceNATTransOptionsFirewallPolicy,
        __interfaceNATTransExemptionsFirewallPolicy.name() : __interfaceNATTransExemptionsFirewallPolicy,
        __interfaceNATDynamicRulesFirewallPolicy.name() : __interfaceNATDynamicRulesFirewallPolicy,
        __interfaceNATPolicyDynamicRulesFirewallPolicy.name() : __interfaceNATPolicyDynamicRulesFirewallPolicy,
        __interfaceNATStaticRulesFirewallPolicy.name() : __interfaceNATStaticRulesFirewallPolicy,
        __interfaceNATManualFirewallPolicy.name() : __interfaceNATManualFirewallPolicy,
        __interfaceNATObjectFirewallPolicy.name() : __interfaceNATObjectFirewallPolicy,
        __interfaceNAT64ManualFirewallPolicy.name() : __interfaceNAT64ManualFirewallPolicy,
        __interfaceNAT64ObjectFirewallPolicy.name() : __interfaceNAT64ObjectFirewallPolicy
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_38 = CTD_ANON_38


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2070, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element networkPolicyObject uses Python identifier networkPolicyObject
    __networkPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'networkPolicyObject'), 'networkPolicyObject', '__csm_CTD_ANON_39_networkPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2073, 32), )

    
    networkPolicyObject = property(__networkPolicyObject.value, __networkPolicyObject.set, None, None)

    
    # Element portListPolicyObject uses Python identifier portListPolicyObject
    __portListPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'portListPolicyObject'), 'portListPolicyObject', '__csm_CTD_ANON_39_portListPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2074, 32), )

    
    portListPolicyObject = property(__portListPolicyObject.value, __portListPolicyObject.set, None, None)

    
    # Element servicePolicyObject uses Python identifier servicePolicyObject
    __servicePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'servicePolicyObject'), 'servicePolicyObject', '__csm_CTD_ANON_39_servicePolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2075, 32), )

    
    servicePolicyObject = property(__servicePolicyObject.value, __servicePolicyObject.set, None, None)

    
    # Element interfaceRolePolicyObject uses Python identifier interfaceRolePolicyObject
    __interfaceRolePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceRolePolicyObject'), 'interfaceRolePolicyObject', '__csm_CTD_ANON_39_interfaceRolePolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2076, 32), )

    
    interfaceRolePolicyObject = property(__interfaceRolePolicyObject.value, __interfaceRolePolicyObject.set, None, None)

    
    # Element timeRangePolicyObject uses Python identifier timeRangePolicyObject
    __timeRangePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'timeRangePolicyObject'), 'timeRangePolicyObject', '__csm_CTD_ANON_39_timeRangePolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2077, 32), )

    
    timeRangePolicyObject = property(__timeRangePolicyObject.value, __timeRangePolicyObject.set, None, None)

    
    # Element slaMonitorPolicyObject uses Python identifier slaMonitorPolicyObject
    __slaMonitorPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'slaMonitorPolicyObject'), 'slaMonitorPolicyObject', '__csm_CTD_ANON_39_slaMonitorPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2078, 32), )

    
    slaMonitorPolicyObject = property(__slaMonitorPolicyObject.value, __slaMonitorPolicyObject.set, None, None)

    
    # Element aclPolicyObject uses Python identifier aclPolicyObject
    __aclPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'aclPolicyObject'), 'aclPolicyObject', '__csm_CTD_ANON_39_aclPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2079, 32), )

    
    aclPolicyObject = property(__aclPolicyObject.value, __aclPolicyObject.set, None, None)

    
    # Element stdAcePolicyObject uses Python identifier stdAcePolicyObject
    __stdAcePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'stdAcePolicyObject'), 'stdAcePolicyObject', '__csm_CTD_ANON_39_stdAcePolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2080, 32), )

    
    stdAcePolicyObject = property(__stdAcePolicyObject.value, __stdAcePolicyObject.set, None, None)

    
    # Element extendedACEPolicyObject uses Python identifier extendedACEPolicyObject
    __extendedACEPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'extendedACEPolicyObject'), 'extendedACEPolicyObject', '__csm_CTD_ANON_39_extendedACEPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2081, 32), )

    
    extendedACEPolicyObject = property(__extendedACEPolicyObject.value, __extendedACEPolicyObject.set, None, None)

    
    # Element identityUserGroupPolicyObject uses Python identifier identityUserGroupPolicyObject
    __identityUserGroupPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'identityUserGroupPolicyObject'), 'identityUserGroupPolicyObject', '__csm_CTD_ANON_39_identityUserGroupPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2082, 32), )

    
    identityUserGroupPolicyObject = property(__identityUserGroupPolicyObject.value, __identityUserGroupPolicyObject.set, None, None)

    
    # Element securityGroupPolicyObject uses Python identifier securityGroupPolicyObject
    __securityGroupPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'securityGroupPolicyObject'), 'securityGroupPolicyObject', '__csm_CTD_ANON_39_securityGroupPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2083, 32), )

    
    securityGroupPolicyObject = property(__securityGroupPolicyObject.value, __securityGroupPolicyObject.set, None, None)

    _ElementMap.update({
        __networkPolicyObject.name() : __networkPolicyObject,
        __portListPolicyObject.name() : __portListPolicyObject,
        __servicePolicyObject.name() : __servicePolicyObject,
        __interfaceRolePolicyObject.name() : __interfaceRolePolicyObject,
        __timeRangePolicyObject.name() : __timeRangePolicyObject,
        __slaMonitorPolicyObject.name() : __slaMonitorPolicyObject,
        __aclPolicyObject.name() : __aclPolicyObject,
        __stdAcePolicyObject.name() : __stdAcePolicyObject,
        __extendedACEPolicyObject.name() : __extendedACEPolicyObject,
        __identityUserGroupPolicyObject.name() : __identityUserGroupPolicyObject,
        __securityGroupPolicyObject.name() : __securityGroupPolicyObject
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_39 = CTD_ANON_39


# Complex type {csm}DeployDeviceAttrs with content type ELEMENT_ONLY
class DeployDeviceAttrs (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}DeployDeviceAttrs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeployDeviceAttrs')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2118, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DeployOptions uses Python identifier DeployOptions
    __DeployOptions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DeployOptions'), 'DeployOptions', '__csm_DeployDeviceAttrs_DeployOptions', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2120, 2), )

    
    DeployOptions = property(__DeployOptions.value, __DeployOptions.set, None, None)

    
    # Element filePath uses Python identifier filePath
    __filePath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'filePath'), 'filePath', '__csm_DeployDeviceAttrs_filePath', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2129, 2), )

    
    filePath = property(__filePath.value, __filePath.set, None, None)

    
    # Element OOBdetectionbehavior uses Python identifier OOBdetectionbehavior
    __OOBdetectionbehavior = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OOBdetectionbehavior'), 'OOBdetectionbehavior', '__csm_DeployDeviceAttrs_OOBdetectionbehavior', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2131, 6), )

    
    OOBdetectionbehavior = property(__OOBdetectionbehavior.value, __OOBdetectionbehavior.set, None, None)

    _ElementMap.update({
        __DeployOptions.name() : __DeployOptions,
        __filePath.name() : __filePath,
        __OOBdetectionbehavior.name() : __OOBdetectionbehavior
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeployDeviceAttrs = DeployDeviceAttrs
Namespace.addCategoryObject('typeBinding', 'DeployDeviceAttrs', DeployDeviceAttrs)


# Complex type {csm}ValidationResults with content type ELEMENT_ONLY
class ValidationResults (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}ValidationResults with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValidationResults')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2175, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element validationResult uses Python identifier validationResult
    __validationResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'validationResult'), 'validationResult', '__csm_ValidationResults_validationResult', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2177, 4), )

    
    validationResult = property(__validationResult.value, __validationResult.set, None, None)

    _ElementMap.update({
        __validationResult.name() : __validationResult
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ValidationResults = ValidationResults
Namespace.addCategoryObject('typeBinding', 'ValidationResults', ValidationResults)


# Complex type {csm}ValidationResult with content type ELEMENT_ONLY
class ValidationResult (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}ValidationResult with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValidationResult')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2180, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element deviceGID uses Python identifier deviceGID
    __deviceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGID'), 'deviceGID', '__csm_ValidationResult_deviceGID', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2182, 6), )

    
    deviceGID = property(__deviceGID.value, __deviceGID.set, None, None)

    
    # Element validationDetails uses Python identifier validationDetails
    __validationDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'validationDetails'), 'validationDetails', '__csm_ValidationResult_validationDetails', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2183, 6), )

    
    validationDetails = property(__validationDetails.value, __validationDetails.set, None, None)

    _ElementMap.update({
        __deviceGID.name() : __deviceGID,
        __validationDetails.name() : __validationDetails
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ValidationResult = ValidationResult
Namespace.addCategoryObject('typeBinding', 'ValidationResult', ValidationResult)


# Complex type {csm}ValidationDetails with content type ELEMENT_ONLY
class ValidationDetails (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}ValidationDetails with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValidationDetails')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2186, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'title'), 'title', '__csm_ValidationDetails_title', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2188, 3), )

    
    title = property(__title.value, __title.set, None, None)

    
    # Element severity uses Python identifier severity
    __severity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'severity'), 'severity', '__csm_ValidationDetails_severity', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2190, 3), )

    
    severity = property(__severity.value, __severity.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__csm_ValidationDetails_description', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2199, 3), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element cause uses Python identifier cause
    __cause = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cause'), 'cause', '__csm_ValidationDetails_cause', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2201, 3), )

    
    cause = property(__cause.value, __cause.set, None, None)

    
    # Element action uses Python identifier action
    __action = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'action'), 'action', '__csm_ValidationDetails_action', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2203, 3), )

    
    action = property(__action.value, __action.set, None, None)

    _ElementMap.update({
        __title.name() : __title,
        __severity.name() : __severity,
        __description.name() : __description,
        __cause.name() : __cause,
        __action.name() : __action
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ValidationDetails = ValidationDetails
Namespace.addCategoryObject('typeBinding', 'ValidationDetails', ValidationDetails)


# Complex type {csm}DeploymentDeviceMsgDetails with content type ELEMENT_ONLY
class DeploymentDeviceMsgDetails (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}DeploymentDeviceMsgDetails with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeploymentDeviceMsgDetails')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2207, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__csm_DeploymentDeviceMsgDetails_Title', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2209, 3), )

    
    Title = property(__Title.value, __Title.set, None, None)

    
    # Element severityval uses Python identifier severityval
    __severityval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'severityval'), 'severityval', '__csm_DeploymentDeviceMsgDetails_severityval', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2211, 3), )

    
    severityval = property(__severityval.value, __severityval.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__csm_DeploymentDeviceMsgDetails_description', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2220, 3), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element action uses Python identifier action
    __action = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'action'), 'action', '__csm_DeploymentDeviceMsgDetails_action', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2222, 3), )

    
    action = property(__action.value, __action.set, None, None)

    _ElementMap.update({
        __Title.name() : __Title,
        __severityval.name() : __severityval,
        __description.name() : __description,
        __action.name() : __action
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeploymentDeviceMsgDetails = DeploymentDeviceMsgDetails
Namespace.addCategoryObject('typeBinding', 'DeploymentDeviceMsgDetails', DeploymentDeviceMsgDetails)


# Complex type {csm}DeploymentStatusDetails with content type ELEMENT_ONLY
class DeploymentStatusDetails (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}DeploymentStatusDetails with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeploymentStatusDetails')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2226, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element deviceGID uses Python identifier deviceGID
    __deviceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGID'), 'deviceGID', '__csm_DeploymentStatusDetails_deviceGID', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2228, 6), )

    
    deviceGID = property(__deviceGID.value, __deviceGID.set, None, None)

    
    # Element deploymentMsgdetails uses Python identifier deploymentMsgdetails
    __deploymentMsgdetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deploymentMsgdetails'), 'deploymentMsgdetails', '__csm_DeploymentStatusDetails_deploymentMsgdetails', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2229, 6), )

    
    deploymentMsgdetails = property(__deploymentMsgdetails.value, __deploymentMsgdetails.set, None, None)

    _ElementMap.update({
        __deviceGID.name() : __deviceGID,
        __deploymentMsgdetails.name() : __deploymentMsgdetails
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeploymentStatusDetails = DeploymentStatusDetails
Namespace.addCategoryObject('typeBinding', 'DeploymentStatusDetails', DeploymentStatusDetails)


# Complex type {csm}DeploymentStatus with content type ELEMENT_ONLY
class DeploymentStatus (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}DeploymentStatus with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeploymentStatus')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2232, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element deploymentstatus uses Python identifier deploymentstatus
    __deploymentstatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deploymentstatus'), 'deploymentstatus', '__csm_DeploymentStatus_deploymentstatus', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2234, 4), )

    
    deploymentstatus = property(__deploymentstatus.value, __deploymentstatus.set, None, None)

    _ElementMap.update({
        __deploymentstatus.name() : __deploymentstatus
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeploymentStatus = DeploymentStatus
Namespace.addCategoryObject('typeBinding', 'DeploymentStatus', DeploymentStatus)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_40 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2359, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element objectGID uses Python identifier objectGID
    __objectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'objectGID'), 'objectGID', '__csm_CTD_ANON_40_objectGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2361, 8), )

    
    objectGID = property(__objectGID.value, __objectGID.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__csm_CTD_ANON_40_name', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2362, 8), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__csm_CTD_ANON_40_type', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2363, 8), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element info uses Python identifier info
    __info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'info'), 'info', '__csm_CTD_ANON_40_info', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2364, 8), )

    
    info = property(__info.value, __info.set, None, None)

    _ElementMap.update({
        __objectGID.name() : __objectGID,
        __name.name() : __name,
        __type.name() : __type,
        __info.name() : __info
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_40 = CTD_ANON_40


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_41 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2439, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element networkPolicyObject uses Python identifier networkPolicyObject
    __networkPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'networkPolicyObject'), 'networkPolicyObject', '__csm_CTD_ANON_41_networkPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2442, 8), )

    
    networkPolicyObject = property(__networkPolicyObject.value, __networkPolicyObject.set, None, None)

    
    # Element portListPolicyObject uses Python identifier portListPolicyObject
    __portListPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'portListPolicyObject'), 'portListPolicyObject', '__csm_CTD_ANON_41_portListPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2444, 8), )

    
    portListPolicyObject = property(__portListPolicyObject.value, __portListPolicyObject.set, None, None)

    
    # Element servicePolicyObject uses Python identifier servicePolicyObject
    __servicePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'servicePolicyObject'), 'servicePolicyObject', '__csm_CTD_ANON_41_servicePolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2446, 8), )

    
    servicePolicyObject = property(__servicePolicyObject.value, __servicePolicyObject.set, None, None)

    
    # Element interfaceRolePolicyObject uses Python identifier interfaceRolePolicyObject
    __interfaceRolePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceRolePolicyObject'), 'interfaceRolePolicyObject', '__csm_CTD_ANON_41_interfaceRolePolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2448, 8), )

    
    interfaceRolePolicyObject = property(__interfaceRolePolicyObject.value, __interfaceRolePolicyObject.set, None, None)

    
    # Element timeRangePolicyObject uses Python identifier timeRangePolicyObject
    __timeRangePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'timeRangePolicyObject'), 'timeRangePolicyObject', '__csm_CTD_ANON_41_timeRangePolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2450, 8), )

    
    timeRangePolicyObject = property(__timeRangePolicyObject.value, __timeRangePolicyObject.set, None, None)

    
    # Element slaMonitorPolicyObject uses Python identifier slaMonitorPolicyObject
    __slaMonitorPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'slaMonitorPolicyObject'), 'slaMonitorPolicyObject', '__csm_CTD_ANON_41_slaMonitorPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2452, 8), )

    
    slaMonitorPolicyObject = property(__slaMonitorPolicyObject.value, __slaMonitorPolicyObject.set, None, None)

    
    # Element aclPolicyObject uses Python identifier aclPolicyObject
    __aclPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'aclPolicyObject'), 'aclPolicyObject', '__csm_CTD_ANON_41_aclPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2454, 8), )

    
    aclPolicyObject = property(__aclPolicyObject.value, __aclPolicyObject.set, None, None)

    
    # Element stdAcePolicyObject uses Python identifier stdAcePolicyObject
    __stdAcePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'stdAcePolicyObject'), 'stdAcePolicyObject', '__csm_CTD_ANON_41_stdAcePolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2456, 8), )

    
    stdAcePolicyObject = property(__stdAcePolicyObject.value, __stdAcePolicyObject.set, None, None)

    
    # Element extendedACEPolicyObject uses Python identifier extendedACEPolicyObject
    __extendedACEPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'extendedACEPolicyObject'), 'extendedACEPolicyObject', '__csm_CTD_ANON_41_extendedACEPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2458, 8), )

    
    extendedACEPolicyObject = property(__extendedACEPolicyObject.value, __extendedACEPolicyObject.set, None, None)

    
    # Element identityUserGroupPolicyObject uses Python identifier identityUserGroupPolicyObject
    __identityUserGroupPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'identityUserGroupPolicyObject'), 'identityUserGroupPolicyObject', '__csm_CTD_ANON_41_identityUserGroupPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2460, 8), )

    
    identityUserGroupPolicyObject = property(__identityUserGroupPolicyObject.value, __identityUserGroupPolicyObject.set, None, None)

    
    # Element securityGroupPolicyObject uses Python identifier securityGroupPolicyObject
    __securityGroupPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'securityGroupPolicyObject'), 'securityGroupPolicyObject', '__csm_CTD_ANON_41_securityGroupPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2462, 8), )

    
    securityGroupPolicyObject = property(__securityGroupPolicyObject.value, __securityGroupPolicyObject.set, None, None)

    _ElementMap.update({
        __networkPolicyObject.name() : __networkPolicyObject,
        __portListPolicyObject.name() : __portListPolicyObject,
        __servicePolicyObject.name() : __servicePolicyObject,
        __interfaceRolePolicyObject.name() : __interfaceRolePolicyObject,
        __timeRangePolicyObject.name() : __timeRangePolicyObject,
        __slaMonitorPolicyObject.name() : __slaMonitorPolicyObject,
        __aclPolicyObject.name() : __aclPolicyObject,
        __stdAcePolicyObject.name() : __stdAcePolicyObject,
        __extendedACEPolicyObject.name() : __extendedACEPolicyObject,
        __identityUserGroupPolicyObject.name() : __identityUserGroupPolicyObject,
        __securityGroupPolicyObject.name() : __securityGroupPolicyObject
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_41 = CTD_ANON_41


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_42 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2469, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element objectGID uses Python identifier objectGID
    __objectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'objectGID'), 'objectGID', '__csm_CTD_ANON_42_objectGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2471, 11), )

    
    objectGID = property(__objectGID.value, __objectGID.set, None, None)

    
    # Element parentGID uses Python identifier parentGID
    __parentGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parentGID'), 'parentGID', '__csm_CTD_ANON_42_parentGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2472, 11), )

    
    parentGID = property(__parentGID.value, __parentGID.set, None, None)

    
    # Element deviceGID uses Python identifier deviceGID
    __deviceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGID'), 'deviceGID', '__csm_CTD_ANON_42_deviceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2473, 8), )

    
    deviceGID = property(__deviceGID.value, __deviceGID.set, None, None)

    _ElementMap.update({
        __objectGID.name() : __objectGID,
        __parentGID.name() : __parentGID,
        __deviceGID.name() : __deviceGID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_42 = CTD_ANON_42


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_43 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2668, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element networkPolicyObject uses Python identifier networkPolicyObject
    __networkPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'networkPolicyObject'), 'networkPolicyObject', '__csm_CTD_ANON_43_networkPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2671, 8), )

    
    networkPolicyObject = property(__networkPolicyObject.value, __networkPolicyObject.set, None, None)

    
    # Element portListPolicyObject uses Python identifier portListPolicyObject
    __portListPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'portListPolicyObject'), 'portListPolicyObject', '__csm_CTD_ANON_43_portListPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2673, 8), )

    
    portListPolicyObject = property(__portListPolicyObject.value, __portListPolicyObject.set, None, None)

    
    # Element servicePolicyObject uses Python identifier servicePolicyObject
    __servicePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'servicePolicyObject'), 'servicePolicyObject', '__csm_CTD_ANON_43_servicePolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2675, 8), )

    
    servicePolicyObject = property(__servicePolicyObject.value, __servicePolicyObject.set, None, None)

    
    # Element interfaceRolePolicyObject uses Python identifier interfaceRolePolicyObject
    __interfaceRolePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceRolePolicyObject'), 'interfaceRolePolicyObject', '__csm_CTD_ANON_43_interfaceRolePolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2677, 8), )

    
    interfaceRolePolicyObject = property(__interfaceRolePolicyObject.value, __interfaceRolePolicyObject.set, None, None)

    
    # Element timeRangePolicyObject uses Python identifier timeRangePolicyObject
    __timeRangePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'timeRangePolicyObject'), 'timeRangePolicyObject', '__csm_CTD_ANON_43_timeRangePolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2679, 8), )

    
    timeRangePolicyObject = property(__timeRangePolicyObject.value, __timeRangePolicyObject.set, None, None)

    
    # Element slaMonitorPolicyObject uses Python identifier slaMonitorPolicyObject
    __slaMonitorPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'slaMonitorPolicyObject'), 'slaMonitorPolicyObject', '__csm_CTD_ANON_43_slaMonitorPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2681, 8), )

    
    slaMonitorPolicyObject = property(__slaMonitorPolicyObject.value, __slaMonitorPolicyObject.set, None, None)

    
    # Element aclPolicyObject uses Python identifier aclPolicyObject
    __aclPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'aclPolicyObject'), 'aclPolicyObject', '__csm_CTD_ANON_43_aclPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2683, 8), )

    
    aclPolicyObject = property(__aclPolicyObject.value, __aclPolicyObject.set, None, None)

    
    # Element stdAcePolicyObject uses Python identifier stdAcePolicyObject
    __stdAcePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'stdAcePolicyObject'), 'stdAcePolicyObject', '__csm_CTD_ANON_43_stdAcePolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2685, 8), )

    
    stdAcePolicyObject = property(__stdAcePolicyObject.value, __stdAcePolicyObject.set, None, None)

    
    # Element extendedACEPolicyObject uses Python identifier extendedACEPolicyObject
    __extendedACEPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'extendedACEPolicyObject'), 'extendedACEPolicyObject', '__csm_CTD_ANON_43_extendedACEPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2687, 8), )

    
    extendedACEPolicyObject = property(__extendedACEPolicyObject.value, __extendedACEPolicyObject.set, None, None)

    
    # Element identityUserGroupPolicyObject uses Python identifier identityUserGroupPolicyObject
    __identityUserGroupPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'identityUserGroupPolicyObject'), 'identityUserGroupPolicyObject', '__csm_CTD_ANON_43_identityUserGroupPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2689, 8), )

    
    identityUserGroupPolicyObject = property(__identityUserGroupPolicyObject.value, __identityUserGroupPolicyObject.set, None, None)

    
    # Element securityGroupPolicyObject uses Python identifier securityGroupPolicyObject
    __securityGroupPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'securityGroupPolicyObject'), 'securityGroupPolicyObject', '__csm_CTD_ANON_43_securityGroupPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2691, 8), )

    
    securityGroupPolicyObject = property(__securityGroupPolicyObject.value, __securityGroupPolicyObject.set, None, None)

    _ElementMap.update({
        __networkPolicyObject.name() : __networkPolicyObject,
        __portListPolicyObject.name() : __portListPolicyObject,
        __servicePolicyObject.name() : __servicePolicyObject,
        __interfaceRolePolicyObject.name() : __interfaceRolePolicyObject,
        __timeRangePolicyObject.name() : __timeRangePolicyObject,
        __slaMonitorPolicyObject.name() : __slaMonitorPolicyObject,
        __aclPolicyObject.name() : __aclPolicyObject,
        __stdAcePolicyObject.name() : __stdAcePolicyObject,
        __extendedACEPolicyObject.name() : __extendedACEPolicyObject,
        __identityUserGroupPolicyObject.name() : __identityUserGroupPolicyObject,
        __securityGroupPolicyObject.name() : __securityGroupPolicyObject
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_43 = CTD_ANON_43


# Complex type {csm}Event with content type ELEMENT_ONLY
class Event (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}Event with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Event')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 22, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element configChange uses Python identifier configChange
    __configChange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'configChange'), 'configChange', '__csm_Event_configChange', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 24, 3), )

    
    configChange = property(__configChange.value, __configChange.set, None, None)

    _ElementMap.update({
        __configChange.name() : __configChange
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Event = Event
Namespace.addCategoryObject('typeBinding', 'Event', Event)


# Complex type {csm}BaseEventDetails with content type ELEMENT_ONLY
class BaseEventDetails (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}BaseEventDetails with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BaseEventDetails')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 46, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subscriptionId'), 'subscriptionId', '__csm_BaseEventDetails_subscriptionId', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 48, 3), )

    
    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    
    # Element eventType uses Python identifier eventType
    __eventType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'eventType'), 'eventType', '__csm_BaseEventDetails_eventType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 49, 3), )

    
    eventType = property(__eventType.value, __eventType.set, None, None)

    
    # Element eventCategory uses Python identifier eventCategory
    __eventCategory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'eventCategory'), 'eventCategory', '__csm_BaseEventDetails_eventCategory', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 50, 3), )

    
    eventCategory = property(__eventCategory.value, __eventCategory.set, None, None)

    
    # Element time uses Python identifier time
    __time = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'time'), 'time', '__csm_BaseEventDetails_time', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 51, 3), )

    
    time = property(__time.value, __time.set, None, None)

    
    # Element content uses Python identifier content_
    __content = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'content'), 'content_', '__csm_BaseEventDetails_content', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 52, 3), )

    
    content_ = property(__content.value, __content.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId,
        __eventType.name() : __eventType,
        __eventCategory.name() : __eventCategory,
        __time.name() : __time,
        __content.name() : __content
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BaseEventDetails = BaseEventDetails
Namespace.addCategoryObject('typeBinding', 'BaseEventDetails', BaseEventDetails)


# Complex type {csm}EventFilterItem with content type ELEMENT_ONLY
class EventFilterItem (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}EventFilterItem with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EventFilterItem')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 89, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element filterEventType uses Python identifier filterEventType
    __filterEventType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'filterEventType'), 'filterEventType', '__csm_EventFilterItem_filterEventType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 91, 3), )

    
    filterEventType = property(__filterEventType.value, __filterEventType.set, None, None)

    
    # Element filterEventFormat uses Python identifier filterEventFormat
    __filterEventFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'filterEventFormat'), 'filterEventFormat', '__csm_EventFilterItem_filterEventFormat', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 92, 3), )

    
    filterEventFormat = property(__filterEventFormat.value, __filterEventFormat.set, None, None)

    
    # Element filterEventCategory uses Python identifier filterEventCategory
    __filterEventCategory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'filterEventCategory'), 'filterEventCategory', '__csm_EventFilterItem_filterEventCategory', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 93, 3), )

    
    filterEventCategory = property(__filterEventCategory.value, __filterEventCategory.set, None, None)

    _ElementMap.update({
        __filterEventType.name() : __filterEventType,
        __filterEventFormat.name() : __filterEventFormat,
        __filterEventCategory.name() : __filterEventCategory
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.EventFilterItem = EventFilterItem
Namespace.addCategoryObject('typeBinding', 'EventFilterItem', EventFilterItem)


# Complex type {csm}SyslogServer with content type ELEMENT_ONLY
class SyslogServer (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}SyslogServer with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SyslogServer')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 96, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element port uses Python identifier port
    __port = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'port'), 'port', '__csm_SyslogServer_port', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 98, 3), )

    
    port = property(__port.value, __port.set, None, None)

    
    # Element destAddress uses Python identifier destAddress
    __destAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'destAddress'), 'destAddress', '__csm_SyslogServer_destAddress', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 99, 3), )

    
    destAddress = property(__destAddress.value, __destAddress.set, None, None)

    _ElementMap.update({
        __port.name() : __port,
        __destAddress.name() : __destAddress
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SyslogServer = SyslogServer
Namespace.addCategoryObject('typeBinding', 'SyslogServer', SyslogServer)


# Complex type {csm}DeviceReadOnlyCLICmd with content type ELEMENT_ONLY
class DeviceReadOnlyCLICmd (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}DeviceReadOnlyCLICmd with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceReadOnlyCLICmd')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 12, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element deviceIP uses Python identifier deviceIP
    __deviceIP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceIP'), 'deviceIP', '__csm_DeviceReadOnlyCLICmd_deviceIP', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 15, 4), )

    
    deviceIP = property(__deviceIP.value, __deviceIP.set, None, None)

    
    # Element deviceName uses Python identifier deviceName
    __deviceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceName'), 'deviceName', '__csm_DeviceReadOnlyCLICmd_deviceName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 16, 4), )

    
    deviceName = property(__deviceName.value, __deviceName.set, None, None)

    
    # Element deviceGID uses Python identifier deviceGID
    __deviceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGID'), 'deviceGID', '__csm_DeviceReadOnlyCLICmd_deviceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 17, 4), )

    
    deviceGID = property(__deviceGID.value, __deviceGID.set, None, None)

    
    # Element cmd uses Python identifier cmd
    __cmd = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cmd'), 'cmd', '__csm_DeviceReadOnlyCLICmd_cmd', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 19, 3), )

    
    cmd = property(__cmd.value, __cmd.set, None, None)

    
    # Element argument uses Python identifier argument
    __argument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'argument'), 'argument', '__csm_DeviceReadOnlyCLICmd_argument', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 26, 12), )

    
    argument = property(__argument.value, __argument.set, None, None)

    
    # Element execTimeout uses Python identifier execTimeout
    __execTimeout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'execTimeout'), 'execTimeout', '__csm_DeviceReadOnlyCLICmd_execTimeout', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 27, 12), )

    
    execTimeout = property(__execTimeout.value, __execTimeout.set, None, None)

    _ElementMap.update({
        __deviceIP.name() : __deviceIP,
        __deviceName.name() : __deviceName,
        __deviceGID.name() : __deviceGID,
        __cmd.name() : __cmd,
        __argument.name() : __argument,
        __execTimeout.name() : __execTimeout
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceReadOnlyCLICmd = DeviceReadOnlyCLICmd
Namespace.addCategoryObject('typeBinding', 'DeviceReadOnlyCLICmd', DeviceReadOnlyCLICmd)


# Complex type {csm}DeviceCmdResult with content type ELEMENT_ONLY
class DeviceCmdResult (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {csm}DeviceCmdResult with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceCmdResult')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 36, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element deviceIP uses Python identifier deviceIP
    __deviceIP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceIP'), 'deviceIP', '__csm_DeviceCmdResult_deviceIP', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 38, 3), )

    
    deviceIP = property(__deviceIP.value, __deviceIP.set, None, None)

    
    # Element deviceGID uses Python identifier deviceGID
    __deviceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGID'), 'deviceGID', '__csm_DeviceCmdResult_deviceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 39, 3), )

    
    deviceGID = property(__deviceGID.value, __deviceGID.set, None, None)

    
    # Element deviceName uses Python identifier deviceName
    __deviceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceName'), 'deviceName', '__csm_DeviceCmdResult_deviceName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 40, 3), )

    
    deviceName = property(__deviceName.value, __deviceName.set, None, None)

    
    # Element result uses Python identifier result
    __result = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'result'), 'result', '__csm_DeviceCmdResult_result', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 41, 3), )

    
    result = property(__result.value, __result.set, None, None)

    
    # Element resultContent uses Python identifier resultContent
    __resultContent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'resultContent'), 'resultContent', '__csm_DeviceCmdResult_resultContent', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 42, 3), )

    
    resultContent = property(__resultContent.value, __resultContent.set, None, None)

    _ElementMap.update({
        __deviceIP.name() : __deviceIP,
        __deviceGID.name() : __deviceGID,
        __deviceName.name() : __deviceName,
        __result.name() : __result,
        __resultContent.name() : __resultContent
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceCmdResult = DeviceCmdResult
Namespace.addCategoryObject('typeBinding', 'DeviceCmdResult', DeviceCmdResult)


# Complex type {csm}Device with content type ELEMENT_ONLY
class Device (BaseObject):
    """Complex type {csm}Device with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Device')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 53, 1)
    _ElementMap = BaseObject._ElementMap.copy()
    _AttributeMap = BaseObject._AttributeMap.copy()
    # Base type is BaseObject
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element osType uses Python identifier osType
    __osType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'osType'), 'osType', '__csm_Device_osType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 57, 5), )

    
    osType = property(__osType.value, __osType.set, None, None)

    
    # Element osVersion uses Python identifier osVersion
    __osVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'osVersion'), 'osVersion', '__csm_Device_osVersion', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 58, 5), )

    
    osVersion = property(__osVersion.value, __osVersion.set, None, None)

    
    # Element imageName uses Python identifier imageName
    __imageName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'imageName'), 'imageName', '__csm_Device_imageName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 59, 5), )

    
    imageName = property(__imageName.value, __imageName.set, None, None)

    
    # Element sysObjectID uses Python identifier sysObjectID
    __sysObjectID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sysObjectID'), 'sysObjectID', '__csm_Device_sysObjectID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 60, 20), )

    
    sysObjectID = property(__sysObjectID.value, __sysObjectID.set, None, None)

    
    # Element fullConfig uses Python identifier fullConfig
    __fullConfig = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fullConfig'), 'fullConfig', '__csm_Device_fullConfig', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 61, 5), )

    
    fullConfig = property(__fullConfig.value, __fullConfig.set, None, None)

    
    # Element mgmtInterface uses Python identifier mgmtInterface
    __mgmtInterface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'mgmtInterface'), 'mgmtInterface', '__csm_Device_mgmtInterface', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 62, 5), )

    
    mgmtInterface = property(__mgmtInterface.value, __mgmtInterface.set, None, None)

    
    # Element interfaceList uses Python identifier interfaceList
    __interfaceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceList'), 'interfaceList', '__csm_Device_interfaceList', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 63, 5), )

    
    interfaceList = property(__interfaceList.value, __interfaceList.set, None, None)

    
    # Element virtualContextList uses Python identifier virtualContextList
    __virtualContextList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'virtualContextList'), 'virtualContextList', '__csm_Device_virtualContextList', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 64, 5), )

    
    virtualContextList = property(__virtualContextList.value, __virtualContextList.set, None, None)

    
    # Element configState uses Python identifier configState
    __configState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'configState'), 'configState', '__csm_Device_configState', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 65, 5), )

    
    configState = property(__configState.value, __configState.set, None, None)

    _ElementMap.update({
        __osType.name() : __osType,
        __osVersion.name() : __osVersion,
        __imageName.name() : __imageName,
        __sysObjectID.name() : __sysObjectID,
        __fullConfig.name() : __fullConfig,
        __mgmtInterface.name() : __mgmtInterface,
        __interfaceList.name() : __interfaceList,
        __virtualContextList.name() : __virtualContextList,
        __configState.name() : __configState
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Device = Device
Namespace.addCategoryObject('typeBinding', 'Device', Device)


# Complex type {csm}DeviceGroup with content type ELEMENT_ONLY
class DeviceGroup (BaseObject):
    """Complex type {csm}DeviceGroup with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceGroup')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 154, 1)
    _ElementMap = BaseObject._ElementMap.copy()
    _AttributeMap = BaseObject._AttributeMap.copy()
    # Base type is BaseObject
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element path uses Python identifier path
    __path = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'path'), 'path', '__csm_DeviceGroup_path', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 158, 6), )

    
    path = property(__path.value, __path.set, None, None)

    
    # Element device uses Python identifier device
    __device = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'device'), 'device', '__csm_DeviceGroup_device', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 159, 5), )

    
    device = property(__device.value, __device.set, None, None)

    
    # Element deviceGroup uses Python identifier deviceGroup
    __deviceGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGroup'), 'deviceGroup', '__csm_DeviceGroup_deviceGroup', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 160, 5), )

    
    deviceGroup = property(__deviceGroup.value, __deviceGroup.set, None, None)

    _ElementMap.update({
        __path.name() : __path,
        __device.name() : __device,
        __deviceGroup.name() : __deviceGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceGroup = DeviceGroup
Namespace.addCategoryObject('typeBinding', 'DeviceGroup', DeviceGroup)


# Complex type {csm}LoginRequest with content type ELEMENT_ONLY
class LoginRequest (BaseReqResp):
    """Complex type {csm}LoginRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LoginRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 181, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element username uses Python identifier username
    __username = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'username'), 'username', '__csm_LoginRequest_username', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 185, 5), )

    
    username = property(__username.value, __username.set, None, None)

    
    # Element password uses Python identifier password
    __password = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'password'), 'password', '__csm_LoginRequest_password', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 186, 5), )

    
    password = property(__password.value, __password.set, None, None)

    
    # Element heartbeatRequested uses Python identifier heartbeatRequested
    __heartbeatRequested = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'heartbeatRequested'), 'heartbeatRequested', '__csm_LoginRequest_heartbeatRequested', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 187, 5), )

    
    heartbeatRequested = property(__heartbeatRequested.value, __heartbeatRequested.set, None, None)

    
    # Element callbackUrl uses Python identifier callbackUrl
    __callbackUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'callbackUrl'), 'callbackUrl', '__csm_LoginRequest_callbackUrl', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 188, 5), )

    
    callbackUrl = property(__callbackUrl.value, __callbackUrl.set, None, None)

    _ElementMap.update({
        __username.name() : __username,
        __password.name() : __password,
        __heartbeatRequested.name() : __heartbeatRequested,
        __callbackUrl.name() : __callbackUrl
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LoginRequest = LoginRequest
Namespace.addCategoryObject('typeBinding', 'LoginRequest', LoginRequest)


# Complex type {csm}LoginResponse with content type ELEMENT_ONLY
class LoginResponse (BaseReqResp):
    """Complex type {csm}LoginResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LoginResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 194, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element serviceVersion uses Python identifier serviceVersion
    __serviceVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serviceVersion'), 'serviceVersion', '__csm_LoginResponse_serviceVersion', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 198, 5), )

    
    serviceVersion = property(__serviceVersion.value, __serviceVersion.set, None, None)

    
    # Element sessionTimeoutInMins uses Python identifier sessionTimeoutInMins
    __sessionTimeoutInMins = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sessionTimeoutInMins'), 'sessionTimeoutInMins', '__csm_LoginResponse_sessionTimeoutInMins', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 199, 5), )

    
    sessionTimeoutInMins = property(__sessionTimeoutInMins.value, __sessionTimeoutInMins.set, None, None)

    _ElementMap.update({
        __serviceVersion.name() : __serviceVersion,
        __sessionTimeoutInMins.name() : __sessionTimeoutInMins
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LoginResponse = LoginResponse
Namespace.addCategoryObject('typeBinding', 'LoginResponse', LoginResponse)


# Complex type {csm}HeartbeatCallbackRequest with content type ELEMENT_ONLY
class HeartbeatCallbackRequest (BaseReqResp):
    """Complex type {csm}HeartbeatCallbackRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeartbeatCallbackRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 205, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.HeartbeatCallbackRequest = HeartbeatCallbackRequest
Namespace.addCategoryObject('typeBinding', 'HeartbeatCallbackRequest', HeartbeatCallbackRequest)


# Complex type {csm}LogoutRequest with content type ELEMENT_ONLY
class LogoutRequest (BaseReqResp):
    """Complex type {csm}LogoutRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LogoutRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 211, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LogoutRequest = LogoutRequest
Namespace.addCategoryObject('typeBinding', 'LogoutRequest', LogoutRequest)


# Complex type {csm}LogoutResponse with content type ELEMENT_ONLY
class LogoutResponse (BaseReqResp):
    """Complex type {csm}LogoutResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LogoutResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 217, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LogoutResponse = LogoutResponse
Namespace.addCategoryObject('typeBinding', 'LogoutResponse', LogoutResponse)


# Complex type {csm}PingRequest with content type ELEMENT_ONLY
class PingRequest (BaseReqResp):
    """Complex type {csm}PingRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PingRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 223, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PingRequest = PingRequest
Namespace.addCategoryObject('typeBinding', 'PingRequest', PingRequest)


# Complex type {csm}PingResponse with content type ELEMENT_ONLY
class PingResponse (BaseReqResp):
    """Complex type {csm}PingResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PingResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 229, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PingResponse = PingResponse
Namespace.addCategoryObject('typeBinding', 'PingResponse', PingResponse)


# Complex type {csm}GetServiceInfoRequest with content type ELEMENT_ONLY
class GetServiceInfoRequest (BaseReqResp):
    """Complex type {csm}GetServiceInfoRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GetServiceInfoRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 235, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GetServiceInfoRequest = GetServiceInfoRequest
Namespace.addCategoryObject('typeBinding', 'GetServiceInfoRequest', GetServiceInfoRequest)


# Complex type {csm}GetServiceInfoResponse with content type ELEMENT_ONLY
class GetServiceInfoResponse (BaseReqResp):
    """Complex type {csm}GetServiceInfoResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GetServiceInfoResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 241, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element serviceVersion uses Python identifier serviceVersion
    __serviceVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serviceVersion'), 'serviceVersion', '__csm_GetServiceInfoResponse_serviceVersion', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 245, 5), )

    
    serviceVersion = property(__serviceVersion.value, __serviceVersion.set, None, None)

    
    # Element serviceName uses Python identifier serviceName
    __serviceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serviceName'), 'serviceName', '__csm_GetServiceInfoResponse_serviceName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 246, 5), )

    
    serviceName = property(__serviceName.value, __serviceName.set, None, None)

    
    # Element serviceDesc uses Python identifier serviceDesc
    __serviceDesc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serviceDesc'), 'serviceDesc', '__csm_GetServiceInfoResponse_serviceDesc', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 247, 5), )

    
    serviceDesc = property(__serviceDesc.value, __serviceDesc.set, None, None)

    _ElementMap.update({
        __serviceVersion.name() : __serviceVersion,
        __serviceName.name() : __serviceName,
        __serviceDesc.name() : __serviceDesc
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GetServiceInfoResponse = GetServiceInfoResponse
Namespace.addCategoryObject('typeBinding', 'GetServiceInfoResponse', GetServiceInfoResponse)


# Complex type {csm}BasePolicy with content type ELEMENT_ONLY
class BasePolicy (BaseObject):
    """Complex type {csm}BasePolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BasePolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 5, 4)
    _ElementMap = BaseObject._ElementMap.copy()
    _AttributeMap = BaseObject._AttributeMap.copy()
    # Base type is BaseObject
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__csm_BasePolicy_type', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'orderId'), 'orderId', '__csm_BasePolicy_orderId', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element isMandatoryAggregation uses Python identifier isMandatoryAggregation
    __isMandatoryAggregation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation'), 'isMandatoryAggregation', '__csm_BasePolicy_isMandatoryAggregation', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20), )

    
    isMandatoryAggregation = property(__isMandatoryAggregation.value, __isMandatoryAggregation.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__csm_BasePolicy_description', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element eventCorrelationID uses Python identifier eventCorrelationID
    __eventCorrelationID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'eventCorrelationID'), 'eventCorrelationID', '__csm_BasePolicy_eventCorrelationID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20), )

    
    eventCorrelationID = property(__eventCorrelationID.value, __eventCorrelationID.set, None, None)

    
    # Element configState uses Python identifier configState
    __configState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'configState'), 'configState', '__csm_BasePolicy_configState', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20), )

    
    configState = property(__configState.value, __configState.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __orderId.name() : __orderId,
        __isMandatoryAggregation.name() : __isMandatoryAggregation,
        __description.name() : __description,
        __eventCorrelationID.name() : __eventCorrelationID,
        __configState.name() : __configState
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BasePolicy = BasePolicy
Namespace.addCategoryObject('typeBinding', 'BasePolicy', BasePolicy)


# Complex type {csm}BasePolicyObject with content type ELEMENT_ONLY
class BasePolicyObject (BaseObject):
    """Complex type {csm}BasePolicyObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BasePolicyObject')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 20, 4)
    _ElementMap = BaseObject._ElementMap.copy()
    _AttributeMap = BaseObject._AttributeMap.copy()
    # Base type is BaseObject
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__csm_BasePolicyObject_type', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element comment uses Python identifier comment
    __comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'comment'), 'comment', '__csm_BasePolicyObject_comment', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20), )

    
    comment = property(__comment.value, __comment.set, None, None)

    
    # Element nodeGID uses Python identifier nodeGID
    __nodeGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nodeGID'), 'nodeGID', '__csm_BasePolicyObject_nodeGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20), )

    
    nodeGID = property(__nodeGID.value, __nodeGID.set, None, None)

    
    # Element isProperty uses Python identifier isProperty
    __isProperty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isProperty'), 'isProperty', '__csm_BasePolicyObject_isProperty', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20), )

    
    isProperty = property(__isProperty.value, __isProperty.set, None, None)

    
    # Element subType uses Python identifier subType
    __subType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subType'), 'subType', '__csm_BasePolicyObject_subType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20), )

    
    subType = property(__subType.value, __subType.set, None, None)

    
    # Element isGroup uses Python identifier isGroup
    __isGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isGroup'), 'isGroup', '__csm_BasePolicyObject_isGroup', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20), )

    
    isGroup = property(__isGroup.value, __isGroup.set, None, None)

    
    # Element refGIDs uses Python identifier refGIDs
    __refGIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'refGIDs'), 'refGIDs', '__csm_BasePolicyObject_refGIDs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20), )

    
    refGIDs = property(__refGIDs.value, __refGIDs.set, None, None)

    
    # Element eventCorrelationID uses Python identifier eventCorrelationID
    __eventCorrelationID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'eventCorrelationID'), 'eventCorrelationID', '__csm_BasePolicyObject_eventCorrelationID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20), )

    
    eventCorrelationID = property(__eventCorrelationID.value, __eventCorrelationID.set, None, None)

    
    # Element configState uses Python identifier configState
    __configState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'configState'), 'configState', '__csm_BasePolicyObject_configState', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20), )

    
    configState = property(__configState.value, __configState.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __comment.name() : __comment,
        __nodeGID.name() : __nodeGID,
        __isProperty.name() : __isProperty,
        __subType.name() : __subType,
        __isGroup.name() : __isGroup,
        __refGIDs.name() : __refGIDs,
        __eventCorrelationID.name() : __eventCorrelationID,
        __configState.name() : __configState
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BasePolicyObject = BasePolicyObject
Namespace.addCategoryObject('typeBinding', 'BasePolicyObject', BasePolicyObject)


# Complex type {csm}GroupListRequest with content type ELEMENT_ONLY
class GroupListRequest (BaseReqResp):
    """Complex type {csm}GroupListRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GroupListRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1688, 4)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element includeEmptyGroups uses Python identifier includeEmptyGroups
    __includeEmptyGroups = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'includeEmptyGroups'), 'includeEmptyGroups', '__csm_GroupListRequest_includeEmptyGroups', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1692, 20), )

    
    includeEmptyGroups = property(__includeEmptyGroups.value, __includeEmptyGroups.set, None, None)

    _ElementMap.update({
        __includeEmptyGroups.name() : __includeEmptyGroups
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GroupListRequest = GroupListRequest
Namespace.addCategoryObject('typeBinding', 'GroupListRequest', GroupListRequest)


# Complex type {csm}GroupListResponse with content type ELEMENT_ONLY
class GroupListResponse (BaseReqResp):
    """Complex type {csm}GroupListResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GroupListResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1710, 4)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element deviceGroup uses Python identifier deviceGroup
    __deviceGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGroup'), 'deviceGroup', '__csm_GroupListResponse_deviceGroup', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1714, 20), )

    
    deviceGroup = property(__deviceGroup.value, __deviceGroup.set, None, None)

    _ElementMap.update({
        __deviceGroup.name() : __deviceGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GroupListResponse = GroupListResponse
Namespace.addCategoryObject('typeBinding', 'GroupListResponse', GroupListResponse)


# Complex type {csm}DeviceListByCapabilityRequest with content type ELEMENT_ONLY
class DeviceListByCapabilityRequest (BaseReqResp):
    """Complex type {csm}DeviceListByCapabilityRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceListByCapabilityRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1720, 4)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element deviceCapability uses Python identifier deviceCapability
    __deviceCapability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceCapability'), 'deviceCapability', '__csm_DeviceListByCapabilityRequest_deviceCapability', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1724, 20), )

    
    deviceCapability = property(__deviceCapability.value, __deviceCapability.set, None, None)

    _ElementMap.update({
        __deviceCapability.name() : __deviceCapability
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceListByCapabilityRequest = DeviceListByCapabilityRequest
Namespace.addCategoryObject('typeBinding', 'DeviceListByCapabilityRequest', DeviceListByCapabilityRequest)


# Complex type {csm}DeviceListResponse with content type ELEMENT_ONLY
class DeviceListResponse (BaseReqResp):
    """Complex type {csm}DeviceListResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceListResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1730, 4)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element deviceId uses Python identifier deviceId
    __deviceId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceId'), 'deviceId', '__csm_DeviceListResponse_deviceId', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1734, 20), )

    
    deviceId = property(__deviceId.value, __deviceId.set, None, None)

    _ElementMap.update({
        __deviceId.name() : __deviceId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceListResponse = DeviceListResponse
Namespace.addCategoryObject('typeBinding', 'DeviceListResponse', DeviceListResponse)


# Complex type {csm}DeviceListByGroupRequest with content type ELEMENT_ONLY
class DeviceListByGroupRequest (BaseReqResp):
    """Complex type {csm}DeviceListByGroupRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceListByGroupRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1763, 4)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element deviceGroupPath uses Python identifier deviceGroupPath
    __deviceGroupPath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGroupPath'), 'deviceGroupPath', '__csm_DeviceListByGroupRequest_deviceGroupPath', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1767, 20), )

    
    deviceGroupPath = property(__deviceGroupPath.value, __deviceGroupPath.set, None, None)

    _ElementMap.update({
        __deviceGroupPath.name() : __deviceGroupPath
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceListByGroupRequest = DeviceListByGroupRequest
Namespace.addCategoryObject('typeBinding', 'DeviceListByGroupRequest', DeviceListByGroupRequest)


# Complex type {csm}DeviceConfigByGIDRequest with content type ELEMENT_ONLY
class DeviceConfigByGIDRequest (BaseReqResp):
    """Complex type {csm}DeviceConfigByGIDRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceConfigByGIDRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1773, 4)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element gid uses Python identifier gid
    __gid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gid'), 'gid', '__csm_DeviceConfigByGIDRequest_gid', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1777, 20), )

    
    gid = property(__gid.value, __gid.set, None, None)

    _ElementMap.update({
        __gid.name() : __gid
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceConfigByGIDRequest = DeviceConfigByGIDRequest
Namespace.addCategoryObject('typeBinding', 'DeviceConfigByGIDRequest', DeviceConfigByGIDRequest)


# Complex type {csm}DeviceConfigByNameRequest with content type ELEMENT_ONLY
class DeviceConfigByNameRequest (BaseReqResp):
    """Complex type {csm}DeviceConfigByNameRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceConfigByNameRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1783, 4)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__csm_DeviceConfigByNameRequest_name', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1787, 20), )

    
    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        __name.name() : __name
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceConfigByNameRequest = DeviceConfigByNameRequest
Namespace.addCategoryObject('typeBinding', 'DeviceConfigByNameRequest', DeviceConfigByNameRequest)


# Complex type {csm}DeviceConfigResponse with content type ELEMENT_ONLY
class DeviceConfigResponse (BaseReqResp):
    """Complex type {csm}DeviceConfigResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceConfigResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1793, 4)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element device uses Python identifier device
    __device = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'device'), 'device', '__csm_DeviceConfigResponse_device', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1797, 20), )

    
    device = property(__device.value, __device.set, None, None)

    _ElementMap.update({
        __device.name() : __device
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceConfigResponse = DeviceConfigResponse
Namespace.addCategoryObject('typeBinding', 'DeviceConfigResponse', DeviceConfigResponse)


# Complex type {csm}PolicyConfigByNameRequest with content type ELEMENT_ONLY
class PolicyConfigByNameRequest (BaseReqResp):
    """Complex type {csm}PolicyConfigByNameRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolicyConfigByNameRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1803, 4)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__csm_PolicyConfigByNameRequest_name', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1807, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element policyType uses Python identifier policyType
    __policyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyType'), 'policyType', '__csm_PolicyConfigByNameRequest_policyType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1808, 20), )

    
    policyType = property(__policyType.value, __policyType.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __policyType.name() : __policyType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PolicyConfigByNameRequest = PolicyConfigByNameRequest
Namespace.addCategoryObject('typeBinding', 'PolicyConfigByNameRequest', PolicyConfigByNameRequest)


# Complex type {csm}PolicyConfigResponse with content type ELEMENT_ONLY
class PolicyConfigResponse (BaseReqResp):
    """Complex type {csm}PolicyConfigResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolicyConfigResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1814, 4)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element statusCode uses Python identifier statusCode
    __statusCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'statusCode'), 'statusCode', '__csm_PolicyConfigResponse_statusCode', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1818, 20), )

    
    statusCode = property(__statusCode.value, __statusCode.set, None, None)

    
    # Element gid uses Python identifier gid
    __gid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gid'), 'gid', '__csm_PolicyConfigResponse_gid', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1819, 20), )

    
    gid = property(__gid.value, __gid.set, None, None)

    
    # Element policy uses Python identifier policy
    __policy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policy'), 'policy', '__csm_PolicyConfigResponse_policy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1820, 20), )

    
    policy = property(__policy.value, __policy.set, None, None)

    
    # Element errorInfo uses Python identifier errorInfo
    __errorInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'errorInfo'), 'errorInfo', '__csm_PolicyConfigResponse_errorInfo', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1821, 20), )

    
    errorInfo = property(__errorInfo.value, __errorInfo.set, None, None)

    _ElementMap.update({
        __statusCode.name() : __statusCode,
        __gid.name() : __gid,
        __policy.name() : __policy,
        __errorInfo.name() : __errorInfo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PolicyConfigResponse = PolicyConfigResponse
Namespace.addCategoryObject('typeBinding', 'PolicyConfigResponse', PolicyConfigResponse)


# Complex type {csm}PolicyListByDeviceGIDRequest with content type ELEMENT_ONLY
class PolicyListByDeviceGIDRequest (BaseReqResp):
    """Complex type {csm}PolicyListByDeviceGIDRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolicyListByDeviceGIDRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1827, 4)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element gid uses Python identifier gid
    __gid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gid'), 'gid', '__csm_PolicyListByDeviceGIDRequest_gid', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1831, 20), )

    
    gid = property(__gid.value, __gid.set, None, None)

    _ElementMap.update({
        __gid.name() : __gid
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PolicyListByDeviceGIDRequest = PolicyListByDeviceGIDRequest
Namespace.addCategoryObject('typeBinding', 'PolicyListByDeviceGIDRequest', PolicyListByDeviceGIDRequest)


# Complex type {csm}PolicyListDeviceResponse with content type ELEMENT_ONLY
class PolicyListDeviceResponse (BaseReqResp):
    """Complex type {csm}PolicyListDeviceResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolicyListDeviceResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1837, 4)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element policyList uses Python identifier policyList
    __policyList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyList'), 'policyList', '__csm_PolicyListDeviceResponse_policyList', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1841, 20), )

    
    policyList = property(__policyList.value, __policyList.set, None, None)

    _ElementMap.update({
        __policyList.name() : __policyList
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PolicyListDeviceResponse = PolicyListDeviceResponse
Namespace.addCategoryObject('typeBinding', 'PolicyListDeviceResponse', PolicyListDeviceResponse)


# Complex type {csm}PolicyNamesByTypeRequest with content type ELEMENT_ONLY
class PolicyNamesByTypeRequest (BaseReqResp):
    """Complex type {csm}PolicyNamesByTypeRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolicyNamesByTypeRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1853, 4)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element policyType uses Python identifier policyType
    __policyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyType'), 'policyType', '__csm_PolicyNamesByTypeRequest_policyType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1857, 20), )

    
    policyType = property(__policyType.value, __policyType.set, None, None)

    _ElementMap.update({
        __policyType.name() : __policyType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PolicyNamesByTypeRequest = PolicyNamesByTypeRequest
Namespace.addCategoryObject('typeBinding', 'PolicyNamesByTypeRequest', PolicyNamesByTypeRequest)


# Complex type {csm}PolicyConfigByDeviceGIDRequest with content type ELEMENT_ONLY
class PolicyConfigByDeviceGIDRequest (BaseReqResp):
    """Complex type {csm}PolicyConfigByDeviceGIDRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolicyConfigByDeviceGIDRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1863, 4)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element gid uses Python identifier gid
    __gid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gid'), 'gid', '__csm_PolicyConfigByDeviceGIDRequest_gid', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1867, 20), )

    
    gid = property(__gid.value, __gid.set, None, None)

    
    # Element policyType uses Python identifier policyType
    __policyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyType'), 'policyType', '__csm_PolicyConfigByDeviceGIDRequest_policyType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1868, 20), )

    
    policyType = property(__policyType.value, __policyType.set, None, None)

    _ElementMap.update({
        __gid.name() : __gid,
        __policyType.name() : __policyType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PolicyConfigByDeviceGIDRequest = PolicyConfigByDeviceGIDRequest
Namespace.addCategoryObject('typeBinding', 'PolicyConfigByDeviceGIDRequest', PolicyConfigByDeviceGIDRequest)


# Complex type {csm}SetSharedPolicyConfigRequest with content type ELEMENT_ONLY
class SetSharedPolicyConfigRequest (BaseReqResp):
    """Complex type {csm}SetSharedPolicyConfigRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SetSharedPolicyConfigRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1876, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_SetSharedPolicyConfigRequest_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1880, 5), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    
    # Element policyName uses Python identifier policyName
    __policyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyName'), 'policyName', '__csm_SetSharedPolicyConfigRequest_policyName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1882, 5), )

    
    policyName = property(__policyName.value, __policyName.set, None, None)

    
    # Element policyRename uses Python identifier policyRename
    __policyRename = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyRename'), 'policyRename', '__csm_SetSharedPolicyConfigRequest_policyRename', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1884, 5), )

    
    policyRename = property(__policyRename.value, __policyRename.set, None, None)

    
    # Element policyType uses Python identifier policyType
    __policyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyType'), 'policyType', '__csm_SetSharedPolicyConfigRequest_policyType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1886, 5), )

    
    policyType = property(__policyType.value, __policyType.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__csm_SetSharedPolicyConfigRequest_description', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1887, 5), )

    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        __csmSessionGID.name() : __csmSessionGID,
        __policyName.name() : __policyName,
        __policyRename.name() : __policyRename,
        __policyType.name() : __policyType,
        __description.name() : __description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SetSharedPolicyConfigRequest = SetSharedPolicyConfigRequest
Namespace.addCategoryObject('typeBinding', 'SetSharedPolicyConfigRequest', SetSharedPolicyConfigRequest)


# Complex type {csm}InheritSharedPolicyConfigRequest with content type ELEMENT_ONLY
class InheritSharedPolicyConfigRequest (BaseReqResp):
    """Complex type {csm}InheritSharedPolicyConfigRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InheritSharedPolicyConfigRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1894, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_InheritSharedPolicyConfigRequest_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1898, 5), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    
    # Element policyName uses Python identifier policyName
    __policyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyName'), 'policyName', '__csm_InheritSharedPolicyConfigRequest_policyName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1900, 5), )

    
    policyName = property(__policyName.value, __policyName.set, None, None)

    
    # Element parentPolicyName uses Python identifier parentPolicyName
    __parentPolicyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parentPolicyName'), 'parentPolicyName', '__csm_InheritSharedPolicyConfigRequest_parentPolicyName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1902, 5), )

    
    parentPolicyName = property(__parentPolicyName.value, __parentPolicyName.set, None, None)

    
    # Element inherit uses Python identifier inherit
    __inherit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inherit'), 'inherit', '__csm_InheritSharedPolicyConfigRequest_inherit', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1905, 5), )

    
    inherit = property(__inherit.value, __inherit.set, None, None)

    
    # Element policyType uses Python identifier policyType
    __policyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyType'), 'policyType', '__csm_InheritSharedPolicyConfigRequest_policyType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1907, 5), )

    
    policyType = property(__policyType.value, __policyType.set, None, None)

    _ElementMap.update({
        __csmSessionGID.name() : __csmSessionGID,
        __policyName.name() : __policyName,
        __parentPolicyName.name() : __parentPolicyName,
        __inherit.name() : __inherit,
        __policyType.name() : __policyType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InheritSharedPolicyConfigRequest = InheritSharedPolicyConfigRequest
Namespace.addCategoryObject('typeBinding', 'InheritSharedPolicyConfigRequest', InheritSharedPolicyConfigRequest)


# Complex type {csm}SharedPolicyConfigResponse with content type ELEMENT_ONLY
class SharedPolicyConfigResponse (BaseReqResp):
    """Complex type {csm}SharedPolicyConfigResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SharedPolicyConfigResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1915, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element statusCode uses Python identifier statusCode
    __statusCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'statusCode'), 'statusCode', '__csm_SharedPolicyConfigResponse_statusCode', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1919, 8), )

    
    statusCode = property(__statusCode.value, __statusCode.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__csm_SharedPolicyConfigResponse_description', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1920, 5), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element deviceGIDs uses Python identifier deviceGIDs
    __deviceGIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGIDs'), 'deviceGIDs', '__csm_SharedPolicyConfigResponse_deviceGIDs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1921, 5), )

    
    deviceGIDs = property(__deviceGIDs.value, __deviceGIDs.set, None, None)

    _ElementMap.update({
        __statusCode.name() : __statusCode,
        __description.name() : __description,
        __deviceGIDs.name() : __deviceGIDs
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SharedPolicyConfigResponse = SharedPolicyConfigResponse
Namespace.addCategoryObject('typeBinding', 'SharedPolicyConfigResponse', SharedPolicyConfigResponse)


# Complex type {csm}AssignSharedPolicyConfigRequest with content type ELEMENT_ONLY
class AssignSharedPolicyConfigRequest (BaseReqResp):
    """Complex type {csm}AssignSharedPolicyConfigRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssignSharedPolicyConfigRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1927, 0)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_AssignSharedPolicyConfigRequest_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1931, 0), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    
    # Element policyName uses Python identifier policyName
    __policyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyName'), 'policyName', '__csm_AssignSharedPolicyConfigRequest_policyName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1932, 0), )

    
    policyName = property(__policyName.value, __policyName.set, None, None)

    
    # Element policyType uses Python identifier policyType
    __policyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyType'), 'policyType', '__csm_AssignSharedPolicyConfigRequest_policyType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1933, 0), )

    
    policyType = property(__policyType.value, __policyType.set, None, None)

    
    # Element deviceGIDs uses Python identifier deviceGIDs
    __deviceGIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGIDs'), 'deviceGIDs', '__csm_AssignSharedPolicyConfigRequest_deviceGIDs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1934, 0), )

    
    deviceGIDs = property(__deviceGIDs.value, __deviceGIDs.set, None, None)

    
    # Element inheritLocalPolicy uses Python identifier inheritLocalPolicy
    __inheritLocalPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inheritLocalPolicy'), 'inheritLocalPolicy', '__csm_AssignSharedPolicyConfigRequest_inheritLocalPolicy', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1935, 0), )

    
    inheritLocalPolicy = property(__inheritLocalPolicy.value, __inheritLocalPolicy.set, None, None)

    _ElementMap.update({
        __csmSessionGID.name() : __csmSessionGID,
        __policyName.name() : __policyName,
        __policyType.name() : __policyType,
        __deviceGIDs.name() : __deviceGIDs,
        __inheritLocalPolicy.name() : __inheritLocalPolicy
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AssignSharedPolicyConfigRequest = AssignSharedPolicyConfigRequest
Namespace.addCategoryObject('typeBinding', 'AssignSharedPolicyConfigRequest', AssignSharedPolicyConfigRequest)


# Complex type {csm}UnAssignSharedPolicyConfigRequest with content type ELEMENT_ONLY
class UnAssignSharedPolicyConfigRequest (BaseReqResp):
    """Complex type {csm}UnAssignSharedPolicyConfigRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UnAssignSharedPolicyConfigRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1941, 0)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_UnAssignSharedPolicyConfigRequest_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1945, 0), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    
    # Element policyName uses Python identifier policyName
    __policyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyName'), 'policyName', '__csm_UnAssignSharedPolicyConfigRequest_policyName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1946, 0), )

    
    policyName = property(__policyName.value, __policyName.set, None, None)

    
    # Element policyType uses Python identifier policyType
    __policyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyType'), 'policyType', '__csm_UnAssignSharedPolicyConfigRequest_policyType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1947, 0), )

    
    policyType = property(__policyType.value, __policyType.set, None, None)

    
    # Element deviceGIDs uses Python identifier deviceGIDs
    __deviceGIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGIDs'), 'deviceGIDs', '__csm_UnAssignSharedPolicyConfigRequest_deviceGIDs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1948, 0), )

    
    deviceGIDs = property(__deviceGIDs.value, __deviceGIDs.set, None, None)

    _ElementMap.update({
        __csmSessionGID.name() : __csmSessionGID,
        __policyName.name() : __policyName,
        __policyType.name() : __policyType,
        __deviceGIDs.name() : __deviceGIDs
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.UnAssignSharedPolicyConfigRequest = UnAssignSharedPolicyConfigRequest
Namespace.addCategoryObject('typeBinding', 'UnAssignSharedPolicyConfigRequest', UnAssignSharedPolicyConfigRequest)


# Complex type {csm}SetPolicyConfigRequest with content type ELEMENT_ONLY
class SetPolicyConfigRequest (BaseReqResp):
    """Complex type {csm}SetPolicyConfigRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SetPolicyConfigRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1956, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_SetPolicyConfigRequest_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1960, 5), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    
    # Element deviceGID uses Python identifier deviceGID
    __deviceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGID'), 'deviceGID', '__csm_SetPolicyConfigRequest_deviceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1962, 6), )

    
    deviceGID = property(__deviceGID.value, __deviceGID.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__csm_SetPolicyConfigRequest_name', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1963, 6), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element deviceAccessRuleUnifiedFirewallPolicy uses Python identifier deviceAccessRuleUnifiedFirewallPolicy
    __deviceAccessRuleUnifiedFirewallPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceAccessRuleUnifiedFirewallPolicy'), 'deviceAccessRuleUnifiedFirewallPolicy', '__csm_SetPolicyConfigRequest_deviceAccessRuleUnifiedFirewallPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1966, 6), )

    
    deviceAccessRuleUnifiedFirewallPolicy = property(__deviceAccessRuleUnifiedFirewallPolicy.value, __deviceAccessRuleUnifiedFirewallPolicy.set, None, None)

    
    # Element deviceAccessRuleFirewallPolicy uses Python identifier deviceAccessRuleFirewallPolicy
    __deviceAccessRuleFirewallPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceAccessRuleFirewallPolicy'), 'deviceAccessRuleFirewallPolicy', '__csm_SetPolicyConfigRequest_deviceAccessRuleFirewallPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1968, 6), )

    
    deviceAccessRuleFirewallPolicy = property(__deviceAccessRuleFirewallPolicy.value, __deviceAccessRuleFirewallPolicy.set, None, None)

    
    # Element firewallACLSettingsPolicy uses Python identifier firewallACLSettingsPolicy
    __firewallACLSettingsPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'firewallACLSettingsPolicy'), 'firewallACLSettingsPolicy', '__csm_SetPolicyConfigRequest_firewallACLSettingsPolicy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1969, 6), )

    
    firewallACLSettingsPolicy = property(__firewallACLSettingsPolicy.value, __firewallACLSettingsPolicy.set, None, None)

    _ElementMap.update({
        __csmSessionGID.name() : __csmSessionGID,
        __deviceGID.name() : __deviceGID,
        __name.name() : __name,
        __deviceAccessRuleUnifiedFirewallPolicy.name() : __deviceAccessRuleUnifiedFirewallPolicy,
        __deviceAccessRuleFirewallPolicy.name() : __deviceAccessRuleFirewallPolicy,
        __firewallACLSettingsPolicy.name() : __firewallACLSettingsPolicy
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SetPolicyConfigRequest = SetPolicyConfigRequest
Namespace.addCategoryObject('typeBinding', 'SetPolicyConfigRequest', SetPolicyConfigRequest)


# Complex type {csm}DeletePolicyConfigRequest with content type ELEMENT_ONLY
class DeletePolicyConfigRequest (BaseReqResp):
    """Complex type {csm}DeletePolicyConfigRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeletePolicyConfigRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1977, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_DeletePolicyConfigRequest_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1981, 5), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    
    # Element deviceGID uses Python identifier deviceGID
    __deviceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGID'), 'deviceGID', '__csm_DeletePolicyConfigRequest_deviceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1983, 6), )

    
    deviceGID = property(__deviceGID.value, __deviceGID.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__csm_DeletePolicyConfigRequest_name', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1984, 6), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element policyGID uses Python identifier policyGID
    __policyGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyGID'), 'policyGID', '__csm_DeletePolicyConfigRequest_policyGID', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1986, 5), )

    
    policyGID = property(__policyGID.value, __policyGID.set, None, None)

    
    # Element policyType uses Python identifier policyType
    __policyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyType'), 'policyType', '__csm_DeletePolicyConfigRequest_policyType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1987, 5), )

    
    policyType = property(__policyType.value, __policyType.set, None, None)

    _ElementMap.update({
        __csmSessionGID.name() : __csmSessionGID,
        __deviceGID.name() : __deviceGID,
        __name.name() : __name,
        __policyGID.name() : __policyGID,
        __policyType.name() : __policyType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeletePolicyConfigRequest = DeletePolicyConfigRequest
Namespace.addCategoryObject('typeBinding', 'DeletePolicyConfigRequest', DeletePolicyConfigRequest)


# Complex type {csm}PolicyNamesResponse with content type ELEMENT_ONLY
class PolicyNamesResponse (BaseReqResp):
    """Complex type {csm}PolicyNamesResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolicyNamesResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1993, 4)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element policyType uses Python identifier policyType
    __policyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyType'), 'policyType', '__csm_PolicyNamesResponse_policyType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1997, 20), )

    
    policyType = property(__policyType.value, __policyType.set, None, None)

    
    # Element policy uses Python identifier policy
    __policy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policy'), 'policy', '__csm_PolicyNamesResponse_policy', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1998, 20), )

    
    policy = property(__policy.value, __policy.set, None, None)

    _ElementMap.update({
        __policyType.name() : __policyType,
        __policy.name() : __policy
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PolicyNamesResponse = PolicyNamesResponse
Namespace.addCategoryObject('typeBinding', 'PolicyNamesResponse', PolicyNamesResponse)


# Complex type {csm}PolicyConfigDeviceResponse with content type ELEMENT_ONLY
class PolicyConfigDeviceResponse (BaseReqResp):
    """Complex type {csm}PolicyConfigDeviceResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolicyConfigDeviceResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2024, 4)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element policy uses Python identifier policy
    __policy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policy'), 'policy', '__csm_PolicyConfigDeviceResponse_policy', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2028, 20), )

    
    policy = property(__policy.value, __policy.set, None, None)

    
    # Element policyObject uses Python identifier policyObject
    __policyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyObject'), 'policyObject', '__csm_PolicyConfigDeviceResponse_policyObject', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2069, 20), )

    
    policyObject = property(__policyObject.value, __policyObject.set, None, None)

    _ElementMap.update({
        __policy.name() : __policy,
        __policyObject.name() : __policyObject
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PolicyConfigDeviceResponse = PolicyConfigDeviceResponse
Namespace.addCategoryObject('typeBinding', 'PolicyConfigDeviceResponse', PolicyConfigDeviceResponse)


# Complex type {csm}CSMSessionRequest with content type ELEMENT_ONLY
class CSMSessionRequest (BaseReqResp):
    """Complex type {csm}CSMSessionRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CSMSessionRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2093, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionName uses Python identifier csmSessionName
    __csmSessionName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionName'), 'csmSessionName', '__csm_CSMSessionRequest_csmSessionName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2097, 5), )

    
    csmSessionName = property(__csmSessionName.value, __csmSessionName.set, None, None)

    
    # Element csmSessionDescription uses Python identifier csmSessionDescription
    __csmSessionDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionDescription'), 'csmSessionDescription', '__csm_CSMSessionRequest_csmSessionDescription', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2099, 5), )

    
    csmSessionDescription = property(__csmSessionDescription.value, __csmSessionDescription.set, None, None)

    _ElementMap.update({
        __csmSessionName.name() : __csmSessionName,
        __csmSessionDescription.name() : __csmSessionDescription
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CSMSessionRequest = CSMSessionRequest
Namespace.addCategoryObject('typeBinding', 'CSMSessionRequest', CSMSessionRequest)


# Complex type {csm}CSMSessionResponse with content type ELEMENT_ONLY
class CSMSessionResponse (BaseReqResp):
    """Complex type {csm}CSMSessionResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CSMSessionResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2106, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_CSMSessionResponse_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2110, 5), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__csm_CSMSessionResponse_description', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2112, 5), )

    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        __csmSessionGID.name() : __csmSessionGID,
        __description.name() : __description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CSMSessionResponse = CSMSessionResponse
Namespace.addCategoryObject('typeBinding', 'CSMSessionResponse', CSMSessionResponse)


# Complex type {csm}DeployConfigRequest with content type ELEMENT_ONLY
class DeployConfigRequest (BaseReqResp):
    """Complex type {csm}DeployConfigRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeployConfigRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2146, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element deviceGID uses Python identifier deviceGID
    __deviceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGID'), 'deviceGID', '__csm_DeployConfigRequest_deviceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2150, 5), )

    
    deviceGID = property(__deviceGID.value, __deviceGID.set, None, None)

    
    # Element deploymentOptions uses Python identifier deploymentOptions
    __deploymentOptions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deploymentOptions'), 'deploymentOptions', '__csm_DeployConfigRequest_deploymentOptions', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2152, 5), )

    
    deploymentOptions = property(__deploymentOptions.value, __deploymentOptions.set, None, None)

    
    # Element deploymentComments uses Python identifier deploymentComments
    __deploymentComments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deploymentComments'), 'deploymentComments', '__csm_DeployConfigRequest_deploymentComments', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2154, 5), )

    
    deploymentComments = property(__deploymentComments.value, __deploymentComments.set, None, None)

    _ElementMap.update({
        __deviceGID.name() : __deviceGID,
        __deploymentOptions.name() : __deploymentOptions,
        __deploymentComments.name() : __deploymentComments
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeployConfigRequest = DeployConfigRequest
Namespace.addCategoryObject('typeBinding', 'DeployConfigRequest', DeployConfigRequest)


# Complex type {csm}CSMSessionValidationResponse with content type ELEMENT_ONLY
class CSMSessionValidationResponse (BaseReqResp):
    """Complex type {csm}CSMSessionValidationResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CSMSessionValidationResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2162, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element statusCode uses Python identifier statusCode
    __statusCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'statusCode'), 'statusCode', '__csm_CSMSessionValidationResponse_statusCode', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2166, 3), )

    
    statusCode = property(__statusCode.value, __statusCode.set, None, None)

    
    # Element approvalRequired uses Python identifier approvalRequired
    __approvalRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'approvalRequired'), 'approvalRequired', '__csm_CSMSessionValidationResponse_approvalRequired', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2167, 3), )

    
    approvalRequired = property(__approvalRequired.value, __approvalRequired.set, None, None)

    
    # Element validationMessage uses Python identifier validationMessage
    __validationMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'validationMessage'), 'validationMessage', '__csm_CSMSessionValidationResponse_validationMessage', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2168, 3), )

    
    validationMessage = property(__validationMessage.value, __validationMessage.set, None, None)

    
    # Element validationResults uses Python identifier validationResults
    __validationResults = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'validationResults'), 'validationResults', '__csm_CSMSessionValidationResponse_validationResults', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2169, 3), )

    
    validationResults = property(__validationResults.value, __validationResults.set, None, None)

    _ElementMap.update({
        __statusCode.name() : __statusCode,
        __approvalRequired.name() : __approvalRequired,
        __validationMessage.name() : __validationMessage,
        __validationResults.name() : __validationResults
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CSMSessionValidationResponse = CSMSessionValidationResponse
Namespace.addCategoryObject('typeBinding', 'CSMSessionValidationResponse', CSMSessionValidationResponse)


# Complex type {csm}DeploymentResponse with content type ELEMENT_ONLY
class DeploymentResponse (BaseReqResp):
    """Complex type {csm}DeploymentResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeploymentResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2238, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'status'), 'status', '__csm_DeploymentResponse_status', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2242, 5), )

    
    status = property(__status.value, __status.set, None, None)

    
    # Element deploymentJobGID uses Python identifier deploymentJobGID
    __deploymentJobGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deploymentJobGID'), 'deploymentJobGID', '__csm_DeploymentResponse_deploymentJobGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2243, 5), )

    
    deploymentJobGID = property(__deploymentJobGID.value, __deploymentJobGID.set, None, None)

    
    # Element deploymentJobName uses Python identifier deploymentJobName
    __deploymentJobName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deploymentJobName'), 'deploymentJobName', '__csm_DeploymentResponse_deploymentJobName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2244, 5), )

    
    deploymentJobName = property(__deploymentJobName.value, __deploymentJobName.set, None, None)

    
    # Element devicesInProgress uses Python identifier devicesInProgress
    __devicesInProgress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'devicesInProgress'), 'devicesInProgress', '__csm_DeploymentResponse_devicesInProgress', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2245, 5), )

    
    devicesInProgress = property(__devicesInProgress.value, __devicesInProgress.set, None, None)

    
    # Element devicesSuccessList uses Python identifier devicesSuccessList
    __devicesSuccessList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'devicesSuccessList'), 'devicesSuccessList', '__csm_DeploymentResponse_devicesSuccessList', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2246, 5), )

    
    devicesSuccessList = property(__devicesSuccessList.value, __devicesSuccessList.set, None, None)

    
    # Element devicesFailureList uses Python identifier devicesFailureList
    __devicesFailureList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'devicesFailureList'), 'devicesFailureList', '__csm_DeploymentResponse_devicesFailureList', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2247, 5), )

    
    devicesFailureList = property(__devicesFailureList.value, __devicesFailureList.set, None, None)

    _ElementMap.update({
        __status.name() : __status,
        __deploymentJobGID.name() : __deploymentJobGID,
        __deploymentJobName.name() : __deploymentJobName,
        __devicesInProgress.name() : __devicesInProgress,
        __devicesSuccessList.name() : __devicesSuccessList,
        __devicesFailureList.name() : __devicesFailureList
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeploymentResponse = DeploymentResponse
Namespace.addCategoryObject('typeBinding', 'DeploymentResponse', DeploymentResponse)


# Complex type {csm}CSMSessionOperationRequest with content type ELEMENT_ONLY
class CSMSessionOperationRequest (BaseReqResp):
    """Complex type {csm}CSMSessionOperationRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CSMSessionOperationRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2253, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_CSMSessionOperationRequest_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2258, 6), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    
    # Element csmSessionName uses Python identifier csmSessionName
    __csmSessionName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionName'), 'csmSessionName', '__csm_CSMSessionOperationRequest_csmSessionName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2260, 6), )

    
    csmSessionName = property(__csmSessionName.value, __csmSessionName.set, None, None)

    
    # Element comments uses Python identifier comments
    __comments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'comments'), 'comments', '__csm_CSMSessionOperationRequest_comments', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2263, 5), )

    
    comments = property(__comments.value, __comments.set, None, None)

    _ElementMap.update({
        __csmSessionGID.name() : __csmSessionGID,
        __csmSessionName.name() : __csmSessionName,
        __comments.name() : __comments
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CSMSessionOperationRequest = CSMSessionOperationRequest
Namespace.addCategoryObject('typeBinding', 'CSMSessionOperationRequest', CSMSessionOperationRequest)


# Complex type {csm}CSMApproveOperationRequest with content type ELEMENT_ONLY
class CSMApproveOperationRequest (BaseReqResp):
    """Complex type {csm}CSMApproveOperationRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CSMApproveOperationRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2270, 2)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_CSMApproveOperationRequest_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2275, 6), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    
    # Element csmSessionName uses Python identifier csmSessionName
    __csmSessionName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionName'), 'csmSessionName', '__csm_CSMApproveOperationRequest_csmSessionName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2276, 6), )

    
    csmSessionName = property(__csmSessionName.value, __csmSessionName.set, None, None)

    
    # Element comments uses Python identifier comments
    __comments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'comments'), 'comments', '__csm_CSMApproveOperationRequest_comments', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2278, 5), )

    
    comments = property(__comments.value, __comments.set, None, None)

    
    # Element approvalStatus uses Python identifier approvalStatus
    __approvalStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'approvalStatus'), 'approvalStatus', '__csm_CSMApproveOperationRequest_approvalStatus', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2279, 5), )

    
    approvalStatus = property(__approvalStatus.value, __approvalStatus.set, None, None)

    _ElementMap.update({
        __csmSessionGID.name() : __csmSessionGID,
        __csmSessionName.name() : __csmSessionName,
        __comments.name() : __comments,
        __approvalStatus.name() : __approvalStatus
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CSMApproveOperationRequest = CSMApproveOperationRequest
Namespace.addCategoryObject('typeBinding', 'CSMApproveOperationRequest', CSMApproveOperationRequest)


# Complex type {csm}CSMApproveResultResponse with content type ELEMENT_ONLY
class CSMApproveResultResponse (BaseReqResp):
    """Complex type {csm}CSMApproveResultResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CSMApproveResultResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2285, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element result uses Python identifier result
    __result = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'result'), 'result', '__csm_CSMApproveResultResponse_result', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2289, 5), )

    
    result = property(__result.value, __result.set, None, None)

    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_CSMApproveResultResponse_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2291, 5), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    _ElementMap.update({
        __result.name() : __result,
        __csmSessionGID.name() : __csmSessionGID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CSMApproveResultResponse = CSMApproveResultResponse
Namespace.addCategoryObject('typeBinding', 'CSMApproveResultResponse', CSMApproveResultResponse)


# Complex type {csm}SubmitCSMSessionRequest with content type ELEMENT_ONLY
class SubmitCSMSessionRequest (BaseReqResp):
    """Complex type {csm}SubmitCSMSessionRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SubmitCSMSessionRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2298, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_SubmitCSMSessionRequest_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2302, 5), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    
    # Element submitComments uses Python identifier submitComments
    __submitComments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'submitComments'), 'submitComments', '__csm_SubmitCSMSessionRequest_submitComments', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2304, 5), )

    
    submitComments = property(__submitComments.value, __submitComments.set, None, None)

    
    # Element continueOnWarnings uses Python identifier continueOnWarnings
    __continueOnWarnings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'continueOnWarnings'), 'continueOnWarnings', '__csm_SubmitCSMSessionRequest_continueOnWarnings', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2306, 5), )

    
    continueOnWarnings = property(__continueOnWarnings.value, __continueOnWarnings.set, None, None)

    _ElementMap.update({
        __csmSessionGID.name() : __csmSessionGID,
        __submitComments.name() : __submitComments,
        __continueOnWarnings.name() : __continueOnWarnings
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SubmitCSMSessionRequest = SubmitCSMSessionRequest
Namespace.addCategoryObject('typeBinding', 'SubmitCSMSessionRequest', SubmitCSMSessionRequest)


# Complex type {csm}CSMSessionResultResponse with content type ELEMENT_ONLY
class CSMSessionResultResponse (BaseReqResp):
    """Complex type {csm}CSMSessionResultResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CSMSessionResultResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2313, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element result uses Python identifier result
    __result = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'result'), 'result', '__csm_CSMSessionResultResponse_result', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2317, 5), )

    
    result = property(__result.value, __result.set, None, None)

    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_CSMSessionResultResponse_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2319, 5), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    _ElementMap.update({
        __result.name() : __result,
        __csmSessionGID.name() : __csmSessionGID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CSMSessionResultResponse = CSMSessionResultResponse
Namespace.addCategoryObject('typeBinding', 'CSMSessionResultResponse', CSMSessionResultResponse)


# Complex type {csm}ManagePolicyObjectRequest with content type ELEMENT_ONLY
class ManagePolicyObjectRequest (BaseReqResp):
    """Complex type {csm}ManagePolicyObjectRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ManagePolicyObjectRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2330, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_ManagePolicyObjectRequest_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2334, 5), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    
    # Element enforceDuplicateDetection uses Python identifier enforceDuplicateDetection
    __enforceDuplicateDetection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'enforceDuplicateDetection'), 'enforceDuplicateDetection', '__csm_ManagePolicyObjectRequest_enforceDuplicateDetection', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2336, 5), )

    
    enforceDuplicateDetection = property(__enforceDuplicateDetection.value, __enforceDuplicateDetection.set, None, None)

    
    # Element networkPolicyObject uses Python identifier networkPolicyObject
    __networkPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'networkPolicyObject'), 'networkPolicyObject', '__csm_ManagePolicyObjectRequest_networkPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2338, 5), )

    
    networkPolicyObject = property(__networkPolicyObject.value, __networkPolicyObject.set, None, None)

    
    # Element portListPolicyObject uses Python identifier portListPolicyObject
    __portListPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'portListPolicyObject'), 'portListPolicyObject', '__csm_ManagePolicyObjectRequest_portListPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2339, 5), )

    
    portListPolicyObject = property(__portListPolicyObject.value, __portListPolicyObject.set, None, None)

    
    # Element servicePolicyObject uses Python identifier servicePolicyObject
    __servicePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'servicePolicyObject'), 'servicePolicyObject', '__csm_ManagePolicyObjectRequest_servicePolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2340, 5), )

    
    servicePolicyObject = property(__servicePolicyObject.value, __servicePolicyObject.set, None, None)

    
    # Element interfaceRolePolicyObject uses Python identifier interfaceRolePolicyObject
    __interfaceRolePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceRolePolicyObject'), 'interfaceRolePolicyObject', '__csm_ManagePolicyObjectRequest_interfaceRolePolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2341, 5), )

    
    interfaceRolePolicyObject = property(__interfaceRolePolicyObject.value, __interfaceRolePolicyObject.set, None, None)

    
    # Element timeRangePolicyObject uses Python identifier timeRangePolicyObject
    __timeRangePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'timeRangePolicyObject'), 'timeRangePolicyObject', '__csm_ManagePolicyObjectRequest_timeRangePolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2342, 5), )

    
    timeRangePolicyObject = property(__timeRangePolicyObject.value, __timeRangePolicyObject.set, None, None)

    
    # Element identityUserGroupPolicyObject uses Python identifier identityUserGroupPolicyObject
    __identityUserGroupPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'identityUserGroupPolicyObject'), 'identityUserGroupPolicyObject', '__csm_ManagePolicyObjectRequest_identityUserGroupPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2343, 5), )

    
    identityUserGroupPolicyObject = property(__identityUserGroupPolicyObject.value, __identityUserGroupPolicyObject.set, None, None)

    
    # Element securityGroupPolicyObject uses Python identifier securityGroupPolicyObject
    __securityGroupPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'securityGroupPolicyObject'), 'securityGroupPolicyObject', '__csm_ManagePolicyObjectRequest_securityGroupPolicyObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2344, 5), )

    
    securityGroupPolicyObject = property(__securityGroupPolicyObject.value, __securityGroupPolicyObject.set, None, None)

    _ElementMap.update({
        __csmSessionGID.name() : __csmSessionGID,
        __enforceDuplicateDetection.name() : __enforceDuplicateDetection,
        __networkPolicyObject.name() : __networkPolicyObject,
        __portListPolicyObject.name() : __portListPolicyObject,
        __servicePolicyObject.name() : __servicePolicyObject,
        __interfaceRolePolicyObject.name() : __interfaceRolePolicyObject,
        __timeRangePolicyObject.name() : __timeRangePolicyObject,
        __identityUserGroupPolicyObject.name() : __identityUserGroupPolicyObject,
        __securityGroupPolicyObject.name() : __securityGroupPolicyObject
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ManagePolicyObjectRequest = ManagePolicyObjectRequest
Namespace.addCategoryObject('typeBinding', 'ManagePolicyObjectRequest', ManagePolicyObjectRequest)


# Complex type {csm}ManagePolicyObjectResponse with content type ELEMENT_ONLY
class ManagePolicyObjectResponse (BaseReqResp):
    """Complex type {csm}ManagePolicyObjectResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ManagePolicyObjectResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2353, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'message'), 'message', '__csm_ManagePolicyObjectResponse_message', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2357, 5), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element resultObject uses Python identifier resultObject
    __resultObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'resultObject'), 'resultObject', '__csm_ManagePolicyObjectResponse_resultObject', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2358, 5), )

    
    resultObject = property(__resultObject.value, __resultObject.set, None, None)

    _ElementMap.update({
        __message.name() : __message,
        __resultObject.name() : __resultObject
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ManagePolicyObjectResponse = ManagePolicyObjectResponse
Namespace.addCategoryObject('typeBinding', 'ManagePolicyObjectResponse', ManagePolicyObjectResponse)


# Complex type {csm}PolicyObjectConfigByTypeRequest with content type ELEMENT_ONLY
class PolicyObjectConfigByTypeRequest (BaseReqResp):
    """Complex type {csm}PolicyObjectConfigByTypeRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolicyObjectConfigByTypeRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2374, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_PolicyObjectConfigByTypeRequest_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2378, 5), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    
    # Element policyObjectType uses Python identifier policyObjectType
    __policyObjectType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyObjectType'), 'policyObjectType', '__csm_PolicyObjectConfigByTypeRequest_policyObjectType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2380, 5), )

    
    policyObjectType = property(__policyObjectType.value, __policyObjectType.set, None, None)

    
    # Element enforceConfDetection uses Python identifier enforceConfDetection
    __enforceConfDetection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'enforceConfDetection'), 'enforceConfDetection', '__csm_PolicyObjectConfigByTypeRequest_enforceConfDetection', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2384, 5), )

    
    enforceConfDetection = property(__enforceConfDetection.value, __enforceConfDetection.set, None, None)

    
    # Element deviceGID uses Python identifier deviceGID
    __deviceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGID'), 'deviceGID', '__csm_PolicyObjectConfigByTypeRequest_deviceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2388, 5), )

    
    deviceGID = property(__deviceGID.value, __deviceGID.set, None, None)

    
    # Element networkPolicyObject uses Python identifier networkPolicyObject
    __networkPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'networkPolicyObject'), 'networkPolicyObject', '__csm_PolicyObjectConfigByTypeRequest_networkPolicyObject', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2392, 6), )

    
    networkPolicyObject = property(__networkPolicyObject.value, __networkPolicyObject.set, None, None)

    
    # Element servicePolicyObject uses Python identifier servicePolicyObject
    __servicePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'servicePolicyObject'), 'servicePolicyObject', '__csm_PolicyObjectConfigByTypeRequest_servicePolicyObject', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2394, 6), )

    
    servicePolicyObject = property(__servicePolicyObject.value, __servicePolicyObject.set, None, None)

    
    # Element interfaceRolePolicyObject uses Python identifier interfaceRolePolicyObject
    __interfaceRolePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceRolePolicyObject'), 'interfaceRolePolicyObject', '__csm_PolicyObjectConfigByTypeRequest_interfaceRolePolicyObject', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2396, 6), )

    
    interfaceRolePolicyObject = property(__interfaceRolePolicyObject.value, __interfaceRolePolicyObject.set, None, None)

    
    # Element timeRangePolicyObject uses Python identifier timeRangePolicyObject
    __timeRangePolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'timeRangePolicyObject'), 'timeRangePolicyObject', '__csm_PolicyObjectConfigByTypeRequest_timeRangePolicyObject', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2398, 6), )

    
    timeRangePolicyObject = property(__timeRangePolicyObject.value, __timeRangePolicyObject.set, None, None)

    
    # Element identityUserGroupPolicyObject uses Python identifier identityUserGroupPolicyObject
    __identityUserGroupPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'identityUserGroupPolicyObject'), 'identityUserGroupPolicyObject', '__csm_PolicyObjectConfigByTypeRequest_identityUserGroupPolicyObject', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2400, 6), )

    
    identityUserGroupPolicyObject = property(__identityUserGroupPolicyObject.value, __identityUserGroupPolicyObject.set, None, None)

    
    # Element securityGroupPolicyObject uses Python identifier securityGroupPolicyObject
    __securityGroupPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'securityGroupPolicyObject'), 'securityGroupPolicyObject', '__csm_PolicyObjectConfigByTypeRequest_securityGroupPolicyObject', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2402, 6), )

    
    securityGroupPolicyObject = property(__securityGroupPolicyObject.value, __securityGroupPolicyObject.set, None, None)

    
    # Element portListPolicyObject uses Python identifier portListPolicyObject
    __portListPolicyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'portListPolicyObject'), 'portListPolicyObject', '__csm_PolicyObjectConfigByTypeRequest_portListPolicyObject', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2404, 6), )

    
    portListPolicyObject = property(__portListPolicyObject.value, __portListPolicyObject.set, None, None)

    _ElementMap.update({
        __csmSessionGID.name() : __csmSessionGID,
        __policyObjectType.name() : __policyObjectType,
        __enforceConfDetection.name() : __enforceConfDetection,
        __deviceGID.name() : __deviceGID,
        __networkPolicyObject.name() : __networkPolicyObject,
        __servicePolicyObject.name() : __servicePolicyObject,
        __interfaceRolePolicyObject.name() : __interfaceRolePolicyObject,
        __timeRangePolicyObject.name() : __timeRangePolicyObject,
        __identityUserGroupPolicyObject.name() : __identityUserGroupPolicyObject,
        __securityGroupPolicyObject.name() : __securityGroupPolicyObject,
        __portListPolicyObject.name() : __portListPolicyObject
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PolicyObjectConfigByTypeRequest = PolicyObjectConfigByTypeRequest
Namespace.addCategoryObject('typeBinding', 'PolicyObjectConfigByTypeRequest', PolicyObjectConfigByTypeRequest)


# Complex type {csm}DeletePolicyObjectConfigByIdRequest with content type ELEMENT_ONLY
class DeletePolicyObjectConfigByIdRequest (BaseReqResp):
    """Complex type {csm}DeletePolicyObjectConfigByIdRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeletePolicyObjectConfigByIdRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2414, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_DeletePolicyObjectConfigByIdRequest_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2418, 5), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    
    # Element objectGID uses Python identifier objectGID
    __objectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'objectGID'), 'objectGID', '__csm_DeletePolicyObjectConfigByIdRequest_objectGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2420, 5), )

    
    objectGID = property(__objectGID.value, __objectGID.set, None, None)

    
    # Element objectType uses Python identifier objectType
    __objectType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'objectType'), 'objectType', '__csm_DeletePolicyObjectConfigByIdRequest_objectType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2422, 5), )

    
    objectType = property(__objectType.value, __objectType.set, None, None)

    _ElementMap.update({
        __csmSessionGID.name() : __csmSessionGID,
        __objectGID.name() : __objectGID,
        __objectType.name() : __objectType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeletePolicyObjectConfigByIdRequest = DeletePolicyObjectConfigByIdRequest
Namespace.addCategoryObject('typeBinding', 'DeletePolicyObjectConfigByIdRequest', DeletePolicyObjectConfigByIdRequest)


# Complex type {csm}PolicyObjectConfigResponse with content type ELEMENT_ONLY
class PolicyObjectConfigResponse (BaseReqResp):
    """Complex type {csm}PolicyObjectConfigResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolicyObjectConfigResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2429, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element objectGID uses Python identifier objectGID
    __objectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'objectGID'), 'objectGID', '__csm_PolicyObjectConfigResponse_objectGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2433, 5), )

    
    objectGID = property(__objectGID.value, __objectGID.set, None, None)

    
    # Element results uses Python identifier results
    __results = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'results'), 'results', '__csm_PolicyObjectConfigResponse_results', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2434, 5), )

    
    results = property(__results.value, __results.set, None, None)

    
    # Element details uses Python identifier details
    __details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'details'), 'details', '__csm_PolicyObjectConfigResponse_details', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2436, 5), )

    
    details = property(__details.value, __details.set, None, None)

    
    # Element policyObject uses Python identifier policyObject
    __policyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyObject'), 'policyObject', '__csm_PolicyObjectConfigResponse_policyObject', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2438, 5), )

    
    policyObject = property(__policyObject.value, __policyObject.set, None, None)

    
    # Element overrideDetails uses Python identifier overrideDetails
    __overrideDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'overrideDetails'), 'overrideDetails', '__csm_PolicyObjectConfigResponse_overrideDetails', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2468, 10), )

    
    overrideDetails = property(__overrideDetails.value, __overrideDetails.set, None, None)

    _ElementMap.update({
        __objectGID.name() : __objectGID,
        __results.name() : __results,
        __details.name() : __details,
        __policyObject.name() : __policyObject,
        __overrideDetails.name() : __overrideDetails
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PolicyObjectConfigResponse = PolicyObjectConfigResponse
Namespace.addCategoryObject('typeBinding', 'PolicyObjectConfigResponse', PolicyObjectConfigResponse)


# Complex type {csm}UpdateNotesByRuleIDRequest with content type ELEMENT_ONLY
class UpdateNotesByRuleIDRequest (BaseReqResp):
    """Complex type {csm}UpdateNotesByRuleIDRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UpdateNotesByRuleIDRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2482, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_UpdateNotesByRuleIDRequest_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2486, 5), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    
    # Element deviceGID uses Python identifier deviceGID
    __deviceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGID'), 'deviceGID', '__csm_UpdateNotesByRuleIDRequest_deviceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2488, 5), )

    
    deviceGID = property(__deviceGID.value, __deviceGID.set, None, None)

    
    # Element policyGID uses Python identifier policyGID
    __policyGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyGID'), 'policyGID', '__csm_UpdateNotesByRuleIDRequest_policyGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2490, 5), )

    
    policyGID = property(__policyGID.value, __policyGID.set, None, None)

    
    # Element policyType uses Python identifier policyType
    __policyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyType'), 'policyType', '__csm_UpdateNotesByRuleIDRequest_policyType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2492, 5), )

    
    policyType = property(__policyType.value, __policyType.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__csm_UpdateNotesByRuleIDRequest_description', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2500, 5), )

    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        __csmSessionGID.name() : __csmSessionGID,
        __deviceGID.name() : __deviceGID,
        __policyGID.name() : __policyGID,
        __policyType.name() : __policyType,
        __description.name() : __description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.UpdateNotesByRuleIDRequest = UpdateNotesByRuleIDRequest
Namespace.addCategoryObject('typeBinding', 'UpdateNotesByRuleIDRequest', UpdateNotesByRuleIDRequest)


# Complex type {csm}ReorderRulesRequest with content type ELEMENT_ONLY
class ReorderRulesRequest (BaseReqResp):
    """Complex type {csm}ReorderRulesRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReorderRulesRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2507, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_ReorderRulesRequest_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2511, 5), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    
    # Element deviceGID uses Python identifier deviceGID
    __deviceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGID'), 'deviceGID', '__csm_ReorderRulesRequest_deviceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2514, 5), )

    
    deviceGID = property(__deviceGID.value, __deviceGID.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__csm_ReorderRulesRequest_name', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2516, 5), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element ruleGID uses Python identifier ruleGID
    __ruleGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ruleGID'), 'ruleGID', '__csm_ReorderRulesRequest_ruleGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2519, 5), )

    
    ruleGID = property(__ruleGID.value, __ruleGID.set, None, None)

    
    # Element policyType uses Python identifier policyType
    __policyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyType'), 'policyType', '__csm_ReorderRulesRequest_policyType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2522, 5), )

    
    policyType = property(__policyType.value, __policyType.set, None, None)

    
    # Element toOrderId uses Python identifier toOrderId
    __toOrderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'toOrderId'), 'toOrderId', '__csm_ReorderRulesRequest_toOrderId', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2523, 5), )

    
    toOrderId = property(__toOrderId.value, __toOrderId.set, None, None)

    _ElementMap.update({
        __csmSessionGID.name() : __csmSessionGID,
        __deviceGID.name() : __deviceGID,
        __name.name() : __name,
        __ruleGID.name() : __ruleGID,
        __policyType.name() : __policyType,
        __toOrderId.name() : __toOrderId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReorderRulesRequest = ReorderRulesRequest
Namespace.addCategoryObject('typeBinding', 'ReorderRulesRequest', ReorderRulesRequest)


# Complex type {csm}DeployableDevicesListRequest with content type ELEMENT_ONLY
class DeployableDevicesListRequest (BaseReqResp):
    """Complex type {csm}DeployableDevicesListRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeployableDevicesListRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2530, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeployableDevicesListRequest = DeployableDevicesListRequest
Namespace.addCategoryObject('typeBinding', 'DeployableDevicesListRequest', DeployableDevicesListRequest)


# Complex type {csm}DeployJobStatusRequest with content type ELEMENT_ONLY
class DeployJobStatusRequest (BaseReqResp):
    """Complex type {csm}DeployJobStatusRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeployJobStatusRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2539, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element deploymentJobName uses Python identifier deploymentJobName
    __deploymentJobName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deploymentJobName'), 'deploymentJobName', '__csm_DeployJobStatusRequest_deploymentJobName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2544, 7), )

    
    deploymentJobName = property(__deploymentJobName.value, __deploymentJobName.set, None, None)

    
    # Element deploymentJobGID uses Python identifier deploymentJobGID
    __deploymentJobGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deploymentJobGID'), 'deploymentJobGID', '__csm_DeployJobStatusRequest_deploymentJobGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2545, 5), )

    
    deploymentJobGID = property(__deploymentJobGID.value, __deploymentJobGID.set, None, None)

    _ElementMap.update({
        __deploymentJobName.name() : __deploymentJobName,
        __deploymentJobGID.name() : __deploymentJobGID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeployJobStatusRequest = DeployJobStatusRequest
Namespace.addCategoryObject('typeBinding', 'DeployJobStatusRequest', DeployJobStatusRequest)


# Complex type {csm}DeployableDevicesListResponse with content type ELEMENT_ONLY
class DeployableDevicesListResponse (BaseReqResp):
    """Complex type {csm}DeployableDevicesListResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeployableDevicesListResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2553, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element deviceGIDs uses Python identifier deviceGIDs
    __deviceGIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceGIDs'), 'deviceGIDs', '__csm_DeployableDevicesListResponse_deviceGIDs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2557, 5), )

    
    deviceGIDs = property(__deviceGIDs.value, __deviceGIDs.set, None, None)

    _ElementMap.update({
        __deviceGIDs.name() : __deviceGIDs
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeployableDevicesListResponse = DeployableDevicesListResponse
Namespace.addCategoryObject('typeBinding', 'DeployableDevicesListResponse', DeployableDevicesListResponse)


# Complex type {csm}GetPolicyObjectByGID with content type ELEMENT_ONLY
class GetPolicyObjectByGID (BaseReqResp):
    """Complex type {csm}GetPolicyObjectByGID with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GetPolicyObjectByGID')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2564, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element csmSessionGID uses Python identifier csmSessionGID
    __csmSessionGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), 'csmSessionGID', '__csm_GetPolicyObjectByGID_csmSessionGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2568, 4), )

    
    csmSessionGID = property(__csmSessionGID.value, __csmSessionGID.set, None, None)

    
    # Element gid uses Python identifier gid
    __gid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gid'), 'gid', '__csm_GetPolicyObjectByGID_gid', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2569, 4), )

    
    gid = property(__gid.value, __gid.set, None, None)

    _ElementMap.update({
        __csmSessionGID.name() : __csmSessionGID,
        __gid.name() : __gid
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GetPolicyObjectByGID = GetPolicyObjectByGID
Namespace.addCategoryObject('typeBinding', 'GetPolicyObjectByGID', GetPolicyObjectByGID)


# Complex type {csm}PolicyObjectsListByTypeRequest with content type ELEMENT_ONLY
class PolicyObjectsListByTypeRequest (BaseReqResp):
    """Complex type {csm}PolicyObjectsListByTypeRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolicyObjectsListByTypeRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2651, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element policyObjectType uses Python identifier policyObjectType
    __policyObjectType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyObjectType'), 'policyObjectType', '__csm_PolicyObjectsListByTypeRequest_policyObjectType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2655, 5), )

    
    policyObjectType = property(__policyObjectType.value, __policyObjectType.set, None, None)

    _ElementMap.update({
        __policyObjectType.name() : __policyObjectType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PolicyObjectsListByTypeRequest = PolicyObjectsListByTypeRequest
Namespace.addCategoryObject('typeBinding', 'PolicyObjectsListByTypeRequest', PolicyObjectsListByTypeRequest)


# Complex type {csm}PolicyObjectsListResponse with content type ELEMENT_ONLY
class PolicyObjectsListResponse (BaseReqResp):
    """Complex type {csm}PolicyObjectsListResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolicyObjectsListResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2662, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element policyObject uses Python identifier policyObject
    __policyObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyObject'), 'policyObject', '__csm_PolicyObjectsListResponse_policyObject', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2667, 5), )

    
    policyObject = property(__policyObject.value, __policyObject.set, None, None)

    _ElementMap.update({
        __policyObject.name() : __policyObject
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PolicyObjectsListResponse = PolicyObjectsListResponse
Namespace.addCategoryObject('typeBinding', 'PolicyObjectsListResponse', PolicyObjectsListResponse)


# Complex type {csm}DeviceSpecificEvent with content type ELEMENT_ONLY
class DeviceSpecificEvent (BaseEventDetails):
    """Complex type {csm}DeviceSpecificEvent with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceSpecificEvent')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 55, 1)
    _ElementMap = BaseEventDetails._ElementMap.copy()
    _AttributeMap = BaseEventDetails._AttributeMap.copy()
    # Base type is BaseEventDetails
    
    # Element subscriptionId (subscriptionId) inherited from {csm}BaseEventDetails
    
    # Element eventType (eventType) inherited from {csm}BaseEventDetails
    
    # Element eventCategory (eventCategory) inherited from {csm}BaseEventDetails
    
    # Element time (time) inherited from {csm}BaseEventDetails
    
    # Element content_ (content) inherited from {csm}BaseEventDetails
    
    # Element srcIP uses Python identifier srcIP
    __srcIP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'srcIP'), 'srcIP', '__csm_DeviceSpecificEvent_srcIP', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 59, 5), )

    
    srcIP = property(__srcIP.value, __srcIP.set, None, None)

    
    # Element srcGID uses Python identifier srcGID
    __srcGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'srcGID'), 'srcGID', '__csm_DeviceSpecificEvent_srcGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 60, 5), )

    
    srcGID = property(__srcGID.value, __srcGID.set, None, None)

    
    # Element srcDns uses Python identifier srcDns
    __srcDns = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'srcDns'), 'srcDns', '__csm_DeviceSpecificEvent_srcDns', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 61, 5), )

    
    srcDns = property(__srcDns.value, __srcDns.set, None, None)

    
    # Element srcOSType uses Python identifier srcOSType
    __srcOSType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'srcOSType'), 'srcOSType', '__csm_DeviceSpecificEvent_srcOSType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 62, 5), )

    
    srcOSType = property(__srcOSType.value, __srcOSType.set, None, None)

    _ElementMap.update({
        __srcIP.name() : __srcIP,
        __srcGID.name() : __srcGID,
        __srcDns.name() : __srcDns,
        __srcOSType.name() : __srcOSType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceSpecificEvent = DeviceSpecificEvent
Namespace.addCategoryObject('typeBinding', 'DeviceSpecificEvent', DeviceSpecificEvent)


# Complex type {csm}EventSubRequest with content type ELEMENT_ONLY
class EventSubRequest (BaseReqResp):
    """Complex type {csm}EventSubRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EventSubRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 103, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element op uses Python identifier op
    __op = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'op'), 'op', '__csm_EventSubRequest_op', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 107, 5), )

    
    op = property(__op.value, __op.set, None, None)

    
    # Element subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subscriptionId'), 'subscriptionId', '__csm_EventSubRequest_subscriptionId', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 108, 5), )

    
    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    
    # Element eventFilterItem uses Python identifier eventFilterItem
    __eventFilterItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'eventFilterItem'), 'eventFilterItem', '__csm_EventSubRequest_eventFilterItem', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 109, 5), )

    
    eventFilterItem = property(__eventFilterItem.value, __eventFilterItem.set, None, None)

    
    # Element syslogServer uses Python identifier syslogServer
    __syslogServer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'syslogServer'), 'syslogServer', '__csm_EventSubRequest_syslogServer', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 110, 5), )

    
    syslogServer = property(__syslogServer.value, __syslogServer.set, None, None)

    _ElementMap.update({
        __op.name() : __op,
        __subscriptionId.name() : __subscriptionId,
        __eventFilterItem.name() : __eventFilterItem,
        __syslogServer.name() : __syslogServer
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.EventSubRequest = EventSubRequest
Namespace.addCategoryObject('typeBinding', 'EventSubRequest', EventSubRequest)


# Complex type {csm}EventSubResponse with content type ELEMENT_ONLY
class EventSubResponse (BaseReqResp):
    """Complex type {csm}EventSubResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EventSubResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 116, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subscriptionId'), 'subscriptionId', '__csm_EventSubResponse_subscriptionId', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 120, 5), )

    
    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.EventSubResponse = EventSubResponse
Namespace.addCategoryObject('typeBinding', 'EventSubResponse', EventSubResponse)


# Complex type {csm}ExecDeviceReadOnlyCLICmdsRequest with content type ELEMENT_ONLY
class ExecDeviceReadOnlyCLICmdsRequest (BaseReqResp):
    """Complex type {csm}ExecDeviceReadOnlyCLICmdsRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ExecDeviceReadOnlyCLICmdsRequest')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 46, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element deviceReadOnlyCLICmd uses Python identifier deviceReadOnlyCLICmd
    __deviceReadOnlyCLICmd = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceReadOnlyCLICmd'), 'deviceReadOnlyCLICmd', '__csm_ExecDeviceReadOnlyCLICmdsRequest_deviceReadOnlyCLICmd', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 50, 5), )

    
    deviceReadOnlyCLICmd = property(__deviceReadOnlyCLICmd.value, __deviceReadOnlyCLICmd.set, None, None)

    _ElementMap.update({
        __deviceReadOnlyCLICmd.name() : __deviceReadOnlyCLICmd
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ExecDeviceReadOnlyCLICmdsRequest = ExecDeviceReadOnlyCLICmdsRequest
Namespace.addCategoryObject('typeBinding', 'ExecDeviceReadOnlyCLICmdsRequest', ExecDeviceReadOnlyCLICmdsRequest)


# Complex type {csm}ExecDeviceReadOnlyCLICmdsResponse with content type ELEMENT_ONLY
class ExecDeviceReadOnlyCLICmdsResponse (BaseReqResp):
    """Complex type {csm}ExecDeviceReadOnlyCLICmdsResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ExecDeviceReadOnlyCLICmdsResponse')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 56, 1)
    _ElementMap = BaseReqResp._ElementMap.copy()
    _AttributeMap = BaseReqResp._AttributeMap.copy()
    # Base type is BaseReqResp
    
    # Element protVersion (protVersion) inherited from {csm}BaseReqResp
    
    # Element reqId (reqId) inherited from {csm}BaseReqResp
    
    # Element startIndex (startIndex) inherited from {csm}BaseReqResp
    
    # Element endIndex (endIndex) inherited from {csm}BaseReqResp
    
    # Element totalCount (totalCount) inherited from {csm}BaseReqResp
    
    # Element error (error) inherited from {csm}BaseReqResp
    
    # Element deviceCmdResult uses Python identifier deviceCmdResult
    __deviceCmdResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deviceCmdResult'), 'deviceCmdResult', '__csm_ExecDeviceReadOnlyCLICmdsResponse_deviceCmdResult', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 60, 5), )

    
    deviceCmdResult = property(__deviceCmdResult.value, __deviceCmdResult.set, None, None)

    _ElementMap.update({
        __deviceCmdResult.name() : __deviceCmdResult
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ExecDeviceReadOnlyCLICmdsResponse = ExecDeviceReadOnlyCLICmdsResponse
Namespace.addCategoryObject('typeBinding', 'ExecDeviceReadOnlyCLICmdsResponse', ExecDeviceReadOnlyCLICmdsResponse)


# Complex type {csm}NetworkPolicyObject with content type ELEMENT_ONLY
class NetworkPolicyObject (BasePolicyObject):
    """Complex type {csm}NetworkPolicyObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NetworkPolicyObject')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 94, 4)
    _ElementMap = BasePolicyObject._ElementMap.copy()
    _AttributeMap = BasePolicyObject._AttributeMap.copy()
    # Base type is BasePolicyObject
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicyObject
    
    # Element comment (comment) inherited from {csm}BasePolicyObject
    
    # Element nodeGID (nodeGID) inherited from {csm}BasePolicyObject
    
    # Element isProperty (isProperty) inherited from {csm}BasePolicyObject
    
    # Element subType (subType) inherited from {csm}BasePolicyObject
    
    # Element isGroup (isGroup) inherited from {csm}BasePolicyObject
    
    # Element refGIDs (refGIDs) inherited from {csm}BasePolicyObject
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicyObject
    
    # Element configState (configState) inherited from {csm}BasePolicyObject
    
    # Element ipv4Data uses Python identifier ipv4Data
    __ipv4Data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ipv4Data'), 'ipv4Data', '__csm_NetworkPolicyObject_ipv4Data', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 99, 24), )

    
    ipv4Data = property(__ipv4Data.value, __ipv4Data.set, None, None)

    
    # Element ipData uses Python identifier ipData
    __ipData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ipData'), 'ipData', '__csm_NetworkPolicyObject_ipData', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 100, 24), )

    
    ipData = property(__ipData.value, __ipData.set, None, None)

    
    # Element fqdnData uses Python identifier fqdnData
    __fqdnData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fqdnData'), 'fqdnData', '__csm_NetworkPolicyObject_fqdnData', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 102, 20), )

    
    fqdnData = property(__fqdnData.value, __fqdnData.set, None, None)

    _ElementMap.update({
        __ipv4Data.name() : __ipv4Data,
        __ipData.name() : __ipData,
        __fqdnData.name() : __fqdnData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.NetworkPolicyObject = NetworkPolicyObject
Namespace.addCategoryObject('typeBinding', 'NetworkPolicyObject', NetworkPolicyObject)


# Complex type {csm}IdentityUserGroupPolicyObject with content type ELEMENT_ONLY
class IdentityUserGroupPolicyObject (BasePolicyObject):
    """Complex type {csm}IdentityUserGroupPolicyObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IdentityUserGroupPolicyObject')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 123, 4)
    _ElementMap = BasePolicyObject._ElementMap.copy()
    _AttributeMap = BasePolicyObject._AttributeMap.copy()
    # Base type is BasePolicyObject
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicyObject
    
    # Element comment (comment) inherited from {csm}BasePolicyObject
    
    # Element nodeGID (nodeGID) inherited from {csm}BasePolicyObject
    
    # Element isProperty (isProperty) inherited from {csm}BasePolicyObject
    
    # Element subType (subType) inherited from {csm}BasePolicyObject
    
    # Element isGroup (isGroup) inherited from {csm}BasePolicyObject
    
    # Element refGIDs (refGIDs) inherited from {csm}BasePolicyObject
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicyObject
    
    # Element configState (configState) inherited from {csm}BasePolicyObject
    
    # Element userNameData uses Python identifier userNameData
    __userNameData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'userNameData'), 'userNameData', '__csm_IdentityUserGroupPolicyObject_userNameData', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 127, 20), )

    
    userNameData = property(__userNameData.value, __userNameData.set, None, None)

    
    # Element userGroupData uses Python identifier userGroupData
    __userGroupData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'userGroupData'), 'userGroupData', '__csm_IdentityUserGroupPolicyObject_userGroupData', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 128, 20), )

    
    userGroupData = property(__userGroupData.value, __userGroupData.set, None, None)

    _ElementMap.update({
        __userNameData.name() : __userNameData,
        __userGroupData.name() : __userGroupData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.IdentityUserGroupPolicyObject = IdentityUserGroupPolicyObject
Namespace.addCategoryObject('typeBinding', 'IdentityUserGroupPolicyObject', IdentityUserGroupPolicyObject)


# Complex type {csm}SecurityGroupPolicyObject with content type ELEMENT_ONLY
class SecurityGroupPolicyObject (BasePolicyObject):
    """Complex type {csm}SecurityGroupPolicyObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SecurityGroupPolicyObject')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 133, 1)
    _ElementMap = BasePolicyObject._ElementMap.copy()
    _AttributeMap = BasePolicyObject._AttributeMap.copy()
    # Base type is BasePolicyObject
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicyObject
    
    # Element comment (comment) inherited from {csm}BasePolicyObject
    
    # Element nodeGID (nodeGID) inherited from {csm}BasePolicyObject
    
    # Element isProperty (isProperty) inherited from {csm}BasePolicyObject
    
    # Element subType (subType) inherited from {csm}BasePolicyObject
    
    # Element isGroup (isGroup) inherited from {csm}BasePolicyObject
    
    # Element refGIDs (refGIDs) inherited from {csm}BasePolicyObject
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicyObject
    
    # Element configState (configState) inherited from {csm}BasePolicyObject
    
    # Element securityTag uses Python identifier securityTag
    __securityTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'securityTag'), 'securityTag', '__csm_SecurityGroupPolicyObject_securityTag', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 137, 5), )

    
    securityTag = property(__securityTag.value, __securityTag.set, None, None)

    _ElementMap.update({
        __securityTag.name() : __securityTag
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SecurityGroupPolicyObject = SecurityGroupPolicyObject
Namespace.addCategoryObject('typeBinding', 'SecurityGroupPolicyObject', SecurityGroupPolicyObject)


# Complex type {csm}PortListPolicyObject with content type ELEMENT_ONLY
class PortListPolicyObject (BasePolicyObject):
    """Complex type {csm}PortListPolicyObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PortListPolicyObject')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 155, 1)
    _ElementMap = BasePolicyObject._ElementMap.copy()
    _AttributeMap = BasePolicyObject._AttributeMap.copy()
    # Base type is BasePolicyObject
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicyObject
    
    # Element comment (comment) inherited from {csm}BasePolicyObject
    
    # Element nodeGID (nodeGID) inherited from {csm}BasePolicyObject
    
    # Element isProperty (isProperty) inherited from {csm}BasePolicyObject
    
    # Element subType (subType) inherited from {csm}BasePolicyObject
    
    # Element isGroup (isGroup) inherited from {csm}BasePolicyObject
    
    # Element refGIDs (refGIDs) inherited from {csm}BasePolicyObject
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicyObject
    
    # Element configState (configState) inherited from {csm}BasePolicyObject
    
    # Element port uses Python identifier port
    __port = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'port'), 'port', '__csm_PortListPolicyObject_port', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 159, 4), )

    
    port = property(__port.value, __port.set, None, None)

    _ElementMap.update({
        __port.name() : __port
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PortListPolicyObject = PortListPolicyObject
Namespace.addCategoryObject('typeBinding', 'PortListPolicyObject', PortListPolicyObject)


# Complex type {csm}ServicePolicyObject with content type ELEMENT_ONLY
class ServicePolicyObject (BasePolicyObject):
    """Complex type {csm}ServicePolicyObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ServicePolicyObject')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 195, 4)
    _ElementMap = BasePolicyObject._ElementMap.copy()
    _AttributeMap = BasePolicyObject._AttributeMap.copy()
    # Base type is BasePolicyObject
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicyObject
    
    # Element comment (comment) inherited from {csm}BasePolicyObject
    
    # Element nodeGID (nodeGID) inherited from {csm}BasePolicyObject
    
    # Element isProperty (isProperty) inherited from {csm}BasePolicyObject
    
    # Element subType (subType) inherited from {csm}BasePolicyObject
    
    # Element isGroup (isGroup) inherited from {csm}BasePolicyObject
    
    # Element refGIDs (refGIDs) inherited from {csm}BasePolicyObject
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicyObject
    
    # Element configState (configState) inherited from {csm}BasePolicyObject
    
    # Element serviceParameters uses Python identifier serviceParameters
    __serviceParameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serviceParameters'), 'serviceParameters', '__csm_ServicePolicyObject_serviceParameters', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 199, 20), )

    
    serviceParameters = property(__serviceParameters.value, __serviceParameters.set, None, None)

    _ElementMap.update({
        __serviceParameters.name() : __serviceParameters
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ServicePolicyObject = ServicePolicyObject
Namespace.addCategoryObject('typeBinding', 'ServicePolicyObject', ServicePolicyObject)


# Complex type {csm}InterfaceRolePolicyObject with content type ELEMENT_ONLY
class InterfaceRolePolicyObject (BasePolicyObject):
    """Complex type {csm}InterfaceRolePolicyObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterfaceRolePolicyObject')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 206, 4)
    _ElementMap = BasePolicyObject._ElementMap.copy()
    _AttributeMap = BasePolicyObject._AttributeMap.copy()
    # Base type is BasePolicyObject
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicyObject
    
    # Element comment (comment) inherited from {csm}BasePolicyObject
    
    # Element nodeGID (nodeGID) inherited from {csm}BasePolicyObject
    
    # Element isProperty (isProperty) inherited from {csm}BasePolicyObject
    
    # Element subType (subType) inherited from {csm}BasePolicyObject
    
    # Element isGroup (isGroup) inherited from {csm}BasePolicyObject
    
    # Element refGIDs (refGIDs) inherited from {csm}BasePolicyObject
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicyObject
    
    # Element configState (configState) inherited from {csm}BasePolicyObject
    
    # Element pattern uses Python identifier pattern
    __pattern = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pattern'), 'pattern', '__csm_InterfaceRolePolicyObject_pattern', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 210, 20), )

    
    pattern = property(__pattern.value, __pattern.set, None, None)

    _ElementMap.update({
        __pattern.name() : __pattern
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterfaceRolePolicyObject = InterfaceRolePolicyObject
Namespace.addCategoryObject('typeBinding', 'InterfaceRolePolicyObject', InterfaceRolePolicyObject)


# Complex type {csm}TimeRangePolicyObject with content type ELEMENT_ONLY
class TimeRangePolicyObject (BasePolicyObject):
    """Complex type {csm}TimeRangePolicyObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeRangePolicyObject')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 215, 4)
    _ElementMap = BasePolicyObject._ElementMap.copy()
    _AttributeMap = BasePolicyObject._AttributeMap.copy()
    # Base type is BasePolicyObject
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicyObject
    
    # Element comment (comment) inherited from {csm}BasePolicyObject
    
    # Element nodeGID (nodeGID) inherited from {csm}BasePolicyObject
    
    # Element isProperty (isProperty) inherited from {csm}BasePolicyObject
    
    # Element subType (subType) inherited from {csm}BasePolicyObject
    
    # Element isGroup (isGroup) inherited from {csm}BasePolicyObject
    
    # Element refGIDs (refGIDs) inherited from {csm}BasePolicyObject
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicyObject
    
    # Element configState (configState) inherited from {csm}BasePolicyObject
    
    # Element startTime uses Python identifier startTime
    __startTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'startTime'), 'startTime', '__csm_TimeRangePolicyObject_startTime', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 219, 20), )

    
    startTime = property(__startTime.value, __startTime.set, None, None)

    
    # Element endTime uses Python identifier endTime
    __endTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'endTime'), 'endTime', '__csm_TimeRangePolicyObject_endTime', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 220, 20), )

    
    endTime = property(__endTime.value, __endTime.set, None, None)

    
    # Element recurrence uses Python identifier recurrence
    __recurrence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'recurrence'), 'recurrence', '__csm_TimeRangePolicyObject_recurrence', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 221, 20), )

    
    recurrence = property(__recurrence.value, __recurrence.set, None, None)

    _ElementMap.update({
        __startTime.name() : __startTime,
        __endTime.name() : __endTime,
        __recurrence.name() : __recurrence
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TimeRangePolicyObject = TimeRangePolicyObject
Namespace.addCategoryObject('typeBinding', 'TimeRangePolicyObject', TimeRangePolicyObject)


# Complex type {csm}SLAMonitorPolicyObject with content type ELEMENT_ONLY
class SLAMonitorPolicyObject (BasePolicyObject):
    """Complex type {csm}SLAMonitorPolicyObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SLAMonitorPolicyObject')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 250, 4)
    _ElementMap = BasePolicyObject._ElementMap.copy()
    _AttributeMap = BasePolicyObject._AttributeMap.copy()
    # Base type is BasePolicyObject
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicyObject
    
    # Element comment (comment) inherited from {csm}BasePolicyObject
    
    # Element nodeGID (nodeGID) inherited from {csm}BasePolicyObject
    
    # Element isProperty (isProperty) inherited from {csm}BasePolicyObject
    
    # Element subType (subType) inherited from {csm}BasePolicyObject
    
    # Element isGroup (isGroup) inherited from {csm}BasePolicyObject
    
    # Element refGIDs (refGIDs) inherited from {csm}BasePolicyObject
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicyObject
    
    # Element configState (configState) inherited from {csm}BasePolicyObject
    
    # Element slaId uses Python identifier slaId
    __slaId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'slaId'), 'slaId', '__csm_SLAMonitorPolicyObject_slaId', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 254, 20), )

    
    slaId = property(__slaId.value, __slaId.set, None, None)

    
    # Element interfaceGID uses Python identifier interfaceGID
    __interfaceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceGID'), 'interfaceGID', '__csm_SLAMonitorPolicyObject_interfaceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 255, 20), )

    
    interfaceGID = property(__interfaceGID.value, __interfaceGID.set, None, None)

    
    # Element monitoredAddress uses Python identifier monitoredAddress
    __monitoredAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'monitoredAddress'), 'monitoredAddress', '__csm_SLAMonitorPolicyObject_monitoredAddress', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 256, 20), )

    
    monitoredAddress = property(__monitoredAddress.value, __monitoredAddress.set, None, None)

    
    # Element dataSizeInBytes uses Python identifier dataSizeInBytes
    __dataSizeInBytes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dataSizeInBytes'), 'dataSizeInBytes', '__csm_SLAMonitorPolicyObject_dataSizeInBytes', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 257, 20), )

    
    dataSizeInBytes = property(__dataSizeInBytes.value, __dataSizeInBytes.set, None, None)

    
    # Element thresholdInMilliSeconds uses Python identifier thresholdInMilliSeconds
    __thresholdInMilliSeconds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'thresholdInMilliSeconds'), 'thresholdInMilliSeconds', '__csm_SLAMonitorPolicyObject_thresholdInMilliSeconds', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 258, 20), )

    
    thresholdInMilliSeconds = property(__thresholdInMilliSeconds.value, __thresholdInMilliSeconds.set, None, None)

    
    # Element timeoutInMilliSeconds uses Python identifier timeoutInMilliSeconds
    __timeoutInMilliSeconds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'timeoutInMilliSeconds'), 'timeoutInMilliSeconds', '__csm_SLAMonitorPolicyObject_timeoutInMilliSeconds', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 259, 20), )

    
    timeoutInMilliSeconds = property(__timeoutInMilliSeconds.value, __timeoutInMilliSeconds.set, None, None)

    
    # Element frequencyInSeconds uses Python identifier frequencyInSeconds
    __frequencyInSeconds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'frequencyInSeconds'), 'frequencyInSeconds', '__csm_SLAMonitorPolicyObject_frequencyInSeconds', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 260, 20), )

    
    frequencyInSeconds = property(__frequencyInSeconds.value, __frequencyInSeconds.set, None, None)

    
    # Element toS uses Python identifier toS
    __toS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'toS'), 'toS', '__csm_SLAMonitorPolicyObject_toS', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 261, 20), )

    
    toS = property(__toS.value, __toS.set, None, None)

    
    # Element numberOfPackets uses Python identifier numberOfPackets
    __numberOfPackets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'numberOfPackets'), 'numberOfPackets', '__csm_SLAMonitorPolicyObject_numberOfPackets', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 262, 20), )

    
    numberOfPackets = property(__numberOfPackets.value, __numberOfPackets.set, None, None)

    _ElementMap.update({
        __slaId.name() : __slaId,
        __interfaceGID.name() : __interfaceGID,
        __monitoredAddress.name() : __monitoredAddress,
        __dataSizeInBytes.name() : __dataSizeInBytes,
        __thresholdInMilliSeconds.name() : __thresholdInMilliSeconds,
        __timeoutInMilliSeconds.name() : __timeoutInMilliSeconds,
        __frequencyInSeconds.name() : __frequencyInSeconds,
        __toS.name() : __toS,
        __numberOfPackets.name() : __numberOfPackets
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SLAMonitorPolicyObject = SLAMonitorPolicyObject
Namespace.addCategoryObject('typeBinding', 'SLAMonitorPolicyObject', SLAMonitorPolicyObject)


# Complex type {csm}StandardACEPolicyObject with content type ELEMENT_ONLY
class StandardACEPolicyObject (BasePolicyObject):
    """Complex type {csm}StandardACEPolicyObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StandardACEPolicyObject')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 267, 4)
    _ElementMap = BasePolicyObject._ElementMap.copy()
    _AttributeMap = BasePolicyObject._AttributeMap.copy()
    # Base type is BasePolicyObject
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicyObject
    
    # Element comment (comment) inherited from {csm}BasePolicyObject
    
    # Element nodeGID (nodeGID) inherited from {csm}BasePolicyObject
    
    # Element isProperty (isProperty) inherited from {csm}BasePolicyObject
    
    # Element subType (subType) inherited from {csm}BasePolicyObject
    
    # Element isGroup (isGroup) inherited from {csm}BasePolicyObject
    
    # Element refGIDs (refGIDs) inherited from {csm}BasePolicyObject
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicyObject
    
    # Element configState (configState) inherited from {csm}BasePolicyObject
    
    # Element networkGID uses Python identifier networkGID
    __networkGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'networkGID'), 'networkGID', '__csm_StandardACEPolicyObject_networkGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 271, 20), )

    
    networkGID = property(__networkGID.value, __networkGID.set, None, None)

    
    # Element doLogging uses Python identifier doLogging
    __doLogging = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doLogging'), 'doLogging', '__csm_StandardACEPolicyObject_doLogging', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 272, 20), )

    
    doLogging = property(__doLogging.value, __doLogging.set, None, None)

    
    # Element permit uses Python identifier permit
    __permit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'permit'), 'permit', '__csm_StandardACEPolicyObject_permit', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 273, 20), )

    
    permit = property(__permit.value, __permit.set, None, None)

    _ElementMap.update({
        __networkGID.name() : __networkGID,
        __doLogging.name() : __doLogging,
        __permit.name() : __permit
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.StandardACEPolicyObject = StandardACEPolicyObject
Namespace.addCategoryObject('typeBinding', 'StandardACEPolicyObject', StandardACEPolicyObject)


# Complex type {csm}ExtendedACEPolicyObject with content type ELEMENT_ONLY
class ExtendedACEPolicyObject (BasePolicyObject):
    """Complex type {csm}ExtendedACEPolicyObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ExtendedACEPolicyObject')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 278, 4)
    _ElementMap = BasePolicyObject._ElementMap.copy()
    _AttributeMap = BasePolicyObject._AttributeMap.copy()
    # Base type is BasePolicyObject
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicyObject
    
    # Element comment (comment) inherited from {csm}BasePolicyObject
    
    # Element nodeGID (nodeGID) inherited from {csm}BasePolicyObject
    
    # Element isProperty (isProperty) inherited from {csm}BasePolicyObject
    
    # Element subType (subType) inherited from {csm}BasePolicyObject
    
    # Element isGroup (isGroup) inherited from {csm}BasePolicyObject
    
    # Element refGIDs (refGIDs) inherited from {csm}BasePolicyObject
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicyObject
    
    # Element configState (configState) inherited from {csm}BasePolicyObject
    
    # Element sourceGID uses Python identifier sourceGID
    __sourceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sourceGID'), 'sourceGID', '__csm_ExtendedACEPolicyObject_sourceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 282, 4), )

    
    sourceGID = property(__sourceGID.value, __sourceGID.set, None, None)

    
    # Element destinationGID uses Python identifier destinationGID
    __destinationGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'destinationGID'), 'destinationGID', '__csm_ExtendedACEPolicyObject_destinationGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 283, 4), )

    
    destinationGID = property(__destinationGID.value, __destinationGID.set, None, None)

    
    # Element serviceGID uses Python identifier serviceGID
    __serviceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serviceGID'), 'serviceGID', '__csm_ExtendedACEPolicyObject_serviceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 284, 4), )

    
    serviceGID = property(__serviceGID.value, __serviceGID.set, None, None)

    
    # Element doLogging uses Python identifier doLogging
    __doLogging = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'doLogging'), 'doLogging', '__csm_ExtendedACEPolicyObject_doLogging', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 285, 4), )

    
    doLogging = property(__doLogging.value, __doLogging.set, None, None)

    
    # Element logInterval uses Python identifier logInterval
    __logInterval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'logInterval'), 'logInterval', '__csm_ExtendedACEPolicyObject_logInterval', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 286, 4), )

    
    logInterval = property(__logInterval.value, __logInterval.set, None, None)

    
    # Element logLevel uses Python identifier logLevel
    __logLevel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'logLevel'), 'logLevel', '__csm_ExtendedACEPolicyObject_logLevel', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 287, 4), )

    
    logLevel = property(__logLevel.value, __logLevel.set, None, None)

    
    # Element logOption uses Python identifier logOption
    __logOption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'logOption'), 'logOption', '__csm_ExtendedACEPolicyObject_logOption', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 288, 4), )

    
    logOption = property(__logOption.value, __logOption.set, None, None)

    
    # Element permit uses Python identifier permit
    __permit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'permit'), 'permit', '__csm_ExtendedACEPolicyObject_permit', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 289, 4), )

    
    permit = property(__permit.value, __permit.set, None, None)

    _ElementMap.update({
        __sourceGID.name() : __sourceGID,
        __destinationGID.name() : __destinationGID,
        __serviceGID.name() : __serviceGID,
        __doLogging.name() : __doLogging,
        __logInterval.name() : __logInterval,
        __logLevel.name() : __logLevel,
        __logOption.name() : __logOption,
        __permit.name() : __permit
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ExtendedACEPolicyObject = ExtendedACEPolicyObject
Namespace.addCategoryObject('typeBinding', 'ExtendedACEPolicyObject', ExtendedACEPolicyObject)


# Complex type {csm}ACLPolicyObject with content type ELEMENT_ONLY
class ACLPolicyObject (BasePolicyObject):
    """Complex type {csm}ACLPolicyObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ACLPolicyObject')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 294, 0)
    _ElementMap = BasePolicyObject._ElementMap.copy()
    _AttributeMap = BasePolicyObject._AttributeMap.copy()
    # Base type is BasePolicyObject
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicyObject
    
    # Element comment (comment) inherited from {csm}BasePolicyObject
    
    # Element nodeGID (nodeGID) inherited from {csm}BasePolicyObject
    
    # Element isProperty (isProperty) inherited from {csm}BasePolicyObject
    
    # Element subType (subType) inherited from {csm}BasePolicyObject
    
    # Element isGroup (isGroup) inherited from {csm}BasePolicyObject
    
    # Element refGIDs (refGIDs) inherited from {csm}BasePolicyObject
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicyObject
    
    # Element configState (configState) inherited from {csm}BasePolicyObject
    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__csm_ACLPolicyObject_references', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 298, 20), )

    
    references = property(__references.value, __references.set, None, None)

    _ElementMap.update({
        __references.name() : __references
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ACLPolicyObject = ACLPolicyObject
Namespace.addCategoryObject('typeBinding', 'ACLPolicyObject', ACLPolicyObject)


# Complex type {csm}DeviceAccessRuleFirewallPolicy with content type ELEMENT_ONLY
class DeviceAccessRuleFirewallPolicy (BasePolicy):
    """Complex type {csm}DeviceAccessRuleFirewallPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceAccessRuleFirewallPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 313, 4)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element isEnabled uses Python identifier isEnabled
    __isEnabled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isEnabled'), 'isEnabled', '__csm_DeviceAccessRuleFirewallPolicy_isEnabled', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 317, 20), )

    
    isEnabled = property(__isEnabled.value, __isEnabled.set, None, None)

    
    # Element direction uses Python identifier direction
    __direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'direction'), 'direction', '__csm_DeviceAccessRuleFirewallPolicy_direction', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 318, 20), )

    
    direction = property(__direction.value, __direction.set, None, None)

    
    # Element permit uses Python identifier permit
    __permit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'permit'), 'permit', '__csm_DeviceAccessRuleFirewallPolicy_permit', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 326, 20), )

    
    permit = property(__permit.value, __permit.set, None, None)

    
    # Element sectionName uses Python identifier sectionName
    __sectionName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sectionName'), 'sectionName', '__csm_DeviceAccessRuleFirewallPolicy_sectionName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 327, 20), )

    
    sectionName = property(__sectionName.value, __sectionName.set, None, None)

    
    # Element policyName uses Python identifier policyName
    __policyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyName'), 'policyName', '__csm_DeviceAccessRuleFirewallPolicy_policyName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 328, 20), )

    
    policyName = property(__policyName.value, __policyName.set, None, None)

    
    # Element interfaceRoleObjectGIDs uses Python identifier interfaceRoleObjectGIDs
    __interfaceRoleObjectGIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceRoleObjectGIDs'), 'interfaceRoleObjectGIDs', '__csm_DeviceAccessRuleFirewallPolicy_interfaceRoleObjectGIDs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 329, 20), )

    
    interfaceRoleObjectGIDs = property(__interfaceRoleObjectGIDs.value, __interfaceRoleObjectGIDs.set, None, None)

    
    # Element users uses Python identifier users
    __users = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'users'), 'users', '__csm_DeviceAccessRuleFirewallPolicy_users', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 330, 20), )

    
    users = property(__users.value, __users.set, None, None)

    
    # Element sources uses Python identifier sources
    __sources = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sources'), 'sources', '__csm_DeviceAccessRuleFirewallPolicy_sources', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 331, 20), )

    
    sources = property(__sources.value, __sources.set, None, None)

    
    # Element destinations uses Python identifier destinations
    __destinations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'destinations'), 'destinations', '__csm_DeviceAccessRuleFirewallPolicy_destinations', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 332, 20), )

    
    destinations = property(__destinations.value, __destinations.set, None, None)

    
    # Element services uses Python identifier services
    __services = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'services'), 'services', '__csm_DeviceAccessRuleFirewallPolicy_services', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 333, 20), )

    
    services = property(__services.value, __services.set, None, None)

    
    # Element logOptions uses Python identifier logOptions
    __logOptions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'logOptions'), 'logOptions', '__csm_DeviceAccessRuleFirewallPolicy_logOptions', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 341, 20), )

    
    logOptions = property(__logOptions.value, __logOptions.set, None, None)

    
    # Element iosOptions uses Python identifier iosOptions
    __iosOptions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'iosOptions'), 'iosOptions', '__csm_DeviceAccessRuleFirewallPolicy_iosOptions', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 357, 20), )

    
    iosOptions = property(__iosOptions.value, __iosOptions.set, None, None)

    
    # Element timeRangeObjectGID uses Python identifier timeRangeObjectGID
    __timeRangeObjectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'timeRangeObjectGID'), 'timeRangeObjectGID', '__csm_DeviceAccessRuleFirewallPolicy_timeRangeObjectGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 366, 20), )

    
    timeRangeObjectGID = property(__timeRangeObjectGID.value, __timeRangeObjectGID.set, None, None)

    _ElementMap.update({
        __isEnabled.name() : __isEnabled,
        __direction.name() : __direction,
        __permit.name() : __permit,
        __sectionName.name() : __sectionName,
        __policyName.name() : __policyName,
        __interfaceRoleObjectGIDs.name() : __interfaceRoleObjectGIDs,
        __users.name() : __users,
        __sources.name() : __sources,
        __destinations.name() : __destinations,
        __services.name() : __services,
        __logOptions.name() : __logOptions,
        __iosOptions.name() : __iosOptions,
        __timeRangeObjectGID.name() : __timeRangeObjectGID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceAccessRuleFirewallPolicy = DeviceAccessRuleFirewallPolicy
Namespace.addCategoryObject('typeBinding', 'DeviceAccessRuleFirewallPolicy', DeviceAccessRuleFirewallPolicy)


# Complex type {csm}DeviceStaticRoutingFirewallPolicy with content type ELEMENT_ONLY
class DeviceStaticRoutingFirewallPolicy (BasePolicy):
    """Complex type {csm}DeviceStaticRoutingFirewallPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceStaticRoutingFirewallPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 852, 4)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element interfaceGID uses Python identifier interfaceGID
    __interfaceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceGID'), 'interfaceGID', '__csm_DeviceStaticRoutingFirewallPolicy_interfaceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 856, 20), )

    
    interfaceGID = property(__interfaceGID.value, __interfaceGID.set, None, None)

    
    # Element networks uses Python identifier networks
    __networks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'networks'), 'networks', '__csm_DeviceStaticRoutingFirewallPolicy_networks', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 857, 20), )

    
    networks = property(__networks.value, __networks.set, None, None)

    
    # Element gateway uses Python identifier gateway
    __gateway = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gateway'), 'gateway', '__csm_DeviceStaticRoutingFirewallPolicy_gateway', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 858, 20), )

    
    gateway = property(__gateway.value, __gateway.set, None, None)

    
    # Element metric uses Python identifier metric
    __metric = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'metric'), 'metric', '__csm_DeviceStaticRoutingFirewallPolicy_metric', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 859, 20), )

    
    metric = property(__metric.value, __metric.set, None, None)

    
    # Element tunnelled uses Python identifier tunnelled
    __tunnelled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'tunnelled'), 'tunnelled', '__csm_DeviceStaticRoutingFirewallPolicy_tunnelled', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 860, 20), )

    
    tunnelled = property(__tunnelled.value, __tunnelled.set, None, None)

    
    # Element slaMonitorGID uses Python identifier slaMonitorGID
    __slaMonitorGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'slaMonitorGID'), 'slaMonitorGID', '__csm_DeviceStaticRoutingFirewallPolicy_slaMonitorGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 861, 20), )

    
    slaMonitorGID = property(__slaMonitorGID.value, __slaMonitorGID.set, None, None)

    _ElementMap.update({
        __interfaceGID.name() : __interfaceGID,
        __networks.name() : __networks,
        __gateway.name() : __gateway,
        __metric.name() : __metric,
        __tunnelled.name() : __tunnelled,
        __slaMonitorGID.name() : __slaMonitorGID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceStaticRoutingFirewallPolicy = DeviceStaticRoutingFirewallPolicy
Namespace.addCategoryObject('typeBinding', 'DeviceStaticRoutingFirewallPolicy', DeviceStaticRoutingFirewallPolicy)


# Complex type {csm}DeviceStaticRoutingRouterPolicy with content type ELEMENT_ONLY
class DeviceStaticRoutingRouterPolicy (BasePolicy):
    """Complex type {csm}DeviceStaticRoutingRouterPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceStaticRoutingRouterPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 866, 4)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element destinationNetwork uses Python identifier destinationNetwork
    __destinationNetwork = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'destinationNetwork'), 'destinationNetwork', '__csm_DeviceStaticRoutingRouterPolicy_destinationNetwork', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 870, 20), )

    
    destinationNetwork = property(__destinationNetwork.value, __destinationNetwork.set, None, None)

    
    # Element fowarding uses Python identifier fowarding
    __fowarding = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fowarding'), 'fowarding', '__csm_DeviceStaticRoutingRouterPolicy_fowarding', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 878, 20), )

    
    fowarding = property(__fowarding.value, __fowarding.set, None, None)

    
    # Element distanceMetric uses Python identifier distanceMetric
    __distanceMetric = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'distanceMetric'), 'distanceMetric', '__csm_DeviceStaticRoutingRouterPolicy_distanceMetric', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 886, 20), )

    
    distanceMetric = property(__distanceMetric.value, __distanceMetric.set, None, None)

    
    # Element isPermanentRoute uses Python identifier isPermanentRoute
    __isPermanentRoute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isPermanentRoute'), 'isPermanentRoute', '__csm_DeviceStaticRoutingRouterPolicy_isPermanentRoute', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 887, 20), )

    
    isPermanentRoute = property(__isPermanentRoute.value, __isPermanentRoute.set, None, None)

    _ElementMap.update({
        __destinationNetwork.name() : __destinationNetwork,
        __fowarding.name() : __fowarding,
        __distanceMetric.name() : __distanceMetric,
        __isPermanentRoute.name() : __isPermanentRoute
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceStaticRoutingRouterPolicy = DeviceStaticRoutingRouterPolicy
Namespace.addCategoryObject('typeBinding', 'DeviceStaticRoutingRouterPolicy', DeviceStaticRoutingRouterPolicy)


# Complex type {csm}DeviceBGPRouterPolicy with content type ELEMENT_ONLY
class DeviceBGPRouterPolicy (BasePolicy):
    """Complex type {csm}DeviceBGPRouterPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceBGPRouterPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1251, 4)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element asNumber uses Python identifier asNumber
    __asNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'asNumber'), 'asNumber', '__csm_DeviceBGPRouterPolicy_asNumber', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1255, 20), )

    
    asNumber = property(__asNumber.value, __asNumber.set, None, None)

    
    # Element networks uses Python identifier networks
    __networks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'networks'), 'networks', '__csm_DeviceBGPRouterPolicy_networks', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1256, 20), )

    
    networks = property(__networks.value, __networks.set, None, None)

    
    # Element neighbors uses Python identifier neighbors
    __neighbors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'neighbors'), 'neighbors', '__csm_DeviceBGPRouterPolicy_neighbors', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1257, 20), )

    
    neighbors = property(__neighbors.value, __neighbors.set, None, None)

    
    # Element autoSummary uses Python identifier autoSummary
    __autoSummary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'autoSummary'), 'autoSummary', '__csm_DeviceBGPRouterPolicy_autoSummary', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1265, 20), )

    
    autoSummary = property(__autoSummary.value, __autoSummary.set, None, None)

    
    # Element synchronization uses Python identifier synchronization
    __synchronization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'synchronization'), 'synchronization', '__csm_DeviceBGPRouterPolicy_synchronization', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1266, 20), )

    
    synchronization = property(__synchronization.value, __synchronization.set, None, None)

    
    # Element logNeighbor uses Python identifier logNeighbor
    __logNeighbor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'logNeighbor'), 'logNeighbor', '__csm_DeviceBGPRouterPolicy_logNeighbor', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1267, 20), )

    
    logNeighbor = property(__logNeighbor.value, __logNeighbor.set, None, None)

    
    # Element redistributionEntry uses Python identifier redistributionEntry
    __redistributionEntry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'redistributionEntry'), 'redistributionEntry', '__csm_DeviceBGPRouterPolicy_redistributionEntry', True, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1268, 20), )

    
    redistributionEntry = property(__redistributionEntry.value, __redistributionEntry.set, None, None)

    _ElementMap.update({
        __asNumber.name() : __asNumber,
        __networks.name() : __networks,
        __neighbors.name() : __neighbors,
        __autoSummary.name() : __autoSummary,
        __synchronization.name() : __synchronization,
        __logNeighbor.name() : __logNeighbor,
        __redistributionEntry.name() : __redistributionEntry
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceBGPRouterPolicy = DeviceBGPRouterPolicy
Namespace.addCategoryObject('typeBinding', 'DeviceBGPRouterPolicy', DeviceBGPRouterPolicy)


# Complex type {csm}InterfaceNATRouterPolicy with content type ELEMENT_ONLY
class InterfaceNATRouterPolicy (BasePolicy):
    """Complex type {csm}InterfaceNATRouterPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterfaceNATRouterPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1320, 4)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element interfaceGID uses Python identifier interfaceGID
    __interfaceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceGID'), 'interfaceGID', '__csm_InterfaceNATRouterPolicy_interfaceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1324, 19), )

    
    interfaceGID = property(__interfaceGID.value, __interfaceGID.set, None, None)

    
    # Element isNatInside uses Python identifier isNatInside
    __isNatInside = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isNatInside'), 'isNatInside', '__csm_InterfaceNATRouterPolicy_isNatInside', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1325, 19), )

    
    isNatInside = property(__isNatInside.value, __isNatInside.set, None, None)

    _ElementMap.update({
        __interfaceGID.name() : __interfaceGID,
        __isNatInside.name() : __isNatInside
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterfaceNATRouterPolicy = InterfaceNATRouterPolicy
Namespace.addCategoryObject('typeBinding', 'InterfaceNATRouterPolicy', InterfaceNATRouterPolicy)


# Complex type {csm}InterfaceNATStaticRulesRouterPolicy with content type ELEMENT_ONLY
class InterfaceNATStaticRulesRouterPolicy (BasePolicy):
    """Complex type {csm}InterfaceNATStaticRulesRouterPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterfaceNATStaticRulesRouterPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1330, 4)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element staticRuleType uses Python identifier staticRuleType
    __staticRuleType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'staticRuleType'), 'staticRuleType', '__csm_InterfaceNATStaticRulesRouterPolicy_staticRuleType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1334, 20), )

    
    staticRuleType = property(__staticRuleType.value, __staticRuleType.set, None, None)

    
    # Element original uses Python identifier original
    __original = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'original'), 'original', '__csm_InterfaceNATStaticRulesRouterPolicy_original', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1343, 20), )

    
    original = property(__original.value, __original.set, None, None)

    
    # Element translated uses Python identifier translated
    __translated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'translated'), 'translated', '__csm_InterfaceNATStaticRulesRouterPolicy_translated', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1344, 20), )

    
    translated = property(__translated.value, __translated.set, None, None)

    
    # Element portRedirection uses Python identifier portRedirection
    __portRedirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'portRedirection'), 'portRedirection', '__csm_InterfaceNATStaticRulesRouterPolicy_portRedirection', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1352, 20), )

    
    portRedirection = property(__portRedirection.value, __portRedirection.set, None, None)

    
    # Element settings uses Python identifier settings
    __settings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'settings'), 'settings', '__csm_InterfaceNATStaticRulesRouterPolicy_settings', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1361, 20), )

    
    settings = property(__settings.value, __settings.set, None, None)

    _ElementMap.update({
        __staticRuleType.name() : __staticRuleType,
        __original.name() : __original,
        __translated.name() : __translated,
        __portRedirection.name() : __portRedirection,
        __settings.name() : __settings
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterfaceNATStaticRulesRouterPolicy = InterfaceNATStaticRulesRouterPolicy
Namespace.addCategoryObject('typeBinding', 'InterfaceNATStaticRulesRouterPolicy', InterfaceNATStaticRulesRouterPolicy)


# Complex type {csm}InterfaceNATDynamicRulesRouterPolicy with content type ELEMENT_ONLY
class InterfaceNATDynamicRulesRouterPolicy (BasePolicy):
    """Complex type {csm}InterfaceNATDynamicRulesRouterPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterfaceNATDynamicRulesRouterPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1374, 4)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element trafficFlowAclObjectGID uses Python identifier trafficFlowAclObjectGID
    __trafficFlowAclObjectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'trafficFlowAclObjectGID'), 'trafficFlowAclObjectGID', '__csm_InterfaceNATDynamicRulesRouterPolicy_trafficFlowAclObjectGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1378, 20), )

    
    trafficFlowAclObjectGID = property(__trafficFlowAclObjectGID.value, __trafficFlowAclObjectGID.set, None, None)

    
    # Element translated uses Python identifier translated
    __translated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'translated'), 'translated', '__csm_InterfaceNATDynamicRulesRouterPolicy_translated', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1379, 20), )

    
    translated = property(__translated.value, __translated.set, None, None)

    
    # Element settings uses Python identifier settings
    __settings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'settings'), 'settings', '__csm_InterfaceNATDynamicRulesRouterPolicy_settings', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1387, 20), )

    
    settings = property(__settings.value, __settings.set, None, None)

    _ElementMap.update({
        __trafficFlowAclObjectGID.name() : __trafficFlowAclObjectGID,
        __translated.name() : __translated,
        __settings.name() : __settings
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterfaceNATDynamicRulesRouterPolicy = InterfaceNATDynamicRulesRouterPolicy
Namespace.addCategoryObject('typeBinding', 'InterfaceNATDynamicRulesRouterPolicy', InterfaceNATDynamicRulesRouterPolicy)


# Complex type {csm}DeviceNATTimeoutsRouterPolicy with content type ELEMENT_ONLY
class DeviceNATTimeoutsRouterPolicy (BasePolicy):
    """Complex type {csm}DeviceNATTimeoutsRouterPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceNATTimeoutsRouterPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1399, 4)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element maxEntriesInSecs uses Python identifier maxEntriesInSecs
    __maxEntriesInSecs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'maxEntriesInSecs'), 'maxEntriesInSecs', '__csm_DeviceNATTimeoutsRouterPolicy_maxEntriesInSecs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1403, 20), )

    
    maxEntriesInSecs = property(__maxEntriesInSecs.value, __maxEntriesInSecs.set, None, None)

    
    # Element timeoutInSecs uses Python identifier timeoutInSecs
    __timeoutInSecs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'timeoutInSecs'), 'timeoutInSecs', '__csm_DeviceNATTimeoutsRouterPolicy_timeoutInSecs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1404, 20), )

    
    timeoutInSecs = property(__timeoutInSecs.value, __timeoutInSecs.set, None, None)

    
    # Element udpTimeoutInSecs uses Python identifier udpTimeoutInSecs
    __udpTimeoutInSecs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'udpTimeoutInSecs'), 'udpTimeoutInSecs', '__csm_DeviceNATTimeoutsRouterPolicy_udpTimeoutInSecs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1405, 20), )

    
    udpTimeoutInSecs = property(__udpTimeoutInSecs.value, __udpTimeoutInSecs.set, None, None)

    
    # Element dnsTimeoutInSecs uses Python identifier dnsTimeoutInSecs
    __dnsTimeoutInSecs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dnsTimeoutInSecs'), 'dnsTimeoutInSecs', '__csm_DeviceNATTimeoutsRouterPolicy_dnsTimeoutInSecs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1406, 20), )

    
    dnsTimeoutInSecs = property(__dnsTimeoutInSecs.value, __dnsTimeoutInSecs.set, None, None)

    
    # Element tcpTimeoutInSecs uses Python identifier tcpTimeoutInSecs
    __tcpTimeoutInSecs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'tcpTimeoutInSecs'), 'tcpTimeoutInSecs', '__csm_DeviceNATTimeoutsRouterPolicy_tcpTimeoutInSecs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1407, 20), )

    
    tcpTimeoutInSecs = property(__tcpTimeoutInSecs.value, __tcpTimeoutInSecs.set, None, None)

    
    # Element finRstTimeoutInSecs uses Python identifier finRstTimeoutInSecs
    __finRstTimeoutInSecs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'finRstTimeoutInSecs'), 'finRstTimeoutInSecs', '__csm_DeviceNATTimeoutsRouterPolicy_finRstTimeoutInSecs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1408, 20), )

    
    finRstTimeoutInSecs = property(__finRstTimeoutInSecs.value, __finRstTimeoutInSecs.set, None, None)

    
    # Element icmpTimeoutInSecs uses Python identifier icmpTimeoutInSecs
    __icmpTimeoutInSecs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'icmpTimeoutInSecs'), 'icmpTimeoutInSecs', '__csm_DeviceNATTimeoutsRouterPolicy_icmpTimeoutInSecs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1409, 20), )

    
    icmpTimeoutInSecs = property(__icmpTimeoutInSecs.value, __icmpTimeoutInSecs.set, None, None)

    
    # Element pptpTimeoutInSecs uses Python identifier pptpTimeoutInSecs
    __pptpTimeoutInSecs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pptpTimeoutInSecs'), 'pptpTimeoutInSecs', '__csm_DeviceNATTimeoutsRouterPolicy_pptpTimeoutInSecs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1410, 20), )

    
    pptpTimeoutInSecs = property(__pptpTimeoutInSecs.value, __pptpTimeoutInSecs.set, None, None)

    
    # Element synTimeoutInSecs uses Python identifier synTimeoutInSecs
    __synTimeoutInSecs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'synTimeoutInSecs'), 'synTimeoutInSecs', '__csm_DeviceNATTimeoutsRouterPolicy_synTimeoutInSecs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1411, 20), )

    
    synTimeoutInSecs = property(__synTimeoutInSecs.value, __synTimeoutInSecs.set, None, None)

    _ElementMap.update({
        __maxEntriesInSecs.name() : __maxEntriesInSecs,
        __timeoutInSecs.name() : __timeoutInSecs,
        __udpTimeoutInSecs.name() : __udpTimeoutInSecs,
        __dnsTimeoutInSecs.name() : __dnsTimeoutInSecs,
        __tcpTimeoutInSecs.name() : __tcpTimeoutInSecs,
        __finRstTimeoutInSecs.name() : __finRstTimeoutInSecs,
        __icmpTimeoutInSecs.name() : __icmpTimeoutInSecs,
        __pptpTimeoutInSecs.name() : __pptpTimeoutInSecs,
        __synTimeoutInSecs.name() : __synTimeoutInSecs
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceNATTimeoutsRouterPolicy = DeviceNATTimeoutsRouterPolicy
Namespace.addCategoryObject('typeBinding', 'DeviceNATTimeoutsRouterPolicy', DeviceNATTimeoutsRouterPolicy)


# Complex type {csm}InterfaceNATAddressPoolFirewallPolicy with content type ELEMENT_ONLY
class InterfaceNATAddressPoolFirewallPolicy (BasePolicy):
    """Complex type {csm}InterfaceNATAddressPoolFirewallPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterfaceNATAddressPoolFirewallPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1437, 4)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element interfaceGID uses Python identifier interfaceGID
    __interfaceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceGID'), 'interfaceGID', '__csm_InterfaceNATAddressPoolFirewallPolicy_interfaceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1441, 20), )

    
    interfaceGID = property(__interfaceGID.value, __interfaceGID.set, None, None)

    
    # Element poolId uses Python identifier poolId
    __poolId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'poolId'), 'poolId', '__csm_InterfaceNATAddressPoolFirewallPolicy_poolId', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1442, 20), )

    
    poolId = property(__poolId.value, __poolId.set, None, None)

    
    # Element ipAddressRange uses Python identifier ipAddressRange
    __ipAddressRange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ipAddressRange'), 'ipAddressRange', '__csm_InterfaceNATAddressPoolFirewallPolicy_ipAddressRange', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1443, 20), )

    
    ipAddressRange = property(__ipAddressRange.value, __ipAddressRange.set, None, None)

    
    # Element interfaceKeyword uses Python identifier interfaceKeyword
    __interfaceKeyword = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceKeyword'), 'interfaceKeyword', '__csm_InterfaceNATAddressPoolFirewallPolicy_interfaceKeyword', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1444, 20), )

    
    interfaceKeyword = property(__interfaceKeyword.value, __interfaceKeyword.set, None, None)

    _ElementMap.update({
        __interfaceGID.name() : __interfaceGID,
        __poolId.name() : __poolId,
        __ipAddressRange.name() : __ipAddressRange,
        __interfaceKeyword.name() : __interfaceKeyword
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterfaceNATAddressPoolFirewallPolicy = InterfaceNATAddressPoolFirewallPolicy
Namespace.addCategoryObject('typeBinding', 'InterfaceNATAddressPoolFirewallPolicy', InterfaceNATAddressPoolFirewallPolicy)


# Complex type {csm}DeviceNATTransOptionsFirewallPolicy with content type ELEMENT_ONLY
class DeviceNATTransOptionsFirewallPolicy (BasePolicy):
    """Complex type {csm}DeviceNATTransOptionsFirewallPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceNATTransOptionsFirewallPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1449, 4)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element isEnableTrafficWithoutTrans uses Python identifier isEnableTrafficWithoutTrans
    __isEnableTrafficWithoutTrans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isEnableTrafficWithoutTrans'), 'isEnableTrafficWithoutTrans', '__csm_DeviceNATTransOptionsFirewallPolicy_isEnableTrafficWithoutTrans', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1453, 20), )

    
    isEnableTrafficWithoutTrans = property(__isEnableTrafficWithoutTrans.value, __isEnableTrafficWithoutTrans.set, None, None)

    
    # Element isXlateByPass uses Python identifier isXlateByPass
    __isXlateByPass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isXlateByPass'), 'isXlateByPass', '__csm_DeviceNATTransOptionsFirewallPolicy_isXlateByPass', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1455, 20), )

    
    isXlateByPass = property(__isXlateByPass.value, __isXlateByPass.set, None, None)

    _ElementMap.update({
        __isEnableTrafficWithoutTrans.name() : __isEnableTrafficWithoutTrans,
        __isXlateByPass.name() : __isXlateByPass
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceNATTransOptionsFirewallPolicy = DeviceNATTransOptionsFirewallPolicy
Namespace.addCategoryObject('typeBinding', 'DeviceNATTransOptionsFirewallPolicy', DeviceNATTransOptionsFirewallPolicy)


# Complex type {csm}InterfaceNATTransExemptionsFirewallPolicy with content type ELEMENT_ONLY
class InterfaceNATTransExemptionsFirewallPolicy (BasePolicy):
    """Complex type {csm}InterfaceNATTransExemptionsFirewallPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterfaceNATTransExemptionsFirewallPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1460, 4)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element isRuleEnabled uses Python identifier isRuleEnabled
    __isRuleEnabled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isRuleEnabled'), 'isRuleEnabled', '__csm_InterfaceNATTransExemptionsFirewallPolicy_isRuleEnabled', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1464, 20), )

    
    isRuleEnabled = property(__isRuleEnabled.value, __isRuleEnabled.set, None, None)

    
    # Element isExempt uses Python identifier isExempt
    __isExempt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isExempt'), 'isExempt', '__csm_InterfaceNATTransExemptionsFirewallPolicy_isExempt', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1465, 20), )

    
    isExempt = property(__isExempt.value, __isExempt.set, None, None)

    
    # Element realInterfaceGID uses Python identifier realInterfaceGID
    __realInterfaceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'realInterfaceGID'), 'realInterfaceGID', '__csm_InterfaceNATTransExemptionsFirewallPolicy_realInterfaceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1466, 20), )

    
    realInterfaceGID = property(__realInterfaceGID.value, __realInterfaceGID.set, None, None)

    
    # Element original uses Python identifier original
    __original = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'original'), 'original', '__csm_InterfaceNATTransExemptionsFirewallPolicy_original', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1467, 20), )

    
    original = property(__original.value, __original.set, None, None)

    
    # Element outsideNAT uses Python identifier outsideNAT
    __outsideNAT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'outsideNAT'), 'outsideNAT', '__csm_InterfaceNATTransExemptionsFirewallPolicy_outsideNAT', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1468, 20), )

    
    outsideNAT = property(__outsideNAT.value, __outsideNAT.set, None, None)

    
    # Element destinations uses Python identifier destinations
    __destinations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'destinations'), 'destinations', '__csm_InterfaceNATTransExemptionsFirewallPolicy_destinations', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1469, 20), )

    
    destinations = property(__destinations.value, __destinations.set, None, None)

    
    # Element fwsmAdvancedOptions uses Python identifier fwsmAdvancedOptions
    __fwsmAdvancedOptions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fwsmAdvancedOptions'), 'fwsmAdvancedOptions', '__csm_InterfaceNATTransExemptionsFirewallPolicy_fwsmAdvancedOptions', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1470, 20), )

    
    fwsmAdvancedOptions = property(__fwsmAdvancedOptions.value, __fwsmAdvancedOptions.set, None, None)

    _ElementMap.update({
        __isRuleEnabled.name() : __isRuleEnabled,
        __isExempt.name() : __isExempt,
        __realInterfaceGID.name() : __realInterfaceGID,
        __original.name() : __original,
        __outsideNAT.name() : __outsideNAT,
        __destinations.name() : __destinations,
        __fwsmAdvancedOptions.name() : __fwsmAdvancedOptions
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterfaceNATTransExemptionsFirewallPolicy = InterfaceNATTransExemptionsFirewallPolicy
Namespace.addCategoryObject('typeBinding', 'InterfaceNATTransExemptionsFirewallPolicy', InterfaceNATTransExemptionsFirewallPolicy)


# Complex type {csm}InterfaceNATDynamicRulesFirewallPolicy with content type ELEMENT_ONLY
class InterfaceNATDynamicRulesFirewallPolicy (BasePolicy):
    """Complex type {csm}InterfaceNATDynamicRulesFirewallPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterfaceNATDynamicRulesFirewallPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1475, 4)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element isRuleEnabled uses Python identifier isRuleEnabled
    __isRuleEnabled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isRuleEnabled'), 'isRuleEnabled', '__csm_InterfaceNATDynamicRulesFirewallPolicy_isRuleEnabled', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1479, 20), )

    
    isRuleEnabled = property(__isRuleEnabled.value, __isRuleEnabled.set, None, None)

    
    # Element realInterfaceGID uses Python identifier realInterfaceGID
    __realInterfaceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'realInterfaceGID'), 'realInterfaceGID', '__csm_InterfaceNATDynamicRulesFirewallPolicy_realInterfaceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1480, 20), )

    
    realInterfaceGID = property(__realInterfaceGID.value, __realInterfaceGID.set, None, None)

    
    # Element poolId uses Python identifier poolId
    __poolId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'poolId'), 'poolId', '__csm_InterfaceNATDynamicRulesFirewallPolicy_poolId', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1481, 20), )

    
    poolId = property(__poolId.value, __poolId.set, None, None)

    
    # Element original uses Python identifier original
    __original = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'original'), 'original', '__csm_InterfaceNATDynamicRulesFirewallPolicy_original', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1482, 20), )

    
    original = property(__original.value, __original.set, None, None)

    
    # Element outsideNAT uses Python identifier outsideNAT
    __outsideNAT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'outsideNAT'), 'outsideNAT', '__csm_InterfaceNATDynamicRulesFirewallPolicy_outsideNAT', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1483, 20), )

    
    outsideNAT = property(__outsideNAT.value, __outsideNAT.set, None, None)

    
    # Element advancedOptions uses Python identifier advancedOptions
    __advancedOptions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'advancedOptions'), 'advancedOptions', '__csm_InterfaceNATDynamicRulesFirewallPolicy_advancedOptions', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1484, 20), )

    
    advancedOptions = property(__advancedOptions.value, __advancedOptions.set, None, None)

    _ElementMap.update({
        __isRuleEnabled.name() : __isRuleEnabled,
        __realInterfaceGID.name() : __realInterfaceGID,
        __poolId.name() : __poolId,
        __original.name() : __original,
        __outsideNAT.name() : __outsideNAT,
        __advancedOptions.name() : __advancedOptions
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterfaceNATDynamicRulesFirewallPolicy = InterfaceNATDynamicRulesFirewallPolicy
Namespace.addCategoryObject('typeBinding', 'InterfaceNATDynamicRulesFirewallPolicy', InterfaceNATDynamicRulesFirewallPolicy)


# Complex type {csm}InterfaceNATPolicyDynamicRulesFirewallPolicy with content type ELEMENT_ONLY
class InterfaceNATPolicyDynamicRulesFirewallPolicy (BasePolicy):
    """Complex type {csm}InterfaceNATPolicyDynamicRulesFirewallPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterfaceNATPolicyDynamicRulesFirewallPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1489, 4)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element isRuleEnabled uses Python identifier isRuleEnabled
    __isRuleEnabled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isRuleEnabled'), 'isRuleEnabled', '__csm_InterfaceNATPolicyDynamicRulesFirewallPolicy_isRuleEnabled', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1493, 20), )

    
    isRuleEnabled = property(__isRuleEnabled.value, __isRuleEnabled.set, None, None)

    
    # Element realInterfaceGID uses Python identifier realInterfaceGID
    __realInterfaceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'realInterfaceGID'), 'realInterfaceGID', '__csm_InterfaceNATPolicyDynamicRulesFirewallPolicy_realInterfaceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1494, 20), )

    
    realInterfaceGID = property(__realInterfaceGID.value, __realInterfaceGID.set, None, None)

    
    # Element poolId uses Python identifier poolId
    __poolId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'poolId'), 'poolId', '__csm_InterfaceNATPolicyDynamicRulesFirewallPolicy_poolId', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1495, 20), )

    
    poolId = property(__poolId.value, __poolId.set, None, None)

    
    # Element original uses Python identifier original
    __original = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'original'), 'original', '__csm_InterfaceNATPolicyDynamicRulesFirewallPolicy_original', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1496, 20), )

    
    original = property(__original.value, __original.set, None, None)

    
    # Element outsideNAT uses Python identifier outsideNAT
    __outsideNAT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'outsideNAT'), 'outsideNAT', '__csm_InterfaceNATPolicyDynamicRulesFirewallPolicy_outsideNAT', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1497, 20), )

    
    outsideNAT = property(__outsideNAT.value, __outsideNAT.set, None, None)

    
    # Element destinations uses Python identifier destinations
    __destinations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'destinations'), 'destinations', '__csm_InterfaceNATPolicyDynamicRulesFirewallPolicy_destinations', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1498, 20), )

    
    destinations = property(__destinations.value, __destinations.set, None, None)

    
    # Element services uses Python identifier services
    __services = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'services'), 'services', '__csm_InterfaceNATPolicyDynamicRulesFirewallPolicy_services', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1499, 20), )

    
    services = property(__services.value, __services.set, None, None)

    
    # Element advancedOptions uses Python identifier advancedOptions
    __advancedOptions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'advancedOptions'), 'advancedOptions', '__csm_InterfaceNATPolicyDynamicRulesFirewallPolicy_advancedOptions', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1507, 20), )

    
    advancedOptions = property(__advancedOptions.value, __advancedOptions.set, None, None)

    _ElementMap.update({
        __isRuleEnabled.name() : __isRuleEnabled,
        __realInterfaceGID.name() : __realInterfaceGID,
        __poolId.name() : __poolId,
        __original.name() : __original,
        __outsideNAT.name() : __outsideNAT,
        __destinations.name() : __destinations,
        __services.name() : __services,
        __advancedOptions.name() : __advancedOptions
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterfaceNATPolicyDynamicRulesFirewallPolicy = InterfaceNATPolicyDynamicRulesFirewallPolicy
Namespace.addCategoryObject('typeBinding', 'InterfaceNATPolicyDynamicRulesFirewallPolicy', InterfaceNATPolicyDynamicRulesFirewallPolicy)


# Complex type {csm}InterfaceNATStaticRulesFirewallPolicy with content type ELEMENT_ONLY
class InterfaceNATStaticRulesFirewallPolicy (BasePolicy):
    """Complex type {csm}InterfaceNATStaticRulesFirewallPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterfaceNATStaticRulesFirewallPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1512, 4)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element isRuleEnabled uses Python identifier isRuleEnabled
    __isRuleEnabled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isRuleEnabled'), 'isRuleEnabled', '__csm_InterfaceNATStaticRulesFirewallPolicy_isRuleEnabled', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1516, 20), )

    
    isRuleEnabled = property(__isRuleEnabled.value, __isRuleEnabled.set, None, None)

    
    # Element translationType uses Python identifier translationType
    __translationType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'translationType'), 'translationType', '__csm_InterfaceNATStaticRulesFirewallPolicy_translationType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1517, 20), )

    
    translationType = property(__translationType.value, __translationType.set, None, None)

    
    # Element realInterfaceGID uses Python identifier realInterfaceGID
    __realInterfaceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'realInterfaceGID'), 'realInterfaceGID', '__csm_InterfaceNATStaticRulesFirewallPolicy_realInterfaceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1525, 20), )

    
    realInterfaceGID = property(__realInterfaceGID.value, __realInterfaceGID.set, None, None)

    
    # Element mappedInterfaceGID uses Python identifier mappedInterfaceGID
    __mappedInterfaceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'mappedInterfaceGID'), 'mappedInterfaceGID', '__csm_InterfaceNATStaticRulesFirewallPolicy_mappedInterfaceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1526, 20), )

    
    mappedInterfaceGID = property(__mappedInterfaceGID.value, __mappedInterfaceGID.set, None, None)

    
    # Element original uses Python identifier original
    __original = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'original'), 'original', '__csm_InterfaceNATStaticRulesFirewallPolicy_original', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1527, 20), )

    
    original = property(__original.value, __original.set, None, None)

    
    # Element translated uses Python identifier translated
    __translated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'translated'), 'translated', '__csm_InterfaceNATStaticRulesFirewallPolicy_translated', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1528, 20), )

    
    translated = property(__translated.value, __translated.set, None, None)

    
    # Element policyNAT uses Python identifier policyNAT
    __policyNAT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'policyNAT'), 'policyNAT', '__csm_InterfaceNATStaticRulesFirewallPolicy_policyNAT', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1529, 20), )

    
    policyNAT = property(__policyNAT.value, __policyNAT.set, None, None)

    
    # Element protocol uses Python identifier protocol
    __protocol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'protocol'), 'protocol', '__csm_InterfaceNATStaticRulesFirewallPolicy_protocol', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1544, 20), )

    
    protocol = property(__protocol.value, __protocol.set, None, None)

    
    # Element originalPort uses Python identifier originalPort
    __originalPort = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'originalPort'), 'originalPort', '__csm_InterfaceNATStaticRulesFirewallPolicy_originalPort', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1545, 20), )

    
    originalPort = property(__originalPort.value, __originalPort.set, None, None)

    
    # Element translatedPort uses Python identifier translatedPort
    __translatedPort = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'translatedPort'), 'translatedPort', '__csm_InterfaceNATStaticRulesFirewallPolicy_translatedPort', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1546, 20), )

    
    translatedPort = property(__translatedPort.value, __translatedPort.set, None, None)

    
    # Element advancedOptions uses Python identifier advancedOptions
    __advancedOptions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'advancedOptions'), 'advancedOptions', '__csm_InterfaceNATStaticRulesFirewallPolicy_advancedOptions', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1547, 20), )

    
    advancedOptions = property(__advancedOptions.value, __advancedOptions.set, None, None)

    _ElementMap.update({
        __isRuleEnabled.name() : __isRuleEnabled,
        __translationType.name() : __translationType,
        __realInterfaceGID.name() : __realInterfaceGID,
        __mappedInterfaceGID.name() : __mappedInterfaceGID,
        __original.name() : __original,
        __translated.name() : __translated,
        __policyNAT.name() : __policyNAT,
        __protocol.name() : __protocol,
        __originalPort.name() : __originalPort,
        __translatedPort.name() : __translatedPort,
        __advancedOptions.name() : __advancedOptions
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterfaceNATStaticRulesFirewallPolicy = InterfaceNATStaticRulesFirewallPolicy
Namespace.addCategoryObject('typeBinding', 'InterfaceNATStaticRulesFirewallPolicy', InterfaceNATStaticRulesFirewallPolicy)


# Complex type {csm}InterfaceNATManualFirewallPolicy with content type ELEMENT_ONLY
class InterfaceNATManualFirewallPolicy (BasePolicy):
    """Complex type {csm}InterfaceNATManualFirewallPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterfaceNATManualFirewallPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1565, 4)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element isRuleEnabled uses Python identifier isRuleEnabled
    __isRuleEnabled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isRuleEnabled'), 'isRuleEnabled', '__csm_InterfaceNATManualFirewallPolicy_isRuleEnabled', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1569, 20), )

    
    isRuleEnabled = property(__isRuleEnabled.value, __isRuleEnabled.set, None, None)

    
    # Element section uses Python identifier section
    __section = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'section'), 'section', '__csm_InterfaceNATManualFirewallPolicy_section', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1570, 20), )

    
    section = property(__section.value, __section.set, None, None)

    
    # Element realInterface uses Python identifier realInterface
    __realInterface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'realInterface'), 'realInterface', '__csm_InterfaceNATManualFirewallPolicy_realInterface', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1579, 20), )

    
    realInterface = property(__realInterface.value, __realInterface.set, None, None)

    
    # Element mappedInterface uses Python identifier mappedInterface
    __mappedInterface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'mappedInterface'), 'mappedInterface', '__csm_InterfaceNATManualFirewallPolicy_mappedInterface', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1587, 20), )

    
    mappedInterface = property(__mappedInterface.value, __mappedInterface.set, None, None)

    
    # Element source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'source'), 'source', '__csm_InterfaceNATManualFirewallPolicy_source', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1595, 20), )

    
    source = property(__source.value, __source.set, None, None)

    
    # Element destination uses Python identifier destination
    __destination = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'destination'), 'destination', '__csm_InterfaceNATManualFirewallPolicy_destination', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1611, 20), )

    
    destination = property(__destination.value, __destination.set, None, None)

    
    # Element service uses Python identifier service
    __service = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'service'), 'service', '__csm_InterfaceNATManualFirewallPolicy_service', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1620, 20), )

    
    service = property(__service.value, __service.set, None, None)

    
    # Element isTransDNSReplies uses Python identifier isTransDNSReplies
    __isTransDNSReplies = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isTransDNSReplies'), 'isTransDNSReplies', '__csm_InterfaceNATManualFirewallPolicy_isTransDNSReplies', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1628, 20), )

    
    isTransDNSReplies = property(__isTransDNSReplies.value, __isTransDNSReplies.set, None, None)

    
    # Element direction uses Python identifier direction
    __direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'direction'), 'direction', '__csm_InterfaceNATManualFirewallPolicy_direction', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1629, 20), )

    
    direction = property(__direction.value, __direction.set, None, None)

    
    # Element isNoProxyARP uses Python identifier isNoProxyARP
    __isNoProxyARP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isNoProxyARP'), 'isNoProxyARP', '__csm_InterfaceNATManualFirewallPolicy_isNoProxyARP', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1637, 20), )

    
    isNoProxyARP = property(__isNoProxyARP.value, __isNoProxyARP.set, None, None)

    
    # Element isRouteLookUp uses Python identifier isRouteLookUp
    __isRouteLookUp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isRouteLookUp'), 'isRouteLookUp', '__csm_InterfaceNATManualFirewallPolicy_isRouteLookUp', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1638, 20), )

    
    isRouteLookUp = property(__isRouteLookUp.value, __isRouteLookUp.set, None, None)

    _ElementMap.update({
        __isRuleEnabled.name() : __isRuleEnabled,
        __section.name() : __section,
        __realInterface.name() : __realInterface,
        __mappedInterface.name() : __mappedInterface,
        __source.name() : __source,
        __destination.name() : __destination,
        __service.name() : __service,
        __isTransDNSReplies.name() : __isTransDNSReplies,
        __direction.name() : __direction,
        __isNoProxyARP.name() : __isNoProxyARP,
        __isRouteLookUp.name() : __isRouteLookUp
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterfaceNATManualFirewallPolicy = InterfaceNATManualFirewallPolicy
Namespace.addCategoryObject('typeBinding', 'InterfaceNATManualFirewallPolicy', InterfaceNATManualFirewallPolicy)


# Complex type {csm}InterfaceNATObjectFirewallPolicy with content type ELEMENT_ONLY
class InterfaceNATObjectFirewallPolicy (BasePolicy):
    """Complex type {csm}InterfaceNATObjectFirewallPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterfaceNATObjectFirewallPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1643, 4)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element section uses Python identifier section
    __section = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'section'), 'section', '__csm_InterfaceNATObjectFirewallPolicy_section', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1647, 20), )

    
    section = property(__section.value, __section.set, None, None)

    
    # Element realInterface uses Python identifier realInterface
    __realInterface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'realInterface'), 'realInterface', '__csm_InterfaceNATObjectFirewallPolicy_realInterface', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1656, 20), )

    
    realInterface = property(__realInterface.value, __realInterface.set, None, None)

    
    # Element mappedInterface uses Python identifier mappedInterface
    __mappedInterface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'mappedInterface'), 'mappedInterface', '__csm_InterfaceNATObjectFirewallPolicy_mappedInterface', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1657, 20), )

    
    mappedInterface = property(__mappedInterface.value, __mappedInterface.set, None, None)

    
    # Element natType uses Python identifier natType
    __natType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'natType'), 'natType', '__csm_InterfaceNATObjectFirewallPolicy_natType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1658, 20), )

    
    natType = property(__natType.value, __natType.set, None, None)

    
    # Element originalObjectGID uses Python identifier originalObjectGID
    __originalObjectGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'originalObjectGID'), 'originalObjectGID', '__csm_InterfaceNATObjectFirewallPolicy_originalObjectGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1659, 20), )

    
    originalObjectGID = property(__originalObjectGID.value, __originalObjectGID.set, None, None)

    
    # Element translated uses Python identifier translated
    __translated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'translated'), 'translated', '__csm_InterfaceNATObjectFirewallPolicy_translated', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1660, 20), )

    
    translated = property(__translated.value, __translated.set, None, None)

    
    # Element isTransDNSReplies uses Python identifier isTransDNSReplies
    __isTransDNSReplies = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isTransDNSReplies'), 'isTransDNSReplies', '__csm_InterfaceNATObjectFirewallPolicy_isTransDNSReplies', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1669, 20), )

    
    isTransDNSReplies = property(__isTransDNSReplies.value, __isTransDNSReplies.set, None, None)

    
    # Element isNoProxyARP uses Python identifier isNoProxyARP
    __isNoProxyARP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isNoProxyARP'), 'isNoProxyARP', '__csm_InterfaceNATObjectFirewallPolicy_isNoProxyARP', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1670, 20), )

    
    isNoProxyARP = property(__isNoProxyARP.value, __isNoProxyARP.set, None, None)

    
    # Element isRouteLookUp uses Python identifier isRouteLookUp
    __isRouteLookUp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isRouteLookUp'), 'isRouteLookUp', '__csm_InterfaceNATObjectFirewallPolicy_isRouteLookUp', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1671, 20), )

    
    isRouteLookUp = property(__isRouteLookUp.value, __isRouteLookUp.set, None, None)

    
    # Element service uses Python identifier service
    __service = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'service'), 'service', '__csm_InterfaceNATObjectFirewallPolicy_service', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1672, 20), )

    
    service = property(__service.value, __service.set, None, None)

    _ElementMap.update({
        __section.name() : __section,
        __realInterface.name() : __realInterface,
        __mappedInterface.name() : __mappedInterface,
        __natType.name() : __natType,
        __originalObjectGID.name() : __originalObjectGID,
        __translated.name() : __translated,
        __isTransDNSReplies.name() : __isTransDNSReplies,
        __isNoProxyARP.name() : __isNoProxyARP,
        __isRouteLookUp.name() : __isRouteLookUp,
        __service.name() : __service
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterfaceNATObjectFirewallPolicy = InterfaceNATObjectFirewallPolicy
Namespace.addCategoryObject('typeBinding', 'InterfaceNATObjectFirewallPolicy', InterfaceNATObjectFirewallPolicy)


# Complex type {csm}FirewallACLSettingsPolicy with content type ELEMENT_ONLY
class FirewallACLSettingsPolicy (BasePolicy):
    """Complex type {csm}FirewallACLSettingsPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FirewallACLSettingsPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2609, 0)
    _ElementMap = BasePolicy._ElementMap.copy()
    _AttributeMap = BasePolicy._AttributeMap.copy()
    # Base type is BasePolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element aclName uses Python identifier aclName
    __aclName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'aclName'), 'aclName', '__csm_FirewallACLSettingsPolicy_aclName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2616, 4), )

    
    aclName = property(__aclName.value, __aclName.set, None, None)

    
    # Element interfaceGID uses Python identifier interfaceGID
    __interfaceGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interfaceGID'), 'interfaceGID', '__csm_FirewallACLSettingsPolicy_interfaceGID', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2618, 4), )

    
    interfaceGID = property(__interfaceGID.value, __interfaceGID.set, None, None)

    
    # Element trafficDirection uses Python identifier trafficDirection
    __trafficDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'trafficDirection'), 'trafficDirection', '__csm_FirewallACLSettingsPolicy_trafficDirection', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2620, 4), )

    
    trafficDirection = property(__trafficDirection.value, __trafficDirection.set, None, None)

    
    # Element useUserDefinedACLName uses Python identifier useUserDefinedACLName
    __useUserDefinedACLName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'useUserDefinedACLName'), 'useUserDefinedACLName', '__csm_FirewallACLSettingsPolicy_useUserDefinedACLName', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2629, 4), )

    
    useUserDefinedACLName = property(__useUserDefinedACLName.value, __useUserDefinedACLName.set, None, None)

    
    # Element enablePerUserDownloadableACLs uses Python identifier enablePerUserDownloadableACLs
    __enablePerUserDownloadableACLs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'enablePerUserDownloadableACLs'), 'enablePerUserDownloadableACLs', '__csm_FirewallACLSettingsPolicy_enablePerUserDownloadableACLs', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2631, 4), )

    
    enablePerUserDownloadableACLs = property(__enablePerUserDownloadableACLs.value, __enablePerUserDownloadableACLs.set, None, None)

    
    # Element enableObjectGroupSearch uses Python identifier enableObjectGroupSearch
    __enableObjectGroupSearch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'enableObjectGroupSearch'), 'enableObjectGroupSearch', '__csm_FirewallACLSettingsPolicy_enableObjectGroupSearch', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2633, 4), )

    
    enableObjectGroupSearch = property(__enableObjectGroupSearch.value, __enableObjectGroupSearch.set, None, None)

    
    # Element enableAccessListCompilation uses Python identifier enableAccessListCompilation
    __enableAccessListCompilation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'enableAccessListCompilation'), 'enableAccessListCompilation', '__csm_FirewallACLSettingsPolicy_enableAccessListCompilation', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2635, 4), )

    
    enableAccessListCompilation = property(__enableAccessListCompilation.value, __enableAccessListCompilation.set, None, None)

    _ElementMap.update({
        __aclName.name() : __aclName,
        __interfaceGID.name() : __interfaceGID,
        __trafficDirection.name() : __trafficDirection,
        __useUserDefinedACLName.name() : __useUserDefinedACLName,
        __enablePerUserDownloadableACLs.name() : __enablePerUserDownloadableACLs,
        __enableObjectGroupSearch.name() : __enableObjectGroupSearch,
        __enableAccessListCompilation.name() : __enableAccessListCompilation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.FirewallACLSettingsPolicy = FirewallACLSettingsPolicy
Namespace.addCategoryObject('typeBinding', 'FirewallACLSettingsPolicy', FirewallACLSettingsPolicy)


# Complex type {csm}ConfigChangeEvent with content type ELEMENT_ONLY
class ConfigChangeEvent (DeviceSpecificEvent):
    """Complex type {csm}ConfigChangeEvent with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConfigChangeEvent')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 69, 1)
    _ElementMap = DeviceSpecificEvent._ElementMap.copy()
    _AttributeMap = DeviceSpecificEvent._AttributeMap.copy()
    # Base type is DeviceSpecificEvent
    
    # Element subscriptionId (subscriptionId) inherited from {csm}BaseEventDetails
    
    # Element eventType (eventType) inherited from {csm}BaseEventDetails
    
    # Element eventCategory (eventCategory) inherited from {csm}BaseEventDetails
    
    # Element time (time) inherited from {csm}BaseEventDetails
    
    # Element content_ (content) inherited from {csm}BaseEventDetails
    
    # Element srcIP (srcIP) inherited from {csm}DeviceSpecificEvent
    
    # Element srcGID (srcGID) inherited from {csm}DeviceSpecificEvent
    
    # Element srcDns (srcDns) inherited from {csm}DeviceSpecificEvent
    
    # Element srcOSType (srcOSType) inherited from {csm}DeviceSpecificEvent
    
    # Element deploymentType uses Python identifier deploymentType
    __deploymentType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deploymentType'), 'deploymentType', '__csm_ConfigChangeEvent_deploymentType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 73, 5), )

    
    deploymentType = property(__deploymentType.value, __deploymentType.set, None, None)

    
    # Element updateType uses Python identifier updateType
    __updateType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'updateType'), 'updateType', '__csm_ConfigChangeEvent_updateType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 74, 5), )

    
    updateType = property(__updateType.value, __updateType.set, None, None)

    _ElementMap.update({
        __deploymentType.name() : __deploymentType,
        __updateType.name() : __updateType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ConfigChangeEvent = ConfigChangeEvent
Namespace.addCategoryObject('typeBinding', 'ConfigChangeEvent', ConfigChangeEvent)


# Complex type {csm}DeviceStatusEvent with content type ELEMENT_ONLY
class DeviceStatusEvent (DeviceSpecificEvent):
    """Complex type {csm}DeviceStatusEvent with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceStatusEvent')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 80, 1)
    _ElementMap = DeviceSpecificEvent._ElementMap.copy()
    _AttributeMap = DeviceSpecificEvent._AttributeMap.copy()
    # Base type is DeviceSpecificEvent
    
    # Element subscriptionId (subscriptionId) inherited from {csm}BaseEventDetails
    
    # Element eventType (eventType) inherited from {csm}BaseEventDetails
    
    # Element eventCategory (eventCategory) inherited from {csm}BaseEventDetails
    
    # Element time (time) inherited from {csm}BaseEventDetails
    
    # Element content_ (content) inherited from {csm}BaseEventDetails
    
    # Element srcIP (srcIP) inherited from {csm}DeviceSpecificEvent
    
    # Element srcGID (srcGID) inherited from {csm}DeviceSpecificEvent
    
    # Element srcDns (srcDns) inherited from {csm}DeviceSpecificEvent
    
    # Element srcOSType (srcOSType) inherited from {csm}DeviceSpecificEvent
    
    # Element updateType uses Python identifier updateType
    __updateType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'updateType'), 'updateType', '__csm_DeviceStatusEvent_updateType', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 84, 5), )

    
    updateType = property(__updateType.value, __updateType.set, None, None)

    _ElementMap.update({
        __updateType.name() : __updateType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceStatusEvent = DeviceStatusEvent
Namespace.addCategoryObject('typeBinding', 'DeviceStatusEvent', DeviceStatusEvent)


# Complex type {csm}DeviceAccessRuleUnifiedFirewallPolicy with content type ELEMENT_ONLY
class DeviceAccessRuleUnifiedFirewallPolicy (DeviceAccessRuleFirewallPolicy):
    """Complex type {csm}DeviceAccessRuleUnifiedFirewallPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeviceAccessRuleUnifiedFirewallPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 371, 4)
    _ElementMap = DeviceAccessRuleFirewallPolicy._ElementMap.copy()
    _AttributeMap = DeviceAccessRuleFirewallPolicy._AttributeMap.copy()
    # Base type is DeviceAccessRuleFirewallPolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element isEnabled (isEnabled) inherited from {csm}DeviceAccessRuleFirewallPolicy
    
    # Element direction (direction) inherited from {csm}DeviceAccessRuleFirewallPolicy
    
    # Element permit (permit) inherited from {csm}DeviceAccessRuleFirewallPolicy
    
    # Element sectionName (sectionName) inherited from {csm}DeviceAccessRuleFirewallPolicy
    
    # Element policyName (policyName) inherited from {csm}DeviceAccessRuleFirewallPolicy
    
    # Element interfaceRoleObjectGIDs (interfaceRoleObjectGIDs) inherited from {csm}DeviceAccessRuleFirewallPolicy
    
    # Element users (users) inherited from {csm}DeviceAccessRuleFirewallPolicy
    
    # Element sources (sources) inherited from {csm}DeviceAccessRuleFirewallPolicy
    
    # Element destinations (destinations) inherited from {csm}DeviceAccessRuleFirewallPolicy
    
    # Element services (services) inherited from {csm}DeviceAccessRuleFirewallPolicy
    
    # Element logOptions (logOptions) inherited from {csm}DeviceAccessRuleFirewallPolicy
    
    # Element iosOptions (iosOptions) inherited from {csm}DeviceAccessRuleFirewallPolicy
    
    # Element timeRangeObjectGID (timeRangeObjectGID) inherited from {csm}DeviceAccessRuleFirewallPolicy
    
    # Element sourceSG uses Python identifier sourceSG
    __sourceSG = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sourceSG'), 'sourceSG', '__csm_DeviceAccessRuleUnifiedFirewallPolicy_sourceSG', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 375, 20), )

    
    sourceSG = property(__sourceSG.value, __sourceSG.set, None, None)

    
    # Element destinationSG uses Python identifier destinationSG
    __destinationSG = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'destinationSG'), 'destinationSG', '__csm_DeviceAccessRuleUnifiedFirewallPolicy_destinationSG', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 376, 20), )

    
    destinationSG = property(__destinationSG.value, __destinationSG.set, None, None)

    _ElementMap.update({
        __sourceSG.name() : __sourceSG,
        __destinationSG.name() : __destinationSG
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeviceAccessRuleUnifiedFirewallPolicy = DeviceAccessRuleUnifiedFirewallPolicy
Namespace.addCategoryObject('typeBinding', 'DeviceAccessRuleUnifiedFirewallPolicy', DeviceAccessRuleUnifiedFirewallPolicy)


# Complex type {csm}InterfaceNAT64ManualFirewallPolicy with content type ELEMENT_ONLY
class InterfaceNAT64ManualFirewallPolicy (InterfaceNATManualFirewallPolicy):
    """Complex type {csm}InterfaceNAT64ManualFirewallPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterfaceNAT64ManualFirewallPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1698, 4)
    _ElementMap = InterfaceNATManualFirewallPolicy._ElementMap.copy()
    _AttributeMap = InterfaceNATManualFirewallPolicy._AttributeMap.copy()
    # Base type is InterfaceNATManualFirewallPolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element isRuleEnabled (isRuleEnabled) inherited from {csm}InterfaceNATManualFirewallPolicy
    
    # Element section (section) inherited from {csm}InterfaceNATManualFirewallPolicy
    
    # Element realInterface (realInterface) inherited from {csm}InterfaceNATManualFirewallPolicy
    
    # Element mappedInterface (mappedInterface) inherited from {csm}InterfaceNATManualFirewallPolicy
    
    # Element source (source) inherited from {csm}InterfaceNATManualFirewallPolicy
    
    # Element destination (destination) inherited from {csm}InterfaceNATManualFirewallPolicy
    
    # Element service (service) inherited from {csm}InterfaceNATManualFirewallPolicy
    
    # Element isTransDNSReplies (isTransDNSReplies) inherited from {csm}InterfaceNATManualFirewallPolicy
    
    # Element direction (direction) inherited from {csm}InterfaceNATManualFirewallPolicy
    
    # Element isNoProxyARP (isNoProxyARP) inherited from {csm}InterfaceNATManualFirewallPolicy
    
    # Element isRouteLookUp (isRouteLookUp) inherited from {csm}InterfaceNATManualFirewallPolicy
    
    # Element isInterfaceIpv6 uses Python identifier isInterfaceIpv6
    __isInterfaceIpv6 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isInterfaceIpv6'), 'isInterfaceIpv6', '__csm_InterfaceNAT64ManualFirewallPolicy_isInterfaceIpv6', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1702, 20), )

    
    isInterfaceIpv6 = property(__isInterfaceIpv6.value, __isInterfaceIpv6.set, None, None)

    
    # Element isNetToNet uses Python identifier isNetToNet
    __isNetToNet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isNetToNet'), 'isNetToNet', '__csm_InterfaceNAT64ManualFirewallPolicy_isNetToNet', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1703, 20), )

    
    isNetToNet = property(__isNetToNet.value, __isNetToNet.set, None, None)

    _ElementMap.update({
        __isInterfaceIpv6.name() : __isInterfaceIpv6,
        __isNetToNet.name() : __isNetToNet
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterfaceNAT64ManualFirewallPolicy = InterfaceNAT64ManualFirewallPolicy
Namespace.addCategoryObject('typeBinding', 'InterfaceNAT64ManualFirewallPolicy', InterfaceNAT64ManualFirewallPolicy)


# Complex type {csm}InterfaceNAT64ObjectFirewallPolicy with content type ELEMENT_ONLY
class InterfaceNAT64ObjectFirewallPolicy (InterfaceNATObjectFirewallPolicy):
    """Complex type {csm}InterfaceNAT64ObjectFirewallPolicy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterfaceNAT64ObjectFirewallPolicy')
    _XSDLocation = pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1751, 4)
    _ElementMap = InterfaceNATObjectFirewallPolicy._ElementMap.copy()
    _AttributeMap = InterfaceNATObjectFirewallPolicy._AttributeMap.copy()
    # Base type is InterfaceNATObjectFirewallPolicy
    
    # Element gid (gid) inherited from {csm}BaseObject
    
    # Element name (name) inherited from {csm}BaseObject
    
    # Element lastUpdateTime (lastUpdateTime) inherited from {csm}BaseObject
    
    # Element parentGID (parentGID) inherited from {csm}BaseObject
    
    # Element updatedByUser (updatedByUser) inherited from {csm}BaseObject
    
    # Element lastCommitTime (lastCommitTime) inherited from {csm}BaseObject
    
    # Element ticketId (ticketId) inherited from {csm}BaseObject
    
    # Element activityName (activityName) inherited from {csm}BaseObject
    
    # Element type (type) inherited from {csm}BasePolicy
    
    # Element orderId (orderId) inherited from {csm}BasePolicy
    
    # Element isMandatoryAggregation (isMandatoryAggregation) inherited from {csm}BasePolicy
    
    # Element description (description) inherited from {csm}BasePolicy
    
    # Element eventCorrelationID (eventCorrelationID) inherited from {csm}BasePolicy
    
    # Element configState (configState) inherited from {csm}BasePolicy
    
    # Element section (section) inherited from {csm}InterfaceNATObjectFirewallPolicy
    
    # Element realInterface (realInterface) inherited from {csm}InterfaceNATObjectFirewallPolicy
    
    # Element mappedInterface (mappedInterface) inherited from {csm}InterfaceNATObjectFirewallPolicy
    
    # Element natType (natType) inherited from {csm}InterfaceNATObjectFirewallPolicy
    
    # Element originalObjectGID (originalObjectGID) inherited from {csm}InterfaceNATObjectFirewallPolicy
    
    # Element translated (translated) inherited from {csm}InterfaceNATObjectFirewallPolicy
    
    # Element isTransDNSReplies (isTransDNSReplies) inherited from {csm}InterfaceNATObjectFirewallPolicy
    
    # Element isNoProxyARP (isNoProxyARP) inherited from {csm}InterfaceNATObjectFirewallPolicy
    
    # Element isRouteLookUp (isRouteLookUp) inherited from {csm}InterfaceNATObjectFirewallPolicy
    
    # Element service (service) inherited from {csm}InterfaceNATObjectFirewallPolicy
    
    # Element isInterfaceIpv6 uses Python identifier isInterfaceIpv6
    __isInterfaceIpv6 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isInterfaceIpv6'), 'isInterfaceIpv6', '__csm_InterfaceNAT64ObjectFirewallPolicy_isInterfaceIpv6', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1755, 20), )

    
    isInterfaceIpv6 = property(__isInterfaceIpv6.value, __isInterfaceIpv6.set, None, None)

    
    # Element isNetToNet uses Python identifier isNetToNet
    __isNetToNet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isNetToNet'), 'isNetToNet', '__csm_InterfaceNAT64ObjectFirewallPolicy_isNetToNet', False, pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1756, 20), )

    
    isNetToNet = property(__isNetToNet.value, __isNetToNet.set, None, None)

    _ElementMap.update({
        __isInterfaceIpv6.name() : __isInterfaceIpv6,
        __isNetToNet.name() : __isNetToNet
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterfaceNAT64ObjectFirewallPolicy = InterfaceNAT64ObjectFirewallPolicy
Namespace.addCategoryObject('typeBinding', 'InterfaceNAT64ObjectFirewallPolicy', InterfaceNAT64ObjectFirewallPolicy)


baseError = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'baseError'), BaseError, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 179, 4))
Namespace.addCategoryObject('elementBinding', baseError.name().localName(), baseError)

deploymentMessageOptions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deploymentMessageOptions'), ValidationDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2160, 1))
Namespace.addCategoryObject('elementBinding', deploymentMessageOptions.name().localName(), deploymentMessageOptions)

event = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'event'), Event, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 21, 1))
Namespace.addCategoryObject('elementBinding', event.name().localName(), event)

device = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'device'), Device, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 52, 1))
Namespace.addCategoryObject('elementBinding', device.name().localName(), device)

loginRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loginRequest'), LoginRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 180, 1))
Namespace.addCategoryObject('elementBinding', loginRequest.name().localName(), loginRequest)

loginResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loginResponse'), LoginResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 193, 1))
Namespace.addCategoryObject('elementBinding', loginResponse.name().localName(), loginResponse)

heartbeatCallbackRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'heartbeatCallbackRequest'), HeartbeatCallbackRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 204, 1))
Namespace.addCategoryObject('elementBinding', heartbeatCallbackRequest.name().localName(), heartbeatCallbackRequest)

logoutRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'logoutRequest'), LogoutRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 210, 1))
Namespace.addCategoryObject('elementBinding', logoutRequest.name().localName(), logoutRequest)

logoutResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'logoutResponse'), LogoutResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 216, 1))
Namespace.addCategoryObject('elementBinding', logoutResponse.name().localName(), logoutResponse)

pingRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pingRequest'), PingRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 222, 1))
Namespace.addCategoryObject('elementBinding', pingRequest.name().localName(), pingRequest)

pingResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pingResponse'), PingResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 228, 1))
Namespace.addCategoryObject('elementBinding', pingResponse.name().localName(), pingResponse)

getServiceInfoRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'getServiceInfoRequest'), GetServiceInfoRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 234, 1))
Namespace.addCategoryObject('elementBinding', getServiceInfoRequest.name().localName(), getServiceInfoRequest)

getServiceInfoResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'getServiceInfoResponse'), GetServiceInfoResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 240, 1))
Namespace.addCategoryObject('elementBinding', getServiceInfoResponse.name().localName(), getServiceInfoResponse)

groupListRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'groupListRequest'), GroupListRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1687, 4))
Namespace.addCategoryObject('elementBinding', groupListRequest.name().localName(), groupListRequest)

groupListResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'groupListResponse'), GroupListResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1709, 4))
Namespace.addCategoryObject('elementBinding', groupListResponse.name().localName(), groupListResponse)

deviceListByCapabilityRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deviceListByCapabilityRequest'), DeviceListByCapabilityRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1719, 4))
Namespace.addCategoryObject('elementBinding', deviceListByCapabilityRequest.name().localName(), deviceListByCapabilityRequest)

deviceListResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deviceListResponse'), DeviceListResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1729, 4))
Namespace.addCategoryObject('elementBinding', deviceListResponse.name().localName(), deviceListResponse)

deviceListByGroupRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deviceListByGroupRequest'), DeviceListByGroupRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1762, 4))
Namespace.addCategoryObject('elementBinding', deviceListByGroupRequest.name().localName(), deviceListByGroupRequest)

deviceConfigByGIDRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deviceConfigByGIDRequest'), DeviceConfigByGIDRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1772, 4))
Namespace.addCategoryObject('elementBinding', deviceConfigByGIDRequest.name().localName(), deviceConfigByGIDRequest)

deviceConfigByNameRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deviceConfigByNameRequest'), DeviceConfigByNameRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1782, 4))
Namespace.addCategoryObject('elementBinding', deviceConfigByNameRequest.name().localName(), deviceConfigByNameRequest)

deviceConfigResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deviceConfigResponse'), DeviceConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1792, 4))
Namespace.addCategoryObject('elementBinding', deviceConfigResponse.name().localName(), deviceConfigResponse)

policyConfigByNameRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'policyConfigByNameRequest'), PolicyConfigByNameRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1802, 4))
Namespace.addCategoryObject('elementBinding', policyConfigByNameRequest.name().localName(), policyConfigByNameRequest)

policyConfigResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'policyConfigResponse'), PolicyConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1813, 4))
Namespace.addCategoryObject('elementBinding', policyConfigResponse.name().localName(), policyConfigResponse)

policyListByDeviceGIDRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'policyListByDeviceGIDRequest'), PolicyListByDeviceGIDRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1826, 4))
Namespace.addCategoryObject('elementBinding', policyListByDeviceGIDRequest.name().localName(), policyListByDeviceGIDRequest)

policyListDeviceResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'policyListDeviceResponse'), PolicyListDeviceResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1836, 4))
Namespace.addCategoryObject('elementBinding', policyListDeviceResponse.name().localName(), policyListDeviceResponse)

policyNamesByTypeRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'policyNamesByTypeRequest'), PolicyNamesByTypeRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1852, 4))
Namespace.addCategoryObject('elementBinding', policyNamesByTypeRequest.name().localName(), policyNamesByTypeRequest)

policyConfigByDeviceGIDRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'policyConfigByDeviceGIDRequest'), PolicyConfigByDeviceGIDRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1862, 4))
Namespace.addCategoryObject('elementBinding', policyConfigByDeviceGIDRequest.name().localName(), policyConfigByDeviceGIDRequest)

setSharedPolicyConfigRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'setSharedPolicyConfigRequest'), SetSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1875, 1))
Namespace.addCategoryObject('elementBinding', setSharedPolicyConfigRequest.name().localName(), setSharedPolicyConfigRequest)

inheritSharedPolicyConfigRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'inheritSharedPolicyConfigRequest'), InheritSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1893, 1))
Namespace.addCategoryObject('elementBinding', inheritSharedPolicyConfigRequest.name().localName(), inheritSharedPolicyConfigRequest)

sharedPolicyConfigResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sharedPolicyConfigResponse'), SharedPolicyConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1914, 1))
Namespace.addCategoryObject('elementBinding', sharedPolicyConfigResponse.name().localName(), sharedPolicyConfigResponse)

assignSharedPolicyConfigRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'assignSharedPolicyConfigRequest'), AssignSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1926, 0))
Namespace.addCategoryObject('elementBinding', assignSharedPolicyConfigRequest.name().localName(), assignSharedPolicyConfigRequest)

unassignSharedPolicyConfigRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'unassignSharedPolicyConfigRequest'), UnAssignSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1940, 0))
Namespace.addCategoryObject('elementBinding', unassignSharedPolicyConfigRequest.name().localName(), unassignSharedPolicyConfigRequest)

setPolicyConfigRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'setPolicyConfigRequest'), SetPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1955, 1))
Namespace.addCategoryObject('elementBinding', setPolicyConfigRequest.name().localName(), setPolicyConfigRequest)

deletePolicyConfigRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletePolicyConfigRequest'), DeletePolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1976, 1))
Namespace.addCategoryObject('elementBinding', deletePolicyConfigRequest.name().localName(), deletePolicyConfigRequest)

policyNamesResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'policyNamesResponse'), PolicyNamesResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1992, 4))
Namespace.addCategoryObject('elementBinding', policyNamesResponse.name().localName(), policyNamesResponse)

policyConfigDeviceResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'policyConfigDeviceResponse'), PolicyConfigDeviceResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2023, 4))
Namespace.addCategoryObject('elementBinding', policyConfigDeviceResponse.name().localName(), policyConfigDeviceResponse)

newCSMSessionRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'newCSMSessionRequest'), CSMSessionRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2092, 3))
Namespace.addCategoryObject('elementBinding', newCSMSessionRequest.name().localName(), newCSMSessionRequest)

csmSessionResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'csmSessionResponse'), CSMSessionResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2105, 1))
Namespace.addCategoryObject('elementBinding', csmSessionResponse.name().localName(), csmSessionResponse)

deployConfigRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deployConfigRequest'), DeployConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2145, 1))
Namespace.addCategoryObject('elementBinding', deployConfigRequest.name().localName(), deployConfigRequest)

csmSessionValidationResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'csmSessionValidationResponse'), CSMSessionValidationResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2161, 1))
Namespace.addCategoryObject('elementBinding', csmSessionValidationResponse.name().localName(), csmSessionValidationResponse)

deploymentResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deploymentResponse'), DeploymentResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2237, 2))
Namespace.addCategoryObject('elementBinding', deploymentResponse.name().localName(), deploymentResponse)

csmSessionOperationRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'csmSessionOperationRequest'), CSMSessionOperationRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2252, 1))
Namespace.addCategoryObject('elementBinding', csmSessionOperationRequest.name().localName(), csmSessionOperationRequest)

csmApproveOperationRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'csmApproveOperationRequest'), CSMApproveOperationRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2269, 1))
Namespace.addCategoryObject('elementBinding', csmApproveOperationRequest.name().localName(), csmApproveOperationRequest)

csmApproveResultResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'csmApproveResultResponse'), CSMApproveResultResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2284, 2))
Namespace.addCategoryObject('elementBinding', csmApproveResultResponse.name().localName(), csmApproveResultResponse)

submitCSMSessionRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'submitCSMSessionRequest'), SubmitCSMSessionRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2297, 1))
Namespace.addCategoryObject('elementBinding', submitCSMSessionRequest.name().localName(), submitCSMSessionRequest)

csmSessionResultResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'csmSessionResultResponse'), CSMSessionResultResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2312, 1))
Namespace.addCategoryObject('elementBinding', csmSessionResultResponse.name().localName(), csmSessionResultResponse)

addPolicyObjectRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addPolicyObjectRequest'), ManagePolicyObjectRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2326, 1))
Namespace.addCategoryObject('elementBinding', addPolicyObjectRequest.name().localName(), addPolicyObjectRequest)

modifyPolicyObjectRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'modifyPolicyObjectRequest'), ManagePolicyObjectRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2327, 1))
Namespace.addCategoryObject('elementBinding', modifyPolicyObjectRequest.name().localName(), modifyPolicyObjectRequest)

deletePolicyObjectRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletePolicyObjectRequest'), ManagePolicyObjectRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2328, 1))
Namespace.addCategoryObject('elementBinding', deletePolicyObjectRequest.name().localName(), deletePolicyObjectRequest)

getPolicyObjectRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'getPolicyObjectRequest'), ManagePolicyObjectRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2329, 1))
Namespace.addCategoryObject('elementBinding', getPolicyObjectRequest.name().localName(), getPolicyObjectRequest)

addPolicyObjectResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addPolicyObjectResponse'), ManagePolicyObjectResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2350, 1))
Namespace.addCategoryObject('elementBinding', addPolicyObjectResponse.name().localName(), addPolicyObjectResponse)

modifyPolicyObjectResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'modifyPolicyObjectResponse'), ManagePolicyObjectResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2351, 1))
Namespace.addCategoryObject('elementBinding', modifyPolicyObjectResponse.name().localName(), modifyPolicyObjectResponse)

deletePolicyObjectResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletePolicyObjectResponse'), ManagePolicyObjectResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2352, 1))
Namespace.addCategoryObject('elementBinding', deletePolicyObjectResponse.name().localName(), deletePolicyObjectResponse)

policyObjectConfigByTypeRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'policyObjectConfigByTypeRequest'), PolicyObjectConfigByTypeRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2373, 1))
Namespace.addCategoryObject('elementBinding', policyObjectConfigByTypeRequest.name().localName(), policyObjectConfigByTypeRequest)

deletePolicyObjectConfigByIdRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletePolicyObjectConfigByIdRequest'), DeletePolicyObjectConfigByIdRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2413, 1))
Namespace.addCategoryObject('elementBinding', deletePolicyObjectConfigByIdRequest.name().localName(), deletePolicyObjectConfigByIdRequest)

policyObjectConfigResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'policyObjectConfigResponse'), PolicyObjectConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2428, 1))
Namespace.addCategoryObject('elementBinding', policyObjectConfigResponse.name().localName(), policyObjectConfigResponse)

updateNotesByRuleIDRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updateNotesByRuleIDRequest'), UpdateNotesByRuleIDRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2481, 1))
Namespace.addCategoryObject('elementBinding', updateNotesByRuleIDRequest.name().localName(), updateNotesByRuleIDRequest)

reorderRulesRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'reorderRulesRequest'), ReorderRulesRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2506, 1))
Namespace.addCategoryObject('elementBinding', reorderRulesRequest.name().localName(), reorderRulesRequest)

deployableDevicesListRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deployableDevicesListRequest'), DeployableDevicesListRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2538, 1))
Namespace.addCategoryObject('elementBinding', deployableDevicesListRequest.name().localName(), deployableDevicesListRequest)

deployJobStatusRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deployJobStatusRequest'), DeployJobStatusRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2551, 1))
Namespace.addCategoryObject('elementBinding', deployJobStatusRequest.name().localName(), deployJobStatusRequest)

getPolicyObjectByGID = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'getPolicyObjectByGID'), GetPolicyObjectByGID, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2563, 1))
Namespace.addCategoryObject('elementBinding', getPolicyObjectByGID.name().localName(), getPolicyObjectByGID)

policyObjectsListByTypeRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'policyObjectsListByTypeRequest'), PolicyObjectsListByTypeRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2650, 4))
Namespace.addCategoryObject('elementBinding', policyObjectsListByTypeRequest.name().localName(), policyObjectsListByTypeRequest)

policyObjectsListResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'policyObjectsListResponse'), PolicyObjectsListResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2661, 1))
Namespace.addCategoryObject('elementBinding', policyObjectsListResponse.name().localName(), policyObjectsListResponse)

eventSubRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eventSubRequest'), EventSubRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 102, 1))
Namespace.addCategoryObject('elementBinding', eventSubRequest.name().localName(), eventSubRequest)

eventSubResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eventSubResponse'), EventSubResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 115, 1))
Namespace.addCategoryObject('elementBinding', eventSubResponse.name().localName(), eventSubResponse)

execDeviceReadOnlyCLICmdsRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'execDeviceReadOnlyCLICmdsRequest'), ExecDeviceReadOnlyCLICmdsRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 45, 1))
Namespace.addCategoryObject('elementBinding', execDeviceReadOnlyCLICmdsRequest.name().localName(), execDeviceReadOnlyCLICmdsRequest)

execDeviceReadOnlyCLICmdsResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'execDeviceReadOnlyCLICmdsResponse'), ExecDeviceReadOnlyCLICmdsResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 55, 1))
Namespace.addCategoryObject('elementBinding', execDeviceReadOnlyCLICmdsResponse.name().localName(), execDeviceReadOnlyCLICmdsResponse)

configChangeEvent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configChangeEvent'), ConfigChangeEvent, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 68, 1))
Namespace.addCategoryObject('elementBinding', configChangeEvent.name().localName(), configChangeEvent)

deviceStatusEvent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deviceStatusEvent'), DeviceStatusEvent, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 79, 4))
Namespace.addCategoryObject('elementBinding', deviceStatusEvent.name().localName(), deviceStatusEvent)



ObjectIdentifierList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gid'), ObjectIdentifier, scope=ObjectIdentifierList, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 10, 3)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ObjectIdentifierList._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 10, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ObjectIdentifierList._Automaton = _BuildAutomaton()




BaseObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gid'), ObjectIdentifier, scope=BaseObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3)))

BaseObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=BaseObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3)))

BaseObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'lastUpdateTime'), pyxb.binding.datatypes.dateTime, scope=BaseObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3)))

BaseObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parentGID'), ObjectIdentifier, scope=BaseObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3)))

BaseObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'updatedByUser'), pyxb.binding.datatypes.string, scope=BaseObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3)))

BaseObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'lastCommitTime'), pyxb.binding.datatypes.dateTime, scope=BaseObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3)))

BaseObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ticketId'), pyxb.binding.datatypes.string, scope=BaseObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3)))

BaseObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'activityName'), pyxb.binding.datatypes.string, scope=BaseObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BaseObject._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BaseObject._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BaseObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(BaseObject._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(BaseObject._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(BaseObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(BaseObject._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(BaseObject._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BaseObject._Automaton = _BuildAutomaton_()




BaseError._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'code'), pyxb.binding.datatypes.unsignedLong, scope=BaseError, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 32, 3)))

BaseError._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=BaseError, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 33, 3)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseError._UseForTag(pyxb.namespace.ExpandedName(None, 'code')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 32, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BaseError._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 33, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BaseError._Automaton = _BuildAutomaton_2()




BaseReqResp._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'protVersion'), pyxb.binding.datatypes.double, scope=BaseReqResp, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3)))

BaseReqResp._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'reqId'), pyxb.binding.datatypes.string, scope=BaseReqResp, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3)))

BaseReqResp._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'startIndex'), pyxb.binding.datatypes.unsignedLong, scope=BaseReqResp, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3)))

BaseReqResp._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'endIndex'), pyxb.binding.datatypes.unsignedLong, scope=BaseReqResp, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3)))

BaseReqResp._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'totalCount'), pyxb.binding.datatypes.unsignedLong, scope=BaseReqResp, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3)))

BaseReqResp._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'error'), BaseError, scope=BaseReqResp, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BaseReqResp._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BaseReqResp._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BaseReqResp._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(BaseReqResp._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(BaseReqResp._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(BaseReqResp._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BaseReqResp._Automaton = _BuildAutomaton_3()




EntityDescriptor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=EntityDescriptor, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 48, 3)))

EntityDescriptor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), pyxb.binding.datatypes.string, scope=EntityDescriptor, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 49, 3)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 48, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptor._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 48, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityDescriptor._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 49, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EntityDescriptor._Automaton = _BuildAutomaton_4()




PortIdentifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'slotNum'), pyxb.binding.datatypes.unsignedInt, scope=PortIdentifier, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 73, 3)))

PortIdentifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'moduleNum'), pyxb.binding.datatypes.unsignedInt, scope=PortIdentifier, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 74, 3)))

PortIdentifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'portNum'), pyxb.binding.datatypes.unsignedInt, scope=PortIdentifier, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 75, 3)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 73, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 74, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PortIdentifier._UseForTag(pyxb.namespace.ExpandedName(None, 'slotNum')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 73, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PortIdentifier._UseForTag(pyxb.namespace.ExpandedName(None, 'moduleNum')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 74, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PortIdentifier._UseForTag(pyxb.namespace.ExpandedName(None, 'portNum')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 75, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PortIdentifier._Automaton = _BuildAutomaton_5()




InterfaceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interface'), Interface, scope=InterfaceList, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 83, 3)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 83, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceList._UseForTag(pyxb.namespace.ExpandedName(None, 'interface')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 83, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
InterfaceList._Automaton = _BuildAutomaton_6()




Interface._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), pyxb.binding.datatypes.string, scope=Interface, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 88, 3)))

Interface._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'identifier'), pyxb.binding.datatypes.string, scope=Interface, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 89, 3)))

Interface._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ipInterface'), IPInterfaceAttrs, scope=Interface, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 90, 3)))

Interface._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'macInterface'), MACInterfaceAttrs, scope=Interface, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 91, 3)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 90, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 91, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Interface._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 88, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Interface._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 89, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Interface._UseForTag(pyxb.namespace.ExpandedName(None, 'ipInterface')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 90, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Interface._UseForTag(pyxb.namespace.ExpandedName(None, 'macInterface')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 91, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Interface._Automaton = _BuildAutomaton_7()




MACInterfaceAttrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'macAddress'), pyxb.binding.datatypes.string, scope=MACInterfaceAttrs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 96, 3)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 96, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MACInterfaceAttrs._UseForTag(pyxb.namespace.ExpandedName(None, 'macAddress')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 96, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MACInterfaceAttrs._Automaton = _BuildAutomaton_8()




IPInterfaceAttrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'domainName'), pyxb.binding.datatypes.string, scope=IPInterfaceAttrs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 101, 3)))

IPInterfaceAttrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ipAddress'), pyxb.binding.datatypes.string, scope=IPInterfaceAttrs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 102, 3)))

IPInterfaceAttrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isNatAddress'), pyxb.binding.datatypes.boolean, scope=IPInterfaceAttrs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 103, 3)))

IPInterfaceAttrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'realIpAddress'), pyxb.binding.datatypes.string, scope=IPInterfaceAttrs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 104, 3)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 101, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 103, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 104, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IPInterfaceAttrs._UseForTag(pyxb.namespace.ExpandedName(None, 'domainName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IPInterfaceAttrs._UseForTag(pyxb.namespace.ExpandedName(None, 'ipAddress')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 102, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(IPInterfaceAttrs._UseForTag(pyxb.namespace.ExpandedName(None, 'isNatAddress')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 103, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(IPInterfaceAttrs._UseForTag(pyxb.namespace.ExpandedName(None, 'realIpAddress')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 104, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IPInterfaceAttrs._Automaton = _BuildAutomaton_9()




DeviceGroupPath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pathItem'), pyxb.binding.datatypes.string, scope=DeviceGroupPath, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 167, 3)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceGroupPath._UseForTag(pyxb.namespace.ExpandedName(None, 'pathItem')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 167, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceGroupPath._Automaton = _BuildAutomaton_10()




NetworkInterfaceObjectsRefs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'networkObjectGIDs'), ObjectIdentifierList, scope=NetworkInterfaceObjectsRefs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 39, 12)))

NetworkInterfaceObjectsRefs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceRoleObjectGIDs'), ObjectIdentifierList, scope=NetworkInterfaceObjectsRefs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 40, 12)))

NetworkInterfaceObjectsRefs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ipv4Data'), pyxb.binding.datatypes.string, scope=NetworkInterfaceObjectsRefs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 42, 16)))

NetworkInterfaceObjectsRefs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ipData'), pyxb.binding.datatypes.string, scope=NetworkInterfaceObjectsRefs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 43, 16)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 39, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 40, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 42, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 43, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(NetworkInterfaceObjectsRefs._UseForTag(pyxb.namespace.ExpandedName(None, 'networkObjectGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 39, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(NetworkInterfaceObjectsRefs._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceRoleObjectGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 40, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(NetworkInterfaceObjectsRefs._UseForTag(pyxb.namespace.ExpandedName(None, 'ipv4Data')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 42, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(NetworkInterfaceObjectsRefs._UseForTag(pyxb.namespace.ExpandedName(None, 'ipData')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 43, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
NetworkInterfaceObjectsRefs._Automaton = _BuildAutomaton_11()




NetworkObjectsRefs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'networkObjectGIDs'), ObjectIdentifierList, scope=NetworkObjectsRefs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 49, 12)))

NetworkObjectsRefs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ipv4Data'), pyxb.binding.datatypes.string, scope=NetworkObjectsRefs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 51, 16)))

NetworkObjectsRefs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ipData'), pyxb.binding.datatypes.string, scope=NetworkObjectsRefs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 52, 16)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 49, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 51, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 52, 16))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(NetworkObjectsRefs._UseForTag(pyxb.namespace.ExpandedName(None, 'networkObjectGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 49, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(NetworkObjectsRefs._UseForTag(pyxb.namespace.ExpandedName(None, 'ipv4Data')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 51, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(NetworkObjectsRefs._UseForTag(pyxb.namespace.ExpandedName(None, 'ipData')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 52, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
NetworkObjectsRefs._Automaton = _BuildAutomaton_12()




SecurityGrpObjectsRef._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'securityGrpObjectGID'), ObjectIdentifier, scope=SecurityGrpObjectsRef, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 58, 14)))

SecurityGrpObjectsRef._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'secName'), pyxb.binding.datatypes.string, scope=SecurityGrpObjectsRef, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 59, 14)))

SecurityGrpObjectsRef._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'secTag'), pyxb.binding.datatypes.string, scope=SecurityGrpObjectsRef, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 60, 14)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 58, 14))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 59, 14))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 60, 14))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGrpObjectsRef._UseForTag(pyxb.namespace.ExpandedName(None, 'securityGrpObjectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 58, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGrpObjectsRef._UseForTag(pyxb.namespace.ExpandedName(None, 'secName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 59, 14))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGrpObjectsRef._UseForTag(pyxb.namespace.ExpandedName(None, 'secTag')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 60, 14))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SecurityGrpObjectsRef._Automaton = _BuildAutomaton_13()




SecurityGrpObjectsRefs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'securityTag'), SecurityGrpObjectsRef, scope=SecurityGrpObjectsRefs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 65, 12)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SecurityGrpObjectsRefs._UseForTag(pyxb.namespace.ExpandedName(None, 'securityTag')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 65, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SecurityGrpObjectsRefs._Automaton = _BuildAutomaton_14()




IdentityUserGrpObjectsRefs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'identityUserGrpObjectGIDs'), ObjectIdentifierList, scope=IdentityUserGrpObjectsRefs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 70, 12)))

IdentityUserGrpObjectsRefs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'userNameData'), pyxb.binding.datatypes.string, scope=IdentityUserGrpObjectsRefs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 71, 12)))

IdentityUserGrpObjectsRefs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'userGroupData'), pyxb.binding.datatypes.string, scope=IdentityUserGrpObjectsRefs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 72, 12)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 70, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 71, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 72, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGrpObjectsRefs._UseForTag(pyxb.namespace.ExpandedName(None, 'identityUserGrpObjectGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 70, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGrpObjectsRefs._UseForTag(pyxb.namespace.ExpandedName(None, 'userNameData')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 71, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGrpObjectsRefs._UseForTag(pyxb.namespace.ExpandedName(None, 'userGroupData')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 72, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
IdentityUserGrpObjectsRefs._Automaton = _BuildAutomaton_15()




NetworkObjectRefs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'networkObjectGID'), ObjectIdentifier, scope=NetworkObjectRefs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 77, 12)))

NetworkObjectRefs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ipv4Data'), pyxb.binding.datatypes.string, scope=NetworkObjectRefs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 79, 16)))

NetworkObjectRefs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ipData'), pyxb.binding.datatypes.string, scope=NetworkObjectRefs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 80, 16)))

NetworkObjectRefs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceKeyword'), pyxb.binding.datatypes.string, scope=NetworkObjectRefs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 82, 4), fixed=True, unicode_default='interface'))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 77, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 79, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 80, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 82, 4))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(NetworkObjectRefs._UseForTag(pyxb.namespace.ExpandedName(None, 'networkObjectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 77, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(NetworkObjectRefs._UseForTag(pyxb.namespace.ExpandedName(None, 'ipv4Data')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 79, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(NetworkObjectRefs._UseForTag(pyxb.namespace.ExpandedName(None, 'ipData')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 80, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(NetworkObjectRefs._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceKeyword')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 82, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
NetworkObjectRefs._Automaton = _BuildAutomaton_16()




NetworkOrIPRef._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'hostOrNetworkObjectGID'), ObjectIdentifier, scope=NetworkOrIPRef, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 87, 12)))

NetworkOrIPRef._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ipv4Data'), pyxb.binding.datatypes.string, scope=NetworkOrIPRef, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 89, 16)))

NetworkOrIPRef._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ipData'), pyxb.binding.datatypes.string, scope=NetworkOrIPRef, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 90, 16)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NetworkOrIPRef._UseForTag(pyxb.namespace.ExpandedName(None, 'hostOrNetworkObjectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 87, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NetworkOrIPRef._UseForTag(pyxb.namespace.ExpandedName(None, 'ipv4Data')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 89, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NetworkOrIPRef._UseForTag(pyxb.namespace.ExpandedName(None, 'ipData')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 90, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NetworkOrIPRef._Automaton = _BuildAutomaton_17()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'value'), pyxb.binding.datatypes.string, scope=CTD_ANON, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 105, 8)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fqdnType'), STD_ANON, scope=CTD_ANON, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 107, 8)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 105, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 107, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'value')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 105, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'fqdnType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 107, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_18()




PortRange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operator'), OperatorType, scope=PortRange, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 167, 3)))

PortRange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'startPort'), PortIdentifier, scope=PortRange, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 168, 3)))

PortRange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'endPort'), PortIdentifier, scope=PortRange, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 169, 3)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 167, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 169, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PortRange._UseForTag(pyxb.namespace.ExpandedName(None, 'operator')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 167, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PortRange._UseForTag(pyxb.namespace.ExpandedName(None, 'startPort')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 168, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PortRange._UseForTag(pyxb.namespace.ExpandedName(None, 'endPort')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 169, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PortRange._Automaton = _BuildAutomaton_19()




ServiceParameters._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'protocol'), pyxb.binding.datatypes.string, scope=ServiceParameters, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 175, 12)))

ServiceParameters._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sourcePort'), CTD_ANON_, scope=ServiceParameters, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 176, 12)))

ServiceParameters._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'destinationPort'), CTD_ANON_2, scope=ServiceParameters, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 184, 12)))

ServiceParameters._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'icmpMessage'), pyxb.binding.datatypes.string, scope=ServiceParameters, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 192, 12)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 176, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 184, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 192, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ServiceParameters._UseForTag(pyxb.namespace.ExpandedName(None, 'protocol')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 175, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ServiceParameters._UseForTag(pyxb.namespace.ExpandedName(None, 'sourcePort')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 176, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ServiceParameters._UseForTag(pyxb.namespace.ExpandedName(None, 'destinationPort')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 184, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ServiceParameters._UseForTag(pyxb.namespace.ExpandedName(None, 'icmpMessage')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 192, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ServiceParameters._Automaton = _BuildAutomaton_20()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'port'), ProtocolPort, scope=CTD_ANON_, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 179, 24)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'portRefGID'), ObjectIdentifier, scope=CTD_ANON_, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 180, 24)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'port')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 179, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'portRefGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 180, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_21()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'port'), ProtocolPort, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 187, 24)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'portRefGID'), ObjectIdentifier, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 188, 24)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, 'port')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 187, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, 'portRefGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 188, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_22()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dayOfWeekInterval'), CTD_ANON_4, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 224, 32)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'weeklyInterval'), CTD_ANON_5, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 233, 32)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, 'dayOfWeekInterval')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 224, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, 'weeklyInterval')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 233, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_23()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dayOfWeek'), pyxb.binding.datatypes.string, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 227, 44)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'startTime'), pyxb.binding.datatypes.time, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 228, 44)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'endTime'), pyxb.binding.datatypes.time, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 229, 44)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, 'dayOfWeek')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 227, 44))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, 'startTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 228, 44))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, 'endTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 229, 44))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_24()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'startDay'), pyxb.binding.datatypes.string, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 236, 44)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'startTime'), pyxb.binding.datatypes.time, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 237, 44)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'endDay'), pyxb.binding.datatypes.string, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 238, 44)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'endTime'), pyxb.binding.datatypes.time, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 239, 44)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, 'startDay')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 236, 44))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, 'startTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 237, 44))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, 'endDay')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 238, 44))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, 'endTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 239, 44))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_25()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sequenceNumber'), pyxb.binding.datatypes.unsignedInt, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 301, 32)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'aclObjectReferenceGID'), ObjectIdentifier, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 303, 36)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'aceReferenceGID'), ObjectIdentifier, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 304, 36)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, 'sequenceNumber')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 301, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, 'aclObjectReferenceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 303, 36))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, 'aceReferenceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 304, 36))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_26()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serviceObjectGIDs'), ObjectIdentifierList, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 336, 32)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serviceParameters'), ServiceParameters, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 337, 32)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 336, 32))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 337, 32))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, 'serviceObjectGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 336, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, 'serviceParameters')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 337, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_27()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isFirewallLoggingEnabled'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 344, 32)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isDefaultLogging'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 346, 36)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'loggingInterval'), pyxb.binding.datatypes.unsignedInt, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 348, 40)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'loggingLevel'), pyxb.binding.datatypes.string, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 349, 40)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isIOSLoggingEnabled'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 352, 32)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isLogInput'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 353, 32)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 344, 32))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 346, 36))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 348, 40))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 349, 40))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 352, 32))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 353, 32))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, 'isFirewallLoggingEnabled')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 344, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, 'isDefaultLogging')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 346, 36))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, 'loggingInterval')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 348, 40))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, 'loggingLevel')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 349, 40))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, 'isIOSLoggingEnabled')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 352, 32))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, 'isLogInput')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 353, 32))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_28()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'useAsDefaultRoute'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 873, 32)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'prefix'), NetworkOrIPRef, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 874, 32)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, 'useAsDefaultRoute')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 873, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, 'prefix')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 874, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_29()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'forwardingInterfaceGID'), ObjectIdentifier, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 881, 32)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'forwardingIPAddress'), NetworkOrIPRef, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 882, 32)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, 'forwardingInterfaceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 881, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, 'forwardingIPAddress')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 882, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_30()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ipAddress'), NetworkObjectsRefs, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1260, 32)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'asNumber'), pyxb.binding.datatypes.unsignedLong, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1261, 32)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, 'ipAddress')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1260, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, 'asNumber')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1261, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_31()




CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'protocol'), CTD_ANON_13, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1271, 32)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'metric'), pyxb.binding.datatypes.unsignedLong, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1312, 32)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1312, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, 'protocol')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1271, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, 'metric')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1312, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_32()




CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'static'), STD_ANON_3, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1274, 44)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'connected'), pyxb.binding.datatypes.string, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1282, 44)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'rip'), pyxb.binding.datatypes.string, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1283, 44)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'eigrp'), CTD_ANON_14, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1284, 44)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ospf'), CTD_ANON_15, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1291, 44)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, 'static')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1274, 44))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, 'connected')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1282, 44))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, 'rip')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1283, 44))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, 'eigrp')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1284, 44))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, 'ospf')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1291, 44))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_33()




CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'asNumber'), pyxb.binding.datatypes.unsignedInt, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1287, 56)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, 'asNumber')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1287, 56))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_14._Automaton = _BuildAutomaton_34()




CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'processId'), pyxb.binding.datatypes.unsignedInt, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1294, 56)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'match'), STD_ANON_4, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1295, 56)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1295, 56))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, 'processId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1294, 56))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, 'match')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1295, 56))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_35()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'originalIP'), NetworkOrIPRef, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1347, 32)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceGID'), ObjectIdentifier, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1348, 32)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, 'originalIP')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1347, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1348, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_36()




CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'protocol'), pyxb.binding.datatypes.string, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1355, 32)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'localPort'), pyxb.binding.datatypes.unsignedInt, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1356, 32)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'globalPort'), pyxb.binding.datatypes.unsignedInt, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1357, 32)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, 'protocol')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1355, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, 'localPort')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1356, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, 'globalPort')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1357, 32))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_17._Automaton = _BuildAutomaton_37()




CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'noAlias'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1364, 32)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'noPayload'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1365, 32)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'createExtTransEntry'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1366, 32)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, 'noAlias')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1364, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, 'noPayload')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1365, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, 'createExtTransEntry')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1366, 32))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_18._Automaton = _BuildAutomaton_38()




CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceGID'), ObjectIdentifier, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1382, 32)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'addressPool'), pyxb.binding.datatypes.string, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1383, 32)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1382, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, 'addressPool')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1383, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_39()




CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'enablePortTrans'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1390, 32)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'noTransVPN'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1391, 32)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, 'enablePortTrans')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1390, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, 'noTransVPN')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1391, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_40()




FirewallNATAdvancedOptions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isTransDNSReplies'), pyxb.binding.datatypes.boolean, scope=FirewallNATAdvancedOptions, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1422, 12)))

FirewallNATAdvancedOptions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'maxTCPConnPerRule'), pyxb.binding.datatypes.unsignedInt, scope=FirewallNATAdvancedOptions, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1423, 12)))

FirewallNATAdvancedOptions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'maxUDPConnPerRule'), pyxb.binding.datatypes.unsignedInt, scope=FirewallNATAdvancedOptions, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1424, 12)))

FirewallNATAdvancedOptions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'maxEmbConnections'), pyxb.binding.datatypes.unsignedInt, scope=FirewallNATAdvancedOptions, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1425, 12)))

FirewallNATAdvancedOptions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'randomizeSeqNum'), pyxb.binding.datatypes.boolean, scope=FirewallNATAdvancedOptions, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1426, 12)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1423, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1424, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1425, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallNATAdvancedOptions._UseForTag(pyxb.namespace.ExpandedName(None, 'isTransDNSReplies')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1422, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallNATAdvancedOptions._UseForTag(pyxb.namespace.ExpandedName(None, 'maxTCPConnPerRule')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1423, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallNATAdvancedOptions._UseForTag(pyxb.namespace.ExpandedName(None, 'maxUDPConnPerRule')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1424, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallNATAdvancedOptions._UseForTag(pyxb.namespace.ExpandedName(None, 'maxEmbConnections')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1425, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FirewallNATAdvancedOptions._UseForTag(pyxb.namespace.ExpandedName(None, 'randomizeSeqNum')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1426, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FirewallNATAdvancedOptions._Automaton = _BuildAutomaton_41()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serviceData'), pyxb.binding.datatypes.string, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1502, 32)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serviceObjectGID'), ObjectIdentifier, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1503, 32)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1502, 32))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1503, 32))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, 'serviceData')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1502, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, 'serviceObjectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1503, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_42()




CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'destAddress'), NetworkObjectsRefs, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1532, 32)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'services'), CTD_ANON_23, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1533, 32)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, 'destAddress')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1532, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, 'services')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1533, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_22._Automaton = _BuildAutomaton_43()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serviceData'), pyxb.binding.datatypes.string, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1536, 44)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serviceObjectGID'), ObjectIdentifier, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1537, 44)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1536, 44))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1537, 44))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, 'serviceData')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1536, 44))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, 'serviceObjectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1537, 44))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_44()




PatOptions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'patAddressPool'), CTD_ANON_24, scope=PatOptions, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1554, 2)))

PatOptions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isPatAllocatedInRoundRobin'), pyxb.binding.datatypes.boolean, scope=PatOptions, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1562, 2)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1554, 2))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1562, 2))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PatOptions._UseForTag(pyxb.namespace.ExpandedName(None, 'patAddressPool')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1554, 2))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PatOptions._UseForTag(pyxb.namespace.ExpandedName(None, 'isPatAllocatedInRoundRobin')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1562, 2))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PatOptions._Automaton = _BuildAutomaton_45()




CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'patPoolAddressGID'), ObjectIdentifier, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1557, 5)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceKeyword'), pyxb.binding.datatypes.string, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1558, 5), fixed=True, unicode_default='interface'))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1557, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1558, 5))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, 'patPoolAddressGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1557, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceKeyword')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1558, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_46()




CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'realInterfaceGID'), ObjectIdentifier, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1582, 32)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'realInterfaceName'), pyxb.binding.datatypes.string, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1583, 32)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1582, 32))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1583, 32))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, 'realInterfaceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1582, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, 'realInterfaceName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1583, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_47()




CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'mappedInterfaceGID'), ObjectIdentifier, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1590, 32)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'mappedInterfaceName'), pyxb.binding.datatypes.string, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1591, 32)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1590, 32))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1591, 32))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, 'mappedInterfaceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1590, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, 'mappedInterfaceName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1591, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_26._Automaton = _BuildAutomaton_48()




CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'natType'), NATType, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1598, 32)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'originalObjectGID'), ObjectIdentifier, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1599, 32)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'translated'), CTD_ANON_28, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1600, 8)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1600, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, 'natType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1598, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, 'originalObjectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1599, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, 'translated')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1600, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_49()




CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'objectGID'), NetworkObjectRefs, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1603, 35)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'patPool'), PatOptions, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1604, 35)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1603, 35))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1604, 35))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, 'objectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1603, 35))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, 'patPool')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1604, 35))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_28._Automaton = _BuildAutomaton_50()




CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'natType'), NATType, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1614, 32), fixed=True, unicode_default='Static'))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'originalObject'), NetworkObjectRefs, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1615, 8)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'translatedObjectGID'), ObjectIdentifier, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1616, 8)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1615, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, 'natType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1614, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, 'originalObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1615, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, 'translatedObjectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1616, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_51()




CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'originalObjectGID'), ObjectIdentifier, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1623, 32)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'transObjectGID'), ObjectIdentifier, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1624, 32)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, 'originalObjectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1623, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, 'transObjectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1624, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_52()




CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'objectGID'), NetworkObjectRefs, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1663, 35)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'patPool'), PatOptions, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1664, 35)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1663, 35))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1664, 35))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, 'objectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1663, 35))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, 'patPool')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1664, 35))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_31._Automaton = _BuildAutomaton_53()




CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'protocol'), IPTransportProtocol, scope=CTD_ANON_32, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1675, 32)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'originalPort'), pyxb.binding.datatypes.unsignedInt, scope=CTD_ANON_32, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1676, 32)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'transPort'), pyxb.binding.datatypes.unsignedInt, scope=CTD_ANON_32, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1677, 32)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1676, 32))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1677, 32))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, 'protocol')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1675, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, 'originalPort')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1676, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, 'transPort')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1677, 32))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_32._Automaton = _BuildAutomaton_54()




CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceCapability'), DeviceCapability, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1737, 32)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceName'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1739, 32)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ipv4Address'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1740, 32)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sysObjectID'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1741, 32)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gid'), ObjectIdentifier, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1742, 32)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1740, 32))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceCapability')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1737, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1739, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, 'ipv4Address')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1740, 32))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, 'sysObjectID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1741, 32))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1742, 32))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_33._Automaton = _BuildAutomaton_55()




CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyDesc'), EntityDescriptor, scope=CTD_ANON_34, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1844, 32)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1844, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, 'policyDesc')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1844, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_34._Automaton = _BuildAutomaton_56()




CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyName'), pyxb.binding.datatypes.string, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2001, 32)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceAssignments'), CTD_ANON_36, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2002, 32)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2002, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, 'policyName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2001, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceAssignments')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2002, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_35._Automaton = _BuildAutomaton_57()




CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'device'), CTD_ANON_37, scope=CTD_ANON_36, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2005, 44)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2005, 44))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, 'device')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2005, 44))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_36._Automaton = _BuildAutomaton_58()




CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGID'), ObjectIdentifier, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2008, 56)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceName'), pyxb.binding.datatypes.string, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2009, 56)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2008, 56))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2009, 56))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_59()




CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceAccessRuleFirewallPolicy'), DeviceAccessRuleFirewallPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2032, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceAccessRuleUnifiedFirewallPolicy'), DeviceAccessRuleUnifiedFirewallPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2033, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'firewallACLSettingsPolicy'), FirewallACLSettingsPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2034, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceStaticRoutingRouterPolicy'), DeviceStaticRoutingRouterPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2043, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceStaticRoutingFirewallPolicy'), DeviceStaticRoutingFirewallPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2044, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceBgpRouterPolicy'), DeviceBGPRouterPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2049, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceNATRouterPolicy'), InterfaceNATRouterPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2050, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceNATStaticRulesRouterPolicy'), InterfaceNATStaticRulesRouterPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2051, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceNATDynamicRulesRouterPolicy'), InterfaceNATDynamicRulesRouterPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2052, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceNATTimeoutsRouterPolicy'), DeviceNATTimeoutsRouterPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2053, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceNATAddressPoolFirewallPolicy'), InterfaceNATAddressPoolFirewallPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2054, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceNATTransOptionsFirewallPolicy'), DeviceNATTransOptionsFirewallPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2055, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceNATTransExemptionsFirewallPolicy'), InterfaceNATTransExemptionsFirewallPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2056, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceNATDynamicRulesFirewallPolicy'), InterfaceNATDynamicRulesFirewallPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2057, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceNATPolicyDynamicRulesFirewallPolicy'), InterfaceNATPolicyDynamicRulesFirewallPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2058, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceNATStaticRulesFirewallPolicy'), InterfaceNATStaticRulesFirewallPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2059, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceNATManualFirewallPolicy'), InterfaceNATManualFirewallPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2060, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceNATObjectFirewallPolicy'), InterfaceNATObjectFirewallPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2061, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceNAT64ManualFirewallPolicy'), InterfaceNAT64ManualFirewallPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2062, 32)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceNAT64ObjectFirewallPolicy'), InterfaceNAT64ObjectFirewallPolicy, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2063, 32)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2032, 32))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2033, 32))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2034, 32))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2043, 32))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2044, 32))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2049, 32))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2050, 32))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2051, 32))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2052, 32))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2053, 32))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2054, 32))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2055, 32))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2056, 32))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2057, 32))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2058, 32))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2059, 32))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2060, 32))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2061, 32))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2062, 32))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2063, 32))
    counters.add(cc_19)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceAccessRuleFirewallPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2032, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceAccessRuleUnifiedFirewallPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2033, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'firewallACLSettingsPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2034, 32))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceStaticRoutingRouterPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2043, 32))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceStaticRoutingFirewallPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2044, 32))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceBgpRouterPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2049, 32))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceNATRouterPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2050, 32))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceNATStaticRulesRouterPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2051, 32))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceNATDynamicRulesRouterPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2052, 32))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceNATTimeoutsRouterPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2053, 32))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceNATAddressPoolFirewallPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2054, 32))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceNATTransOptionsFirewallPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2055, 32))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceNATTransExemptionsFirewallPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2056, 32))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceNATDynamicRulesFirewallPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2057, 32))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceNATPolicyDynamicRulesFirewallPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2058, 32))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceNATStaticRulesFirewallPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2059, 32))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceNATManualFirewallPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2060, 32))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceNATObjectFirewallPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2061, 32))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceNAT64ManualFirewallPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2062, 32))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceNAT64ObjectFirewallPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2063, 32))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_38._Automaton = _BuildAutomaton_60()




CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'networkPolicyObject'), NetworkPolicyObject, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2073, 32)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'portListPolicyObject'), PortListPolicyObject, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2074, 32)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'servicePolicyObject'), ServicePolicyObject, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2075, 32)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceRolePolicyObject'), InterfaceRolePolicyObject, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2076, 32)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'timeRangePolicyObject'), TimeRangePolicyObject, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2077, 32)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'slaMonitorPolicyObject'), SLAMonitorPolicyObject, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2078, 32)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'aclPolicyObject'), ACLPolicyObject, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2079, 32)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'stdAcePolicyObject'), StandardACEPolicyObject, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2080, 32)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'extendedACEPolicyObject'), ExtendedACEPolicyObject, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2081, 32)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'identityUserGroupPolicyObject'), IdentityUserGroupPolicyObject, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2082, 32)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'securityGroupPolicyObject'), SecurityGroupPolicyObject, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2083, 32)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2073, 32))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2074, 32))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2075, 32))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2076, 32))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2077, 32))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2078, 32))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2079, 32))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2080, 32))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2081, 32))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2082, 32))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2083, 32))
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, 'networkPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2073, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, 'portListPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2074, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, 'servicePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2075, 32))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceRolePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2076, 32))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, 'timeRangePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2077, 32))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, 'slaMonitorPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2078, 32))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, 'aclPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2079, 32))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, 'stdAcePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2080, 32))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, 'extendedACEPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2081, 32))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, 'identityUserGroupPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2082, 32))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, 'securityGroupPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2083, 32))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_61()




DeployDeviceAttrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DeployOptions'), STD_ANON_10, scope=DeployDeviceAttrs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2120, 2)))

DeployDeviceAttrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'filePath'), pyxb.binding.datatypes.string, scope=DeployDeviceAttrs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2129, 2)))

DeployDeviceAttrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OOBdetectionbehavior'), STD_ANON_11, scope=DeployDeviceAttrs, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2131, 6)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2120, 2))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2129, 2))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2131, 6))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeployDeviceAttrs._UseForTag(pyxb.namespace.ExpandedName(None, 'DeployOptions')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2120, 2))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeployDeviceAttrs._UseForTag(pyxb.namespace.ExpandedName(None, 'filePath')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2129, 2))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DeployDeviceAttrs._UseForTag(pyxb.namespace.ExpandedName(None, 'OOBdetectionbehavior')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2131, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeployDeviceAttrs._Automaton = _BuildAutomaton_62()




ValidationResults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'validationResult'), ValidationResult, scope=ValidationResults, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2177, 4)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2177, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValidationResults._UseForTag(pyxb.namespace.ExpandedName(None, 'validationResult')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2177, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ValidationResults._Automaton = _BuildAutomaton_63()




ValidationResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGID'), ObjectIdentifierList, scope=ValidationResult, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2182, 6)))

ValidationResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'validationDetails'), ValidationDetails, scope=ValidationResult, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2183, 6)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2182, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2183, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValidationResult._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2182, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ValidationResult._UseForTag(pyxb.namespace.ExpandedName(None, 'validationDetails')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2183, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ValidationResult._Automaton = _BuildAutomaton_64()




ValidationDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'title'), pyxb.binding.datatypes.string, scope=ValidationDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2188, 3)))

ValidationDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'severity'), STD_ANON_12, scope=ValidationDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2190, 3)))

ValidationDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=ValidationDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2199, 3)))

ValidationDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cause'), pyxb.binding.datatypes.string, scope=ValidationDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2201, 3)))

ValidationDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'action'), pyxb.binding.datatypes.string, scope=ValidationDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2203, 3)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2201, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2203, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValidationDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'title')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2188, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValidationDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'severity')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2190, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValidationDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2199, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValidationDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'cause')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2201, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ValidationDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'action')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2203, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ValidationDetails._Automaton = _BuildAutomaton_65()




DeploymentDeviceMsgDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), pyxb.binding.datatypes.string, scope=DeploymentDeviceMsgDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2209, 3)))

DeploymentDeviceMsgDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'severityval'), STD_ANON_13, scope=DeploymentDeviceMsgDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2211, 3)))

DeploymentDeviceMsgDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=DeploymentDeviceMsgDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2220, 3)))

DeploymentDeviceMsgDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'action'), pyxb.binding.datatypes.string, scope=DeploymentDeviceMsgDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2222, 3)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2222, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeploymentDeviceMsgDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2209, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeploymentDeviceMsgDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'severityval')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2211, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeploymentDeviceMsgDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2220, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeploymentDeviceMsgDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'action')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2222, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeploymentDeviceMsgDetails._Automaton = _BuildAutomaton_66()




DeploymentStatusDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGID'), ObjectIdentifier, scope=DeploymentStatusDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2228, 6)))

DeploymentStatusDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deploymentMsgdetails'), DeploymentDeviceMsgDetails, scope=DeploymentStatusDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2229, 6)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2228, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2229, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeploymentStatusDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2228, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeploymentStatusDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'deploymentMsgdetails')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2229, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeploymentStatusDetails._Automaton = _BuildAutomaton_67()




DeploymentStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deploymentstatus'), DeploymentStatusDetails, scope=DeploymentStatus, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2234, 4)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2234, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeploymentStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'deploymentstatus')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2234, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeploymentStatus._Automaton = _BuildAutomaton_68()




CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'objectGID'), pyxb.binding.datatypes.string, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2361, 8)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2362, 8)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), pyxb.binding.datatypes.string, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2363, 8)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'info'), pyxb.binding.datatypes.string, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2364, 8)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2364, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, 'objectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2361, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2362, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2363, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, 'info')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2364, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_40._Automaton = _BuildAutomaton_69()




CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'networkPolicyObject'), NetworkPolicyObject, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2442, 8)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'portListPolicyObject'), PortListPolicyObject, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2444, 8)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'servicePolicyObject'), ServicePolicyObject, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2446, 8)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceRolePolicyObject'), InterfaceRolePolicyObject, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2448, 8)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'timeRangePolicyObject'), TimeRangePolicyObject, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2450, 8)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'slaMonitorPolicyObject'), SLAMonitorPolicyObject, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2452, 8)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'aclPolicyObject'), ACLPolicyObject, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2454, 8)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'stdAcePolicyObject'), StandardACEPolicyObject, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2456, 8)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'extendedACEPolicyObject'), ExtendedACEPolicyObject, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2458, 8)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'identityUserGroupPolicyObject'), IdentityUserGroupPolicyObject, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2460, 8)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'securityGroupPolicyObject'), SecurityGroupPolicyObject, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2462, 8)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2442, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2444, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2446, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2448, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2450, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2452, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2454, 8))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2456, 8))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2458, 8))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2460, 8))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2462, 8))
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, 'networkPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2442, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, 'portListPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2444, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, 'servicePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2446, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceRolePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2448, 8))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, 'timeRangePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2450, 8))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, 'slaMonitorPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2452, 8))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, 'aclPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2454, 8))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, 'stdAcePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2456, 8))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, 'extendedACEPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2458, 8))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, 'identityUserGroupPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2460, 8))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, 'securityGroupPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2462, 8))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_41._Automaton = _BuildAutomaton_70()




CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'objectGID'), ObjectIdentifier, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2471, 11)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parentGID'), ObjectIdentifier, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2472, 11)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGID'), ObjectIdentifier, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2473, 8)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, 'objectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2471, 11))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2472, 11))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2473, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_42._Automaton = _BuildAutomaton_71()




CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'networkPolicyObject'), NetworkPolicyObject, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2671, 8)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'portListPolicyObject'), PortListPolicyObject, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2673, 8)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'servicePolicyObject'), ServicePolicyObject, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2675, 8)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceRolePolicyObject'), InterfaceRolePolicyObject, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2677, 8)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'timeRangePolicyObject'), TimeRangePolicyObject, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2679, 8)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'slaMonitorPolicyObject'), SLAMonitorPolicyObject, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2681, 8)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'aclPolicyObject'), ACLPolicyObject, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2683, 8)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'stdAcePolicyObject'), StandardACEPolicyObject, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2685, 8)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'extendedACEPolicyObject'), ExtendedACEPolicyObject, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2687, 8)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'identityUserGroupPolicyObject'), IdentityUserGroupPolicyObject, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2689, 8)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'securityGroupPolicyObject'), SecurityGroupPolicyObject, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2691, 8)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2671, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2673, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2675, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2677, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2679, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2681, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2683, 8))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2685, 8))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2687, 8))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2689, 8))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2691, 8))
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'networkPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2671, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'portListPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2673, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'servicePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2675, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceRolePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2677, 8))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'timeRangePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2679, 8))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'slaMonitorPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2681, 8))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'aclPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2683, 8))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'stdAcePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2685, 8))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'extendedACEPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2687, 8))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'identityUserGroupPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2689, 8))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'securityGroupPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2691, 8))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_43._Automaton = _BuildAutomaton_72()




Event._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'configChange'), ConfigChangeEvent, scope=Event, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 24, 3)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Event._UseForTag(pyxb.namespace.ExpandedName(None, 'configChange')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 24, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Event._Automaton = _BuildAutomaton_73()




BaseEventDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subscriptionId'), pyxb.binding.datatypes.string, scope=BaseEventDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 48, 3)))

BaseEventDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'eventType'), EventType, scope=BaseEventDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 49, 3)))

BaseEventDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'eventCategory'), EventCategory, scope=BaseEventDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 50, 3)))

BaseEventDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'time'), pyxb.binding.datatypes.dateTime, scope=BaseEventDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 51, 3)))

BaseEventDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'content'), pyxb.binding.datatypes.string, scope=BaseEventDetails, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 52, 3)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseEventDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'subscriptionId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 48, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseEventDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'eventType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 49, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseEventDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCategory')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 50, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseEventDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'time')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 51, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BaseEventDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'content')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 52, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BaseEventDetails._Automaton = _BuildAutomaton_74()




EventFilterItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'filterEventType'), EventType, scope=EventFilterItem, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 91, 3)))

EventFilterItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'filterEventFormat'), EventFormat, scope=EventFilterItem, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 92, 3)))

EventFilterItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'filterEventCategory'), EventCategory, scope=EventFilterItem, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 93, 3)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EventFilterItem._UseForTag(pyxb.namespace.ExpandedName(None, 'filterEventType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 91, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EventFilterItem._UseForTag(pyxb.namespace.ExpandedName(None, 'filterEventFormat')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 92, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EventFilterItem._UseForTag(pyxb.namespace.ExpandedName(None, 'filterEventCategory')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 93, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EventFilterItem._Automaton = _BuildAutomaton_75()




SyslogServer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'port'), pyxb.binding.datatypes.positiveInteger, scope=SyslogServer, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 98, 3), unicode_default='514'))

SyslogServer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'destAddress'), pyxb.binding.datatypes.string, scope=SyslogServer, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 99, 3)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 98, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SyslogServer._UseForTag(pyxb.namespace.ExpandedName(None, 'port')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 98, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SyslogServer._UseForTag(pyxb.namespace.ExpandedName(None, 'destAddress')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 99, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SyslogServer._Automaton = _BuildAutomaton_76()




DeviceReadOnlyCLICmd._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceIP'), pyxb.binding.datatypes.string, scope=DeviceReadOnlyCLICmd, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 15, 4)))

DeviceReadOnlyCLICmd._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceName'), pyxb.binding.datatypes.string, scope=DeviceReadOnlyCLICmd, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 16, 4)))

DeviceReadOnlyCLICmd._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGID'), ObjectIdentifier, scope=DeviceReadOnlyCLICmd, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 17, 4)))

DeviceReadOnlyCLICmd._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cmd'), STD_ANON_16, scope=DeviceReadOnlyCLICmd, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 19, 3)))

DeviceReadOnlyCLICmd._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'argument'), pyxb.binding.datatypes.string, scope=DeviceReadOnlyCLICmd, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 26, 12)))

DeviceReadOnlyCLICmd._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'execTimeout'), STD_ANON_17, scope=DeviceReadOnlyCLICmd, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 27, 12)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 15, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 27, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceReadOnlyCLICmd._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceIP')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 15, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceReadOnlyCLICmd._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 16, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceReadOnlyCLICmd._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 17, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceReadOnlyCLICmd._UseForTag(pyxb.namespace.ExpandedName(None, 'cmd')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 19, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceReadOnlyCLICmd._UseForTag(pyxb.namespace.ExpandedName(None, 'argument')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 26, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeviceReadOnlyCLICmd._UseForTag(pyxb.namespace.ExpandedName(None, 'execTimeout')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 27, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceReadOnlyCLICmd._Automaton = _BuildAutomaton_77()




DeviceCmdResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceIP'), pyxb.binding.datatypes.string, scope=DeviceCmdResult, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 38, 3)))

DeviceCmdResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGID'), ObjectIdentifier, scope=DeviceCmdResult, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 39, 3)))

DeviceCmdResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceName'), pyxb.binding.datatypes.string, scope=DeviceCmdResult, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 40, 3)))

DeviceCmdResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'result'), Result, scope=DeviceCmdResult, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 41, 3)))

DeviceCmdResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'resultContent'), pyxb.binding.datatypes.string, scope=DeviceCmdResult, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 42, 3)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 42, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceCmdResult._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceIP')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceCmdResult._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceCmdResult._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceCmdResult._UseForTag(pyxb.namespace.ExpandedName(None, 'result')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeviceCmdResult._UseForTag(pyxb.namespace.ExpandedName(None, 'resultContent')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceCmdResult._Automaton = _BuildAutomaton_78()




Device._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'osType'), OSType, scope=Device, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 57, 5)))

Device._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'osVersion'), pyxb.binding.datatypes.string, scope=Device, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 58, 5)))

Device._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'imageName'), pyxb.binding.datatypes.string, scope=Device, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 59, 5)))

Device._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sysObjectID'), pyxb.binding.datatypes.string, scope=Device, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 60, 20)))

Device._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fullConfig'), pyxb.binding.datatypes.string, scope=Device, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 61, 5)))

Device._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'mgmtInterface'), Interface, scope=Device, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 62, 5)))

Device._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceList'), InterfaceList, scope=Device, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 63, 5)))

Device._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'virtualContextList'), Device, scope=Device, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 64, 5)))

Device._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'configState'), ConfigurationState, scope=Device, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 65, 5)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 61, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 62, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 63, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 64, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 65, 5))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'osType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 57, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'osVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 58, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'imageName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 59, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'sysObjectID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 60, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'fullConfig')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 61, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'mgmtInterface')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 62, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceList')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 63, 5))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'virtualContextList')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 64, 5))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Device._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 65, 5))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Device._Automaton = _BuildAutomaton_79()




DeviceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'path'), pyxb.binding.datatypes.string, scope=DeviceGroup, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 158, 6)))

DeviceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'device'), Device, scope=DeviceGroup, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 159, 5)))

DeviceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGroup'), DeviceGroup, scope=DeviceGroup, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 160, 5)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 159, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 160, 5))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'path')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 158, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DeviceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'device')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 159, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(DeviceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGroup')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 160, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceGroup._Automaton = _BuildAutomaton_80()




LoginRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'username'), pyxb.binding.datatypes.string, scope=LoginRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 185, 5)))

LoginRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'password'), pyxb.binding.datatypes.string, scope=LoginRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 186, 5)))

LoginRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'heartbeatRequested'), pyxb.binding.datatypes.boolean, scope=LoginRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 187, 5)))

LoginRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'callbackUrl'), pyxb.binding.datatypes.string, scope=LoginRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 188, 5)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 187, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 188, 5))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LoginRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LoginRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LoginRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LoginRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LoginRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LoginRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LoginRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'username')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 185, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LoginRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'password')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 186, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(LoginRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'heartbeatRequested')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 187, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(LoginRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'callbackUrl')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 188, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LoginRequest._Automaton = _BuildAutomaton_81()




LoginResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serviceVersion'), pyxb.binding.datatypes.string, scope=LoginResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 198, 5)))

LoginResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sessionTimeoutInMins'), pyxb.binding.datatypes.positiveInteger, scope=LoginResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 199, 5)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LoginResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LoginResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LoginResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LoginResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LoginResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LoginResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LoginResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'serviceVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 198, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LoginResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'sessionTimeoutInMins')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 199, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LoginResponse._Automaton = _BuildAutomaton_82()




def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(HeartbeatCallbackRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(HeartbeatCallbackRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(HeartbeatCallbackRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(HeartbeatCallbackRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(HeartbeatCallbackRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(HeartbeatCallbackRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
HeartbeatCallbackRequest._Automaton = _BuildAutomaton_83()




def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LogoutRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LogoutRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LogoutRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LogoutRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(LogoutRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(LogoutRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LogoutRequest._Automaton = _BuildAutomaton_84()




def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LogoutResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LogoutResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LogoutResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LogoutResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(LogoutResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(LogoutResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LogoutResponse._Automaton = _BuildAutomaton_85()




def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PingRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PingRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PingRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PingRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PingRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PingRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PingRequest._Automaton = _BuildAutomaton_86()




def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PingResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PingResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PingResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PingResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PingResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PingResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PingResponse._Automaton = _BuildAutomaton_87()




def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GetServiceInfoRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(GetServiceInfoRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(GetServiceInfoRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(GetServiceInfoRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(GetServiceInfoRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(GetServiceInfoRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
GetServiceInfoRequest._Automaton = _BuildAutomaton_88()




GetServiceInfoResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serviceVersion'), pyxb.binding.datatypes.string, scope=GetServiceInfoResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 245, 5)))

GetServiceInfoResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serviceName'), pyxb.binding.datatypes.string, scope=GetServiceInfoResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 246, 5)))

GetServiceInfoResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serviceDesc'), pyxb.binding.datatypes.string, scope=GetServiceInfoResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 247, 5)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 247, 5))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GetServiceInfoResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GetServiceInfoResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GetServiceInfoResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GetServiceInfoResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GetServiceInfoResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GetServiceInfoResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GetServiceInfoResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'serviceVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 245, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GetServiceInfoResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'serviceName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 246, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(GetServiceInfoResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'serviceDesc')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 247, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GetServiceInfoResponse._Automaton = _BuildAutomaton_89()




BasePolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), pyxb.binding.datatypes.string, scope=BasePolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20)))

BasePolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'orderId'), pyxb.binding.datatypes.unsignedInt, scope=BasePolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20)))

BasePolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation'), pyxb.binding.datatypes.boolean, scope=BasePolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20)))

BasePolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=BasePolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20)))

BasePolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'eventCorrelationID'), pyxb.binding.datatypes.string, scope=BasePolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20)))

BasePolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'configState'), ConfigurationState, scope=BasePolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BasePolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BasePolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BasePolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BasePolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BasePolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BasePolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BasePolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BasePolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BasePolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BasePolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BasePolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BasePolicy._Automaton = _BuildAutomaton_90()




BasePolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), pyxb.binding.datatypes.string, scope=BasePolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20)))

BasePolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'comment'), pyxb.binding.datatypes.string, scope=BasePolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20)))

BasePolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nodeGID'), ObjectIdentifier, scope=BasePolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20)))

BasePolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isProperty'), pyxb.binding.datatypes.boolean, scope=BasePolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20)))

BasePolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subType'), pyxb.binding.datatypes.string, scope=BasePolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20)))

BasePolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isGroup'), pyxb.binding.datatypes.boolean, scope=BasePolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20)))

BasePolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'refGIDs'), ObjectIdentifierList, scope=BasePolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20)))

BasePolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'eventCorrelationID'), pyxb.binding.datatypes.string, scope=BasePolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20)))

BasePolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'configState'), ConfigurationState, scope=BasePolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    counters.add(cc_16)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'nodeGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isProperty')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'subType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isGroup')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'refGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(BasePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BasePolicyObject._Automaton = _BuildAutomaton_91()




GroupListRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'includeEmptyGroups'), pyxb.binding.datatypes.boolean, scope=GroupListRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1692, 20)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GroupListRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GroupListRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GroupListRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GroupListRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GroupListRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GroupListRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GroupListRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'includeEmptyGroups')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1692, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GroupListRequest._Automaton = _BuildAutomaton_92()




GroupListResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGroup'), DeviceGroup, scope=GroupListResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1714, 20)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GroupListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GroupListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GroupListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GroupListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GroupListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GroupListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GroupListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGroup')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1714, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GroupListResponse._Automaton = _BuildAutomaton_93()




DeviceListByCapabilityRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceCapability'), DeviceCapability, scope=DeviceListByCapabilityRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1724, 20)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceListByCapabilityRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceListByCapabilityRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceListByCapabilityRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceListByCapabilityRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceListByCapabilityRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceListByCapabilityRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceListByCapabilityRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceCapability')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1724, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceListByCapabilityRequest._Automaton = _BuildAutomaton_94()




DeviceListResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceId'), CTD_ANON_33, scope=DeviceListResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1734, 20)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1734, 20))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeviceListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeviceListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DeviceListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DeviceListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DeviceListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DeviceListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DeviceListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1734, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeviceListResponse._Automaton = _BuildAutomaton_95()




DeviceListByGroupRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGroupPath'), DeviceGroupPath, scope=DeviceListByGroupRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1767, 20)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceListByGroupRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceListByGroupRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceListByGroupRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceListByGroupRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceListByGroupRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceListByGroupRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceListByGroupRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGroupPath')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1767, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceListByGroupRequest._Automaton = _BuildAutomaton_96()




DeviceConfigByGIDRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gid'), ObjectIdentifier, scope=DeviceConfigByGIDRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1777, 20)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigByGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigByGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigByGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigByGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigByGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigByGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceConfigByGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1777, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceConfigByGIDRequest._Automaton = _BuildAutomaton_97()




DeviceConfigByNameRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=DeviceConfigByNameRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1787, 20)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigByNameRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigByNameRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigByNameRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigByNameRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigByNameRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigByNameRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceConfigByNameRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1787, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceConfigByNameRequest._Automaton = _BuildAutomaton_98()




DeviceConfigResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'device'), Device, scope=DeviceConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1797, 20)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'device')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1797, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceConfigResponse._Automaton = _BuildAutomaton_99()




PolicyConfigByNameRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=PolicyConfigByNameRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1807, 20)))

PolicyConfigByNameRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyType'), pyxb.binding.datatypes.string, scope=PolicyConfigByNameRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1808, 20)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigByNameRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigByNameRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigByNameRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigByNameRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigByNameRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigByNameRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigByNameRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1807, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PolicyConfigByNameRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1808, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PolicyConfigByNameRequest._Automaton = _BuildAutomaton_100()




PolicyConfigResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'statusCode'), OperationStatus, scope=PolicyConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1818, 20)))

PolicyConfigResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gid'), ObjectIdentifier, scope=PolicyConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1819, 20)))

PolicyConfigResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policy'), BasePolicy, scope=PolicyConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1820, 20)))

PolicyConfigResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'errorInfo'), BaseError, scope=PolicyConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1821, 20)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=500, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1819, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=500, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1820, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=500, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1821, 20))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'statusCode')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1818, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1819, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'policy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1820, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'errorInfo')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1821, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PolicyConfigResponse._Automaton = _BuildAutomaton_101()




PolicyListByDeviceGIDRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gid'), ObjectIdentifier, scope=PolicyListByDeviceGIDRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1831, 20)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyListByDeviceGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyListByDeviceGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyListByDeviceGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyListByDeviceGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyListByDeviceGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyListByDeviceGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PolicyListByDeviceGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1831, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PolicyListByDeviceGIDRequest._Automaton = _BuildAutomaton_102()




PolicyListDeviceResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyList'), CTD_ANON_34, scope=PolicyListDeviceResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1841, 20)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyListDeviceResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyListDeviceResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyListDeviceResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyListDeviceResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyListDeviceResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyListDeviceResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PolicyListDeviceResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'policyList')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1841, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PolicyListDeviceResponse._Automaton = _BuildAutomaton_103()




PolicyNamesByTypeRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyType'), pyxb.binding.datatypes.string, scope=PolicyNamesByTypeRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1857, 20)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyNamesByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyNamesByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyNamesByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyNamesByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyNamesByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyNamesByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PolicyNamesByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1857, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PolicyNamesByTypeRequest._Automaton = _BuildAutomaton_104()




PolicyConfigByDeviceGIDRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gid'), ObjectIdentifier, scope=PolicyConfigByDeviceGIDRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1867, 20)))

PolicyConfigByDeviceGIDRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyType'), pyxb.binding.datatypes.string, scope=PolicyConfigByDeviceGIDRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1868, 20)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigByDeviceGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigByDeviceGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigByDeviceGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigByDeviceGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigByDeviceGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigByDeviceGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigByDeviceGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1867, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PolicyConfigByDeviceGIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1868, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PolicyConfigByDeviceGIDRequest._Automaton = _BuildAutomaton_105()




SetSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=SetSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1880, 5)))

SetSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyName'), pyxb.binding.datatypes.string, scope=SetSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1882, 5)))

SetSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyRename'), pyxb.binding.datatypes.string, scope=SetSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1884, 5)))

SetSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyType'), pyxb.binding.datatypes.string, scope=SetSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1886, 5)))

SetSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=SetSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1887, 5)))

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1884, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1887, 5))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1880, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1882, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyRename')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1884, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SetSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1886, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SetSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1887, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SetSharedPolicyConfigRequest._Automaton = _BuildAutomaton_106()




InheritSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=InheritSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1898, 5)))

InheritSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyName'), pyxb.binding.datatypes.string, scope=InheritSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1900, 5)))

InheritSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parentPolicyName'), pyxb.binding.datatypes.string, scope=InheritSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1902, 5)))

InheritSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inherit'), pyxb.binding.datatypes.boolean, scope=InheritSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1905, 5)))

InheritSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyType'), pyxb.binding.datatypes.string, scope=InheritSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1907, 5)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1902, 5))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InheritSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InheritSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InheritSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InheritSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InheritSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InheritSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InheritSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1898, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InheritSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1900, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InheritSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'parentPolicyName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1902, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InheritSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'inherit')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1905, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InheritSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1907, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InheritSharedPolicyConfigRequest._Automaton = _BuildAutomaton_107()




SharedPolicyConfigResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'statusCode'), OperationStatus, scope=SharedPolicyConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1919, 8)))

SharedPolicyConfigResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=SharedPolicyConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1920, 5)))

SharedPolicyConfigResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGIDs'), ObjectIdentifierList, scope=SharedPolicyConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1921, 5)))

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1920, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1921, 5))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SharedPolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SharedPolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SharedPolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SharedPolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SharedPolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SharedPolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SharedPolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'statusCode')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1919, 8))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SharedPolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1920, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SharedPolicyConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1921, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SharedPolicyConfigResponse._Automaton = _BuildAutomaton_108()




AssignSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=AssignSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1931, 0)))

AssignSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyName'), pyxb.binding.datatypes.string, scope=AssignSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1932, 0)))

AssignSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyType'), pyxb.binding.datatypes.string, scope=AssignSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1933, 0)))

AssignSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGIDs'), ObjectIdentifierList, scope=AssignSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1934, 0)))

AssignSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inheritLocalPolicy'), pyxb.binding.datatypes.boolean, scope=AssignSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1935, 0)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1934, 0))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1931, 0))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1932, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1933, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1934, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'inheritLocalPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1935, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AssignSharedPolicyConfigRequest._Automaton = _BuildAutomaton_109()




UnAssignSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=UnAssignSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1945, 0)))

UnAssignSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyName'), pyxb.binding.datatypes.string, scope=UnAssignSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1946, 0)))

UnAssignSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyType'), pyxb.binding.datatypes.string, scope=UnAssignSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1947, 0)))

UnAssignSharedPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGIDs'), ObjectIdentifierList, scope=UnAssignSharedPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1948, 0)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1948, 0))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UnAssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UnAssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UnAssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UnAssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UnAssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UnAssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UnAssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1945, 0))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UnAssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1946, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UnAssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1947, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(UnAssignSharedPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1948, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UnAssignSharedPolicyConfigRequest._Automaton = _BuildAutomaton_110()




SetPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=SetPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1960, 5)))

SetPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGID'), ObjectIdentifier, scope=SetPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1962, 6)))

SetPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=SetPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1963, 6)))

SetPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceAccessRuleUnifiedFirewallPolicy'), DeviceAccessRuleUnifiedFirewallPolicy, scope=SetPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1966, 6)))

SetPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceAccessRuleFirewallPolicy'), DeviceAccessRuleFirewallPolicy, scope=SetPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1968, 6)))

SetPolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'firewallACLSettingsPolicy'), FirewallACLSettingsPolicy, scope=SetPolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1969, 6)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=500, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1966, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=500, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1968, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=500, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1969, 6))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1960, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SetPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1962, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SetPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1963, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SetPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceAccessRuleUnifiedFirewallPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1966, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SetPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceAccessRuleFirewallPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1968, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SetPolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'firewallACLSettingsPolicy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1969, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SetPolicyConfigRequest._Automaton = _BuildAutomaton_111()




DeletePolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=DeletePolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1981, 5)))

DeletePolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGID'), ObjectIdentifier, scope=DeletePolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1983, 6)))

DeletePolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=DeletePolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1984, 6)))

DeletePolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyGID'), ObjectIdentifier, scope=DeletePolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1986, 5)))

DeletePolicyConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyType'), PolicyConfigType, scope=DeletePolicyConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1987, 5)))

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=1, max=500, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1986, 5))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1981, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1983, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1984, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1986, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeletePolicyConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1987, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeletePolicyConfigRequest._Automaton = _BuildAutomaton_112()




PolicyNamesResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyType'), pyxb.binding.datatypes.string, scope=PolicyNamesResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1997, 20)))

PolicyNamesResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policy'), CTD_ANON_35, scope=PolicyNamesResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1998, 20)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyNamesResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyNamesResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyNamesResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyNamesResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyNamesResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyNamesResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyNamesResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'policyType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1997, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PolicyNamesResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'policy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1998, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PolicyNamesResponse._Automaton = _BuildAutomaton_113()




PolicyConfigDeviceResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policy'), CTD_ANON_38, scope=PolicyConfigDeviceResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2028, 20)))

PolicyConfigDeviceResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyObject'), CTD_ANON_39, scope=PolicyConfigDeviceResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2069, 20)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigDeviceResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigDeviceResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigDeviceResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigDeviceResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigDeviceResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigDeviceResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyConfigDeviceResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'policy')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2028, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PolicyConfigDeviceResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'policyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2069, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PolicyConfigDeviceResponse._Automaton = _BuildAutomaton_114()




CSMSessionRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionName'), pyxb.binding.datatypes.string, scope=CSMSessionRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2097, 5)))

CSMSessionRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionDescription'), pyxb.binding.datatypes.string, scope=CSMSessionRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2099, 5)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2097, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2099, 5))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2097, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionDescription')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2099, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CSMSessionRequest._Automaton = _BuildAutomaton_115()




CSMSessionResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=CSMSessionResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2110, 5)))

CSMSessionResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=CSMSessionResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2112, 5)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2112, 5))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CSMSessionResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2110, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CSMSessionResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2112, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CSMSessionResponse._Automaton = _BuildAutomaton_116()




DeployConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGID'), ObjectIdentifierList, scope=DeployConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2150, 5)))

DeployConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deploymentOptions'), DeployDeviceAttrs, scope=DeployConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2152, 5)))

DeployConfigRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deploymentComments'), pyxb.binding.datatypes.string, scope=DeployConfigRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2154, 5)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2152, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2154, 5))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeployConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeployConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeployConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeployConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeployConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeployConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeployConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2150, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DeployConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deploymentOptions')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2152, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DeployConfigRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deploymentComments')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2154, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeployConfigRequest._Automaton = _BuildAutomaton_117()




CSMSessionValidationResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'statusCode'), OperationStatus, scope=CSMSessionValidationResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2166, 3)))

CSMSessionValidationResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'approvalRequired'), pyxb.binding.datatypes.boolean, scope=CSMSessionValidationResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2167, 3)))

CSMSessionValidationResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'validationMessage'), pyxb.binding.datatypes.string, scope=CSMSessionValidationResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2168, 3)))

CSMSessionValidationResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'validationResults'), ValidationResults, scope=CSMSessionValidationResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2169, 3)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2169, 3))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionValidationResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionValidationResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionValidationResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionValidationResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionValidationResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionValidationResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionValidationResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'statusCode')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2166, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionValidationResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'approvalRequired')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2167, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CSMSessionValidationResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'validationMessage')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2168, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CSMSessionValidationResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'validationResults')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2169, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CSMSessionValidationResponse._Automaton = _BuildAutomaton_118()




DeploymentResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'status'), pyxb.binding.datatypes.string, scope=DeploymentResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2242, 5)))

DeploymentResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deploymentJobGID'), ObjectIdentifier, scope=DeploymentResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2243, 5)))

DeploymentResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deploymentJobName'), pyxb.binding.datatypes.string, scope=DeploymentResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2244, 5)))

DeploymentResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'devicesInProgress'), ObjectIdentifier, scope=DeploymentResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2245, 5)))

DeploymentResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'devicesSuccessList'), DeploymentStatus, scope=DeploymentResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2246, 5)))

DeploymentResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'devicesFailureList'), DeploymentStatus, scope=DeploymentResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2247, 5)))

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2246, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2247, 5))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeploymentResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeploymentResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeploymentResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeploymentResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeploymentResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeploymentResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeploymentResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2242, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeploymentResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'deploymentJobGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2243, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeploymentResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'deploymentJobName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2244, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeploymentResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'devicesInProgress')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2245, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DeploymentResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'devicesSuccessList')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2246, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DeploymentResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'devicesFailureList')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2247, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeploymentResponse._Automaton = _BuildAutomaton_119()




CSMSessionOperationRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=CSMSessionOperationRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2258, 6)))

CSMSessionOperationRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionName'), pyxb.binding.datatypes.string, scope=CSMSessionOperationRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2260, 6)))

CSMSessionOperationRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'comments'), pyxb.binding.datatypes.string, scope=CSMSessionOperationRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2263, 5)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2263, 5))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CSMSessionOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2258, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CSMSessionOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2260, 6))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CSMSessionOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'comments')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2263, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CSMSessionOperationRequest._Automaton = _BuildAutomaton_120()




CSMApproveOperationRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=CSMApproveOperationRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2275, 6)))

CSMApproveOperationRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionName'), pyxb.binding.datatypes.string, scope=CSMApproveOperationRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2276, 6)))

CSMApproveOperationRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'comments'), pyxb.binding.datatypes.string, scope=CSMApproveOperationRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2278, 5)))

CSMApproveOperationRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'approvalStatus'), pyxb.binding.datatypes.boolean, scope=CSMApproveOperationRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2279, 5)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2278, 5))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMApproveOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMApproveOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMApproveOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMApproveOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMApproveOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMApproveOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMApproveOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2275, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMApproveOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2276, 6))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMApproveOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'comments')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2278, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CSMApproveOperationRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'approvalStatus')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2279, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CSMApproveOperationRequest._Automaton = _BuildAutomaton_121()




CSMApproveResultResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'result'), pyxb.binding.datatypes.string, scope=CSMApproveResultResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2289, 5)))

CSMApproveResultResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=CSMApproveResultResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2291, 5)))

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMApproveResultResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMApproveResultResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMApproveResultResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMApproveResultResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMApproveResultResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMApproveResultResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMApproveResultResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'result')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2289, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CSMApproveResultResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2291, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CSMApproveResultResponse._Automaton = _BuildAutomaton_122()




SubmitCSMSessionRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=SubmitCSMSessionRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2302, 5)))

SubmitCSMSessionRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'submitComments'), pyxb.binding.datatypes.string, scope=SubmitCSMSessionRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2304, 5)))

SubmitCSMSessionRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'continueOnWarnings'), pyxb.binding.datatypes.boolean, scope=SubmitCSMSessionRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2306, 5)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2301, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2304, 5))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SubmitCSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SubmitCSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SubmitCSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SubmitCSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SubmitCSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SubmitCSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SubmitCSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2302, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SubmitCSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'submitComments')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2304, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SubmitCSMSessionRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'continueOnWarnings')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2306, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SubmitCSMSessionRequest._Automaton = _BuildAutomaton_123()




CSMSessionResultResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'result'), pyxb.binding.datatypes.string, scope=CSMSessionResultResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2317, 5)))

CSMSessionResultResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=CSMSessionResultResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2319, 5)))

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionResultResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionResultResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionResultResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionResultResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionResultResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionResultResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CSMSessionResultResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'result')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2317, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CSMSessionResultResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2319, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CSMSessionResultResponse._Automaton = _BuildAutomaton_124()




ManagePolicyObjectRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=ManagePolicyObjectRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2334, 5)))

ManagePolicyObjectRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'enforceDuplicateDetection'), pyxb.binding.datatypes.boolean, scope=ManagePolicyObjectRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2336, 5)))

ManagePolicyObjectRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'networkPolicyObject'), NetworkPolicyObject, scope=ManagePolicyObjectRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2338, 5)))

ManagePolicyObjectRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'portListPolicyObject'), PortListPolicyObject, scope=ManagePolicyObjectRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2339, 5)))

ManagePolicyObjectRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'servicePolicyObject'), ServicePolicyObject, scope=ManagePolicyObjectRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2340, 5)))

ManagePolicyObjectRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceRolePolicyObject'), InterfaceRolePolicyObject, scope=ManagePolicyObjectRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2341, 5)))

ManagePolicyObjectRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'timeRangePolicyObject'), TimeRangePolicyObject, scope=ManagePolicyObjectRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2342, 5)))

ManagePolicyObjectRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'identityUserGroupPolicyObject'), IdentityUserGroupPolicyObject, scope=ManagePolicyObjectRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2343, 5)))

ManagePolicyObjectRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'securityGroupPolicyObject'), SecurityGroupPolicyObject, scope=ManagePolicyObjectRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2344, 5)))

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2334, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2336, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=500, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2338, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=500, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2339, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=500, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2340, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=500, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2341, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=500, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2342, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=500, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2343, 5))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=500, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2344, 5))
    counters.add(cc_14)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2334, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'enforceDuplicateDetection')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2336, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'networkPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2338, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'portListPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2339, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'servicePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2340, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceRolePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2341, 5))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'timeRangePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2342, 5))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'identityUserGroupPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2343, 5))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'securityGroupPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2344, 5))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ManagePolicyObjectRequest._Automaton = _BuildAutomaton_125()




ManagePolicyObjectResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'message'), pyxb.binding.datatypes.string, scope=ManagePolicyObjectResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2357, 5)))

ManagePolicyObjectResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'resultObject'), CTD_ANON_40, scope=ManagePolicyObjectResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2358, 5)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2357, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2358, 5))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'message')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2357, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ManagePolicyObjectResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'resultObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2358, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ManagePolicyObjectResponse._Automaton = _BuildAutomaton_126()




PolicyObjectConfigByTypeRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=PolicyObjectConfigByTypeRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2378, 5)))

PolicyObjectConfigByTypeRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyObjectType'), PolicyObjectType, scope=PolicyObjectConfigByTypeRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2380, 5)))

PolicyObjectConfigByTypeRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'enforceConfDetection'), pyxb.binding.datatypes.boolean, scope=PolicyObjectConfigByTypeRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2384, 5)))

PolicyObjectConfigByTypeRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGID'), ObjectIdentifier, scope=PolicyObjectConfigByTypeRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2388, 5)))

PolicyObjectConfigByTypeRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'networkPolicyObject'), NetworkPolicyObject, scope=PolicyObjectConfigByTypeRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2392, 6)))

PolicyObjectConfigByTypeRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'servicePolicyObject'), ServicePolicyObject, scope=PolicyObjectConfigByTypeRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2394, 6)))

PolicyObjectConfigByTypeRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceRolePolicyObject'), InterfaceRolePolicyObject, scope=PolicyObjectConfigByTypeRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2396, 6)))

PolicyObjectConfigByTypeRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'timeRangePolicyObject'), TimeRangePolicyObject, scope=PolicyObjectConfigByTypeRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2398, 6)))

PolicyObjectConfigByTypeRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'identityUserGroupPolicyObject'), IdentityUserGroupPolicyObject, scope=PolicyObjectConfigByTypeRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2400, 6)))

PolicyObjectConfigByTypeRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'securityGroupPolicyObject'), SecurityGroupPolicyObject, scope=PolicyObjectConfigByTypeRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2402, 6)))

PolicyObjectConfigByTypeRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'portListPolicyObject'), PortListPolicyObject, scope=PolicyObjectConfigByTypeRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2404, 6)))

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2378, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2388, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2390, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2392, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2394, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2396, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2398, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2400, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2402, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2404, 6))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2378, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyObjectType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2380, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'enforceConfDetection')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2384, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2388, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'networkPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2392, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'servicePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2394, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceRolePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2396, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'timeRangePolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2398, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'identityUserGroupPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2400, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'securityGroupPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2402, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'portListPolicyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2404, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PolicyObjectConfigByTypeRequest._Automaton = _BuildAutomaton_127()




DeletePolicyObjectConfigByIdRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), pyxb.binding.datatypes.string, scope=DeletePolicyObjectConfigByIdRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2418, 5)))

DeletePolicyObjectConfigByIdRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'objectGID'), ObjectIdentifier, scope=DeletePolicyObjectConfigByIdRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2420, 5)))

DeletePolicyObjectConfigByIdRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'objectType'), PolicyObjectType, scope=DeletePolicyObjectConfigByIdRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2422, 5)))

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyObjectConfigByIdRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyObjectConfigByIdRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyObjectConfigByIdRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyObjectConfigByIdRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyObjectConfigByIdRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyObjectConfigByIdRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyObjectConfigByIdRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2418, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeletePolicyObjectConfigByIdRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'objectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2420, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeletePolicyObjectConfigByIdRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'objectType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2422, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeletePolicyObjectConfigByIdRequest._Automaton = _BuildAutomaton_128()




PolicyObjectConfigResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'objectGID'), ObjectIdentifier, scope=PolicyObjectConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2433, 5)))

PolicyObjectConfigResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'results'), pyxb.binding.datatypes.string, scope=PolicyObjectConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2434, 5)))

PolicyObjectConfigResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'details'), pyxb.binding.datatypes.string, scope=PolicyObjectConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2436, 5)))

PolicyObjectConfigResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyObject'), CTD_ANON_41, scope=PolicyObjectConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2438, 5)))

PolicyObjectConfigResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'overrideDetails'), CTD_ANON_42, scope=PolicyObjectConfigResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2468, 10)))

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2433, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2434, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2436, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2468, 10))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'objectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2433, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'results')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2434, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'details')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2436, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'policyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2438, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PolicyObjectConfigResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'overrideDetails')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2468, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PolicyObjectConfigResponse._Automaton = _BuildAutomaton_129()




UpdateNotesByRuleIDRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=UpdateNotesByRuleIDRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2486, 5)))

UpdateNotesByRuleIDRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGID'), ObjectIdentifier, scope=UpdateNotesByRuleIDRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2488, 5)))

UpdateNotesByRuleIDRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyGID'), ObjectIdentifier, scope=UpdateNotesByRuleIDRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2490, 5)))

UpdateNotesByRuleIDRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyType'), STD_ANON_14, scope=UpdateNotesByRuleIDRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2492, 5)))

UpdateNotesByRuleIDRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=UpdateNotesByRuleIDRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2500, 5)))

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2486, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2492, 5))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UpdateNotesByRuleIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UpdateNotesByRuleIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UpdateNotesByRuleIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UpdateNotesByRuleIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UpdateNotesByRuleIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UpdateNotesByRuleIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UpdateNotesByRuleIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2486, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UpdateNotesByRuleIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2488, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UpdateNotesByRuleIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2490, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UpdateNotesByRuleIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2492, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UpdateNotesByRuleIDRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2500, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UpdateNotesByRuleIDRequest._Automaton = _BuildAutomaton_130()




ReorderRulesRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=ReorderRulesRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2511, 5)))

ReorderRulesRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGID'), ObjectIdentifier, scope=ReorderRulesRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2514, 5)))

ReorderRulesRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=ReorderRulesRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2516, 5)))

ReorderRulesRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ruleGID'), ObjectIdentifier, scope=ReorderRulesRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2519, 5)))

ReorderRulesRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyType'), PolicyConfigType, scope=ReorderRulesRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2522, 5)))

ReorderRulesRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'toOrderId'), pyxb.binding.datatypes.unsignedInt, scope=ReorderRulesRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2523, 5)))

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2511, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2522, 5))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReorderRulesRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReorderRulesRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReorderRulesRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReorderRulesRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReorderRulesRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReorderRulesRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReorderRulesRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2511, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReorderRulesRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2514, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReorderRulesRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2516, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReorderRulesRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'ruleGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2519, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReorderRulesRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2522, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ReorderRulesRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'toOrderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2523, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ReorderRulesRequest._Automaton = _BuildAutomaton_131()




def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeployableDevicesListRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeployableDevicesListRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DeployableDevicesListRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DeployableDevicesListRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DeployableDevicesListRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DeployableDevicesListRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeployableDevicesListRequest._Automaton = _BuildAutomaton_132()




DeployJobStatusRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deploymentJobName'), pyxb.binding.datatypes.string, scope=DeployJobStatusRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2544, 7)))

DeployJobStatusRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deploymentJobGID'), ObjectIdentifier, scope=DeployJobStatusRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2545, 5)))

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeployJobStatusRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeployJobStatusRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeployJobStatusRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeployJobStatusRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeployJobStatusRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeployJobStatusRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeployJobStatusRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deploymentJobName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2544, 7))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeployJobStatusRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deploymentJobGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2545, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeployJobStatusRequest._Automaton = _BuildAutomaton_133()




DeployableDevicesListResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceGIDs'), ObjectIdentifierList, scope=DeployableDevicesListResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2557, 5)))

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2557, 5))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeployableDevicesListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeployableDevicesListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DeployableDevicesListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DeployableDevicesListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DeployableDevicesListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DeployableDevicesListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DeployableDevicesListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2557, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeployableDevicesListResponse._Automaton = _BuildAutomaton_134()




GetPolicyObjectByGID._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'csmSessionGID'), ObjectIdentifier, scope=GetPolicyObjectByGID, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2568, 4)))

GetPolicyObjectByGID._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gid'), ObjectIdentifier, scope=GetPolicyObjectByGID, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2569, 4)))

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2568, 4))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GetPolicyObjectByGID._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GetPolicyObjectByGID._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GetPolicyObjectByGID._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GetPolicyObjectByGID._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GetPolicyObjectByGID._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GetPolicyObjectByGID._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GetPolicyObjectByGID._UseForTag(pyxb.namespace.ExpandedName(None, 'csmSessionGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2568, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GetPolicyObjectByGID._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2569, 4))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GetPolicyObjectByGID._Automaton = _BuildAutomaton_135()




PolicyObjectsListByTypeRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyObjectType'), PolicyObjectType, scope=PolicyObjectsListByTypeRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2655, 5)))

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectsListByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectsListByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectsListByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectsListByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectsListByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectsListByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PolicyObjectsListByTypeRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'policyObjectType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2655, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PolicyObjectsListByTypeRequest._Automaton = _BuildAutomaton_136()




PolicyObjectsListResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyObject'), CTD_ANON_43, scope=PolicyObjectsListResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2667, 5)))

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectsListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectsListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectsListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectsListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectsListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolicyObjectsListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PolicyObjectsListResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'policyObject')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2667, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PolicyObjectsListResponse._Automaton = _BuildAutomaton_137()




DeviceSpecificEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'srcIP'), pyxb.binding.datatypes.string, scope=DeviceSpecificEvent, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 59, 5)))

DeviceSpecificEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'srcGID'), ObjectIdentifier, scope=DeviceSpecificEvent, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 60, 5)))

DeviceSpecificEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'srcDns'), pyxb.binding.datatypes.string, scope=DeviceSpecificEvent, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 61, 5)))

DeviceSpecificEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'srcOSType'), OSType, scope=DeviceSpecificEvent, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 62, 5)))

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 59, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 61, 5))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceSpecificEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'subscriptionId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 48, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceSpecificEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'eventType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 49, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceSpecificEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCategory')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 50, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceSpecificEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'time')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 51, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceSpecificEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'content')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 52, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceSpecificEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'srcIP')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 59, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceSpecificEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'srcGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 60, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceSpecificEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'srcDns')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 61, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceSpecificEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'srcOSType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 62, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceSpecificEvent._Automaton = _BuildAutomaton_138()




EventSubRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'op'), SubscriptionOperation, scope=EventSubRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 107, 5)))

EventSubRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subscriptionId'), pyxb.binding.datatypes.string, scope=EventSubRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 108, 5)))

EventSubRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'eventFilterItem'), EventFilterItem, scope=EventSubRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 109, 5)))

EventSubRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'syslogServer'), SyslogServer, scope=EventSubRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 110, 5)))

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 109, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 110, 5))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EventSubRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EventSubRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EventSubRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EventSubRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EventSubRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EventSubRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EventSubRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'op')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 107, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EventSubRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'subscriptionId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 108, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(EventSubRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'eventFilterItem')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 109, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(EventSubRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'syslogServer')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 110, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EventSubRequest._Automaton = _BuildAutomaton_139()




EventSubResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subscriptionId'), pyxb.binding.datatypes.string, scope=EventSubResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 120, 5)))

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 120, 5))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EventSubResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(EventSubResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(EventSubResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(EventSubResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(EventSubResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(EventSubResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(EventSubResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'subscriptionId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 120, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EventSubResponse._Automaton = _BuildAutomaton_140()




ExecDeviceReadOnlyCLICmdsRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceReadOnlyCLICmd'), DeviceReadOnlyCLICmd, scope=ExecDeviceReadOnlyCLICmdsRequest, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 50, 5)))

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExecDeviceReadOnlyCLICmdsRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExecDeviceReadOnlyCLICmdsRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExecDeviceReadOnlyCLICmdsRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExecDeviceReadOnlyCLICmdsRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExecDeviceReadOnlyCLICmdsRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExecDeviceReadOnlyCLICmdsRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ExecDeviceReadOnlyCLICmdsRequest._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceReadOnlyCLICmd')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 50, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ExecDeviceReadOnlyCLICmdsRequest._Automaton = _BuildAutomaton_141()




ExecDeviceReadOnlyCLICmdsResponse._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deviceCmdResult'), DeviceCmdResult, scope=ExecDeviceReadOnlyCLICmdsResponse, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 60, 5)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExecDeviceReadOnlyCLICmdsResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'protVersion')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 38, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExecDeviceReadOnlyCLICmdsResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'reqId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 39, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExecDeviceReadOnlyCLICmdsResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'startIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 40, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExecDeviceReadOnlyCLICmdsResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'endIndex')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 41, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExecDeviceReadOnlyCLICmdsResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'totalCount')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 42, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExecDeviceReadOnlyCLICmdsResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 43, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ExecDeviceReadOnlyCLICmdsResponse._UseForTag(pyxb.namespace.ExpandedName(None, 'deviceCmdResult')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/util.xsd', 60, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ExecDeviceReadOnlyCLICmdsResponse._Automaton = _BuildAutomaton_142()




NetworkPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ipv4Data'), pyxb.binding.datatypes.string, scope=NetworkPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 99, 24)))

NetworkPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ipData'), pyxb.binding.datatypes.string, scope=NetworkPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 100, 24)))

NetworkPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fqdnData'), CTD_ANON, scope=NetworkPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 102, 20)))

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 99, 24))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 100, 24))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 102, 20))
    counters.add(cc_19)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'nodeGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isProperty')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'subType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isGroup')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'refGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'ipv4Data')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 99, 24))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'ipData')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 100, 24))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(NetworkPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'fqdnData')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 102, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
NetworkPolicyObject._Automaton = _BuildAutomaton_143()




IdentityUserGroupPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'userNameData'), pyxb.binding.datatypes.string, scope=IdentityUserGroupPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 127, 20)))

IdentityUserGroupPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'userGroupData'), pyxb.binding.datatypes.string, scope=IdentityUserGroupPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 128, 20)))

def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 127, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 128, 20))
    counters.add(cc_18)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'nodeGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isProperty')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'subType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isGroup')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'refGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'userNameData')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 127, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(IdentityUserGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'userGroupData')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 128, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
IdentityUserGroupPolicyObject._Automaton = _BuildAutomaton_144()




SecurityGroupPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'securityTag'), SecurityGrpObjectsRef, scope=SecurityGroupPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 137, 5)))

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 137, 5))
    counters.add(cc_17)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'nodeGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isProperty')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'subType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isGroup')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'refGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(SecurityGroupPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'securityTag')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 137, 5))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SecurityGroupPolicyObject._Automaton = _BuildAutomaton_145()




PortListPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'port'), PortRange, scope=PortListPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 159, 4)))

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 158, 4))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 159, 4))
    counters.add(cc_18)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'nodeGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isProperty')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'subType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isGroup')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'refGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(PortListPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'port')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 159, 4))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PortListPolicyObject._Automaton = _BuildAutomaton_146()




ServicePolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serviceParameters'), ServiceParameters, scope=ServicePolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 199, 20)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 198, 16))
    counters.add(cc_17)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'nodeGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isProperty')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'subType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isGroup')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'refGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ServicePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'serviceParameters')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 199, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ServicePolicyObject._Automaton = _BuildAutomaton_147()




InterfaceRolePolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pattern'), pyxb.binding.datatypes.string, scope=InterfaceRolePolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 210, 20)))

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 210, 20))
    counters.add(cc_17)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'nodeGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isProperty')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'subType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isGroup')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'refGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceRolePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'pattern')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 210, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
InterfaceRolePolicyObject._Automaton = _BuildAutomaton_148()




TimeRangePolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'startTime'), pyxb.binding.datatypes.dateTime, scope=TimeRangePolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 219, 20)))

TimeRangePolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'endTime'), pyxb.binding.datatypes.dateTime, scope=TimeRangePolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 220, 20)))

TimeRangePolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'recurrence'), CTD_ANON_3, scope=TimeRangePolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 221, 20)))

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 219, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 220, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 221, 20))
    counters.add(cc_19)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'nodeGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isProperty')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'subType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isGroup')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'refGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'startTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 219, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'endTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 220, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(TimeRangePolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'recurrence')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 221, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TimeRangePolicyObject._Automaton = _BuildAutomaton_149()




SLAMonitorPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'slaId'), pyxb.binding.datatypes.unsignedInt, scope=SLAMonitorPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 254, 20)))

SLAMonitorPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceGID'), ObjectIdentifier, scope=SLAMonitorPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 255, 20)))

SLAMonitorPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'monitoredAddress'), pyxb.binding.datatypes.string, scope=SLAMonitorPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 256, 20)))

SLAMonitorPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dataSizeInBytes'), pyxb.binding.datatypes.unsignedInt, scope=SLAMonitorPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 257, 20)))

SLAMonitorPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'thresholdInMilliSeconds'), pyxb.binding.datatypes.unsignedInt, scope=SLAMonitorPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 258, 20)))

SLAMonitorPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'timeoutInMilliSeconds'), pyxb.binding.datatypes.unsignedInt, scope=SLAMonitorPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 259, 20)))

SLAMonitorPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'frequencyInSeconds'), pyxb.binding.datatypes.unsignedInt, scope=SLAMonitorPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 260, 20)))

SLAMonitorPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'toS'), pyxb.binding.datatypes.unsignedInt, scope=SLAMonitorPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 261, 20)))

SLAMonitorPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'numberOfPackets'), pyxb.binding.datatypes.unsignedInt, scope=SLAMonitorPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 262, 20)))

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 257, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 258, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 259, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 260, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 261, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 262, 20))
    counters.add(cc_22)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'nodeGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isProperty')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'subType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isGroup')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'refGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'slaId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 254, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 255, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'monitoredAddress')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 256, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'dataSizeInBytes')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 257, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'thresholdInMilliSeconds')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 258, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'timeoutInMilliSeconds')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 259, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'frequencyInSeconds')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 260, 20))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'toS')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 261, 20))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(SLAMonitorPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'numberOfPackets')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 262, 20))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, True) ]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SLAMonitorPolicyObject._Automaton = _BuildAutomaton_150()




StandardACEPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'networkGID'), ObjectIdentifier, scope=StandardACEPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 271, 20)))

StandardACEPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doLogging'), pyxb.binding.datatypes.boolean, scope=StandardACEPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 272, 20)))

StandardACEPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'permit'), pyxb.binding.datatypes.boolean, scope=StandardACEPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 273, 20)))

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'nodeGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isProperty')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'subType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isGroup')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'refGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'networkGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 271, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'doLogging')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 272, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StandardACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'permit')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 273, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
StandardACEPolicyObject._Automaton = _BuildAutomaton_151()




ExtendedACEPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sourceGID'), ObjectIdentifier, scope=ExtendedACEPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 282, 4)))

ExtendedACEPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'destinationGID'), ObjectIdentifier, scope=ExtendedACEPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 283, 4)))

ExtendedACEPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serviceGID'), ObjectIdentifier, scope=ExtendedACEPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 284, 4)))

ExtendedACEPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'doLogging'), pyxb.binding.datatypes.string, scope=ExtendedACEPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 285, 4)))

ExtendedACEPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'logInterval'), pyxb.binding.datatypes.string, scope=ExtendedACEPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 286, 4)))

ExtendedACEPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'logLevel'), pyxb.binding.datatypes.string, scope=ExtendedACEPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 287, 4)))

ExtendedACEPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'logOption'), pyxb.binding.datatypes.string, scope=ExtendedACEPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 288, 4)))

ExtendedACEPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'permit'), pyxb.binding.datatypes.boolean, scope=ExtendedACEPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 289, 4)))

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 285, 4))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 286, 4))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 287, 4))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 288, 4))
    counters.add(cc_20)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'nodeGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isProperty')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'subType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isGroup')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'refGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'sourceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 282, 4))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'destinationGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 283, 4))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'serviceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 284, 4))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'doLogging')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 285, 4))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'logInterval')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 286, 4))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'logLevel')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 287, 4))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'logOption')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 288, 4))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ExtendedACEPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'permit')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 289, 4))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ExtendedACEPolicyObject._Automaton = _BuildAutomaton_152()




ACLPolicyObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_6, scope=ACLPolicyObject, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 298, 20)))

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 24, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 25, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'nodeGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 26, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isProperty')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 27, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'subType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 28, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'isGroup')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 29, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'refGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 30, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 31, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 32, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ACLPolicyObject._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 298, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ACLPolicyObject._Automaton = _BuildAutomaton_153()




DeviceAccessRuleFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isEnabled'), pyxb.binding.datatypes.boolean, scope=DeviceAccessRuleFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 317, 20)))

DeviceAccessRuleFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'direction'), STD_ANON_, scope=DeviceAccessRuleFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 318, 20)))

DeviceAccessRuleFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'permit'), pyxb.binding.datatypes.boolean, scope=DeviceAccessRuleFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 326, 20)))

DeviceAccessRuleFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sectionName'), pyxb.binding.datatypes.string, scope=DeviceAccessRuleFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 327, 20)))

DeviceAccessRuleFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyName'), pyxb.binding.datatypes.string, scope=DeviceAccessRuleFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 328, 20)))

DeviceAccessRuleFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceRoleObjectGIDs'), ObjectIdentifierList, scope=DeviceAccessRuleFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 329, 20)))

DeviceAccessRuleFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'users'), IdentityUserGrpObjectsRefs, scope=DeviceAccessRuleFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 330, 20)))

DeviceAccessRuleFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sources'), NetworkInterfaceObjectsRefs, scope=DeviceAccessRuleFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 331, 20)))

DeviceAccessRuleFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'destinations'), NetworkInterfaceObjectsRefs, scope=DeviceAccessRuleFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 332, 20)))

DeviceAccessRuleFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'services'), CTD_ANON_7, scope=DeviceAccessRuleFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 333, 20)))

DeviceAccessRuleFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'logOptions'), CTD_ANON_8, scope=DeviceAccessRuleFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 341, 20)))

DeviceAccessRuleFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'iosOptions'), STD_ANON_2, scope=DeviceAccessRuleFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 357, 20)))

DeviceAccessRuleFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'timeRangeObjectGID'), ObjectIdentifier, scope=DeviceAccessRuleFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 366, 20)))

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 317, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 318, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 326, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 327, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 328, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 329, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 330, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 331, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 332, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 341, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 357, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 366, 20))
    counters.add(cc_24)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isEnabled')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 317, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'direction')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 318, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'permit')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 326, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'sectionName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 327, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'policyName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 328, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceRoleObjectGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 329, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'users')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 330, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'sources')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 331, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'destinations')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 332, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'services')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 333, 20))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'logOptions')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 341, 20))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'iosOptions')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 357, 20))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'timeRangeObjectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 366, 20))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, True) ]))
    st_26._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceAccessRuleFirewallPolicy._Automaton = _BuildAutomaton_154()




DeviceStaticRoutingFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceGID'), ObjectIdentifier, scope=DeviceStaticRoutingFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 856, 20)))

DeviceStaticRoutingFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'networks'), NetworkObjectsRefs, scope=DeviceStaticRoutingFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 857, 20)))

DeviceStaticRoutingFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gateway'), NetworkObjectRefs, scope=DeviceStaticRoutingFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 858, 20)))

DeviceStaticRoutingFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'metric'), pyxb.binding.datatypes.unsignedInt, scope=DeviceStaticRoutingFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 859, 20)))

DeviceStaticRoutingFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'tunnelled'), pyxb.binding.datatypes.boolean, scope=DeviceStaticRoutingFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 860, 20)))

DeviceStaticRoutingFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'slaMonitorGID'), ObjectIdentifier, scope=DeviceStaticRoutingFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 861, 20)))

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 858, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 861, 20))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 856, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'networks')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 857, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gateway')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 858, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'metric')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 859, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'tunnelled')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 860, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'slaMonitorGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 861, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceStaticRoutingFirewallPolicy._Automaton = _BuildAutomaton_155()




DeviceStaticRoutingRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'destinationNetwork'), CTD_ANON_9, scope=DeviceStaticRoutingRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 870, 20)))

DeviceStaticRoutingRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fowarding'), CTD_ANON_10, scope=DeviceStaticRoutingRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 878, 20)))

DeviceStaticRoutingRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'distanceMetric'), pyxb.binding.datatypes.unsignedInt, scope=DeviceStaticRoutingRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 886, 20)))

DeviceStaticRoutingRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isPermanentRoute'), pyxb.binding.datatypes.boolean, scope=DeviceStaticRoutingRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 887, 20)))

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 886, 20))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'destinationNetwork')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 870, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'fowarding')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 878, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'distanceMetric')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 886, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceStaticRoutingRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isPermanentRoute')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 887, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceStaticRoutingRouterPolicy._Automaton = _BuildAutomaton_156()




DeviceBGPRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'asNumber'), pyxb.binding.datatypes.unsignedLong, scope=DeviceBGPRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1255, 20)))

DeviceBGPRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'networks'), NetworkObjectsRefs, scope=DeviceBGPRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1256, 20)))

DeviceBGPRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'neighbors'), CTD_ANON_11, scope=DeviceBGPRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1257, 20)))

DeviceBGPRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'autoSummary'), pyxb.binding.datatypes.boolean, scope=DeviceBGPRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1265, 20)))

DeviceBGPRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'synchronization'), pyxb.binding.datatypes.boolean, scope=DeviceBGPRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1266, 20)))

DeviceBGPRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'logNeighbor'), pyxb.binding.datatypes.boolean, scope=DeviceBGPRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1267, 20)))

DeviceBGPRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'redistributionEntry'), CTD_ANON_12, scope=DeviceBGPRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1268, 20)))

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1256, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1268, 20))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'asNumber')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1255, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'networks')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1256, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'neighbors')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1257, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'autoSummary')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1265, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'synchronization')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1266, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'logNeighbor')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1267, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(DeviceBGPRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'redistributionEntry')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1268, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceBGPRouterPolicy._Automaton = _BuildAutomaton_157()




InterfaceNATRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceGID'), ObjectIdentifier, scope=InterfaceNATRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1324, 19)))

InterfaceNATRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isNatInside'), pyxb.binding.datatypes.boolean, scope=InterfaceNATRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1325, 19)))

def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1324, 19))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InterfaceNATRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isNatInside')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1325, 19))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InterfaceNATRouterPolicy._Automaton = _BuildAutomaton_158()




InterfaceNATStaticRulesRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'staticRuleType'), STD_ANON_5, scope=InterfaceNATStaticRulesRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1334, 20)))

InterfaceNATStaticRulesRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'original'), NetworkOrIPRef, scope=InterfaceNATStaticRulesRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1343, 20)))

InterfaceNATStaticRulesRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'translated'), CTD_ANON_16, scope=InterfaceNATStaticRulesRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1344, 20)))

InterfaceNATStaticRulesRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'portRedirection'), CTD_ANON_17, scope=InterfaceNATStaticRulesRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1352, 20)))

InterfaceNATStaticRulesRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'settings'), CTD_ANON_18, scope=InterfaceNATStaticRulesRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1361, 20)))

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1352, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1361, 20))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'staticRuleType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1334, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'original')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1343, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'translated')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1344, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'portRedirection')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1352, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'settings')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1361, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InterfaceNATStaticRulesRouterPolicy._Automaton = _BuildAutomaton_159()




InterfaceNATDynamicRulesRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'trafficFlowAclObjectGID'), ObjectIdentifier, scope=InterfaceNATDynamicRulesRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1378, 20)))

InterfaceNATDynamicRulesRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'translated'), CTD_ANON_19, scope=InterfaceNATDynamicRulesRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1379, 20)))

InterfaceNATDynamicRulesRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'settings'), CTD_ANON_20, scope=InterfaceNATDynamicRulesRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1387, 20)))

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1387, 20))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'trafficFlowAclObjectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1378, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'translated')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1379, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'settings')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1387, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InterfaceNATDynamicRulesRouterPolicy._Automaton = _BuildAutomaton_160()




DeviceNATTimeoutsRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'maxEntriesInSecs'), pyxb.binding.datatypes.unsignedLong, scope=DeviceNATTimeoutsRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1403, 20)))

DeviceNATTimeoutsRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'timeoutInSecs'), pyxb.binding.datatypes.unsignedLong, scope=DeviceNATTimeoutsRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1404, 20)))

DeviceNATTimeoutsRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'udpTimeoutInSecs'), pyxb.binding.datatypes.unsignedLong, scope=DeviceNATTimeoutsRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1405, 20)))

DeviceNATTimeoutsRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dnsTimeoutInSecs'), pyxb.binding.datatypes.unsignedLong, scope=DeviceNATTimeoutsRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1406, 20)))

DeviceNATTimeoutsRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'tcpTimeoutInSecs'), pyxb.binding.datatypes.unsignedLong, scope=DeviceNATTimeoutsRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1407, 20)))

DeviceNATTimeoutsRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'finRstTimeoutInSecs'), pyxb.binding.datatypes.unsignedLong, scope=DeviceNATTimeoutsRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1408, 20)))

DeviceNATTimeoutsRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'icmpTimeoutInSecs'), pyxb.binding.datatypes.unsignedLong, scope=DeviceNATTimeoutsRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1409, 20)))

DeviceNATTimeoutsRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pptpTimeoutInSecs'), pyxb.binding.datatypes.unsignedLong, scope=DeviceNATTimeoutsRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1410, 20)))

DeviceNATTimeoutsRouterPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'synTimeoutInSecs'), pyxb.binding.datatypes.unsignedLong, scope=DeviceNATTimeoutsRouterPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1411, 20)))

def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1403, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1404, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1405, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1406, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1407, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1408, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1409, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1410, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1411, 20))
    counters.add(cc_21)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'maxEntriesInSecs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1403, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'timeoutInSecs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1404, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'udpTimeoutInSecs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1405, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'dnsTimeoutInSecs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1406, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'tcpTimeoutInSecs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1407, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'finRstTimeoutInSecs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1408, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'icmpTimeoutInSecs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1409, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'pptpTimeoutInSecs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1410, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTimeoutsRouterPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'synTimeoutInSecs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1411, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, True) ]))
    st_22._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceNATTimeoutsRouterPolicy._Automaton = _BuildAutomaton_161()




InterfaceNATAddressPoolFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceGID'), ObjectIdentifier, scope=InterfaceNATAddressPoolFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1441, 20)))

InterfaceNATAddressPoolFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'poolId'), pyxb.binding.datatypes.unsignedInt, scope=InterfaceNATAddressPoolFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1442, 20)))

InterfaceNATAddressPoolFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ipAddressRange'), NetworkObjectsRefs, scope=InterfaceNATAddressPoolFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1443, 20)))

InterfaceNATAddressPoolFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceKeyword'), pyxb.binding.datatypes.string, scope=InterfaceNATAddressPoolFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1444, 20), fixed=True, unicode_default='interface'))

def _BuildAutomaton_162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1443, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1444, 20))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1441, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'poolId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1442, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ipAddressRange')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1443, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATAddressPoolFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceKeyword')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1444, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InterfaceNATAddressPoolFirewallPolicy._Automaton = _BuildAutomaton_162()




DeviceNATTransOptionsFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isEnableTrafficWithoutTrans'), pyxb.binding.datatypes.boolean, scope=DeviceNATTransOptionsFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1453, 20)))

DeviceNATTransOptionsFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isXlateByPass'), pyxb.binding.datatypes.boolean, scope=DeviceNATTransOptionsFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1455, 20)))

def _BuildAutomaton_163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1453, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1455, 20))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTransOptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTransOptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTransOptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTransOptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTransOptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTransOptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTransOptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTransOptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTransOptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceNATTransOptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceNATTransOptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTransOptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTransOptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTransOptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTransOptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isEnableTrafficWithoutTrans')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1453, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(DeviceNATTransOptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isXlateByPass')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1455, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceNATTransOptionsFirewallPolicy._Automaton = _BuildAutomaton_163()




InterfaceNATTransExemptionsFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isRuleEnabled'), pyxb.binding.datatypes.boolean, scope=InterfaceNATTransExemptionsFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1464, 20)))

InterfaceNATTransExemptionsFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isExempt'), pyxb.binding.datatypes.boolean, scope=InterfaceNATTransExemptionsFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1465, 20)))

InterfaceNATTransExemptionsFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'realInterfaceGID'), ObjectIdentifier, scope=InterfaceNATTransExemptionsFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1466, 20)))

InterfaceNATTransExemptionsFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'original'), NetworkInterfaceObjectsRefs, scope=InterfaceNATTransExemptionsFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1467, 20)))

InterfaceNATTransExemptionsFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'outsideNAT'), pyxb.binding.datatypes.boolean, scope=InterfaceNATTransExemptionsFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1468, 20)))

InterfaceNATTransExemptionsFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'destinations'), NetworkInterfaceObjectsRefs, scope=InterfaceNATTransExemptionsFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1469, 20)))

InterfaceNATTransExemptionsFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fwsmAdvancedOptions'), FirewallNATAdvancedOptions, scope=InterfaceNATTransExemptionsFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1470, 20)))

def _BuildAutomaton_164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1470, 20))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isRuleEnabled')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1464, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isExempt')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1465, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'realInterfaceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1466, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'original')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1467, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'outsideNAT')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1468, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'destinations')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1469, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATTransExemptionsFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'fwsmAdvancedOptions')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1470, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InterfaceNATTransExemptionsFirewallPolicy._Automaton = _BuildAutomaton_164()




InterfaceNATDynamicRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isRuleEnabled'), pyxb.binding.datatypes.boolean, scope=InterfaceNATDynamicRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1479, 20)))

InterfaceNATDynamicRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'realInterfaceGID'), ObjectIdentifier, scope=InterfaceNATDynamicRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1480, 20)))

InterfaceNATDynamicRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'poolId'), pyxb.binding.datatypes.unsignedInt, scope=InterfaceNATDynamicRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1481, 20)))

InterfaceNATDynamicRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'original'), NetworkObjectsRefs, scope=InterfaceNATDynamicRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1482, 20)))

InterfaceNATDynamicRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'outsideNAT'), pyxb.binding.datatypes.boolean, scope=InterfaceNATDynamicRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1483, 20)))

InterfaceNATDynamicRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'advancedOptions'), FirewallNATAdvancedOptions, scope=InterfaceNATDynamicRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1484, 20)))

def _BuildAutomaton_165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1484, 20))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isRuleEnabled')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1479, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'realInterfaceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1480, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'poolId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1481, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'original')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1482, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'outsideNAT')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1483, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'advancedOptions')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1484, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InterfaceNATDynamicRulesFirewallPolicy._Automaton = _BuildAutomaton_165()




InterfaceNATPolicyDynamicRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isRuleEnabled'), pyxb.binding.datatypes.boolean, scope=InterfaceNATPolicyDynamicRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1493, 20)))

InterfaceNATPolicyDynamicRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'realInterfaceGID'), ObjectIdentifier, scope=InterfaceNATPolicyDynamicRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1494, 20)))

InterfaceNATPolicyDynamicRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'poolId'), pyxb.binding.datatypes.unsignedInt, scope=InterfaceNATPolicyDynamicRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1495, 20)))

InterfaceNATPolicyDynamicRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'original'), NetworkInterfaceObjectsRefs, scope=InterfaceNATPolicyDynamicRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1496, 20)))

InterfaceNATPolicyDynamicRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'outsideNAT'), pyxb.binding.datatypes.boolean, scope=InterfaceNATPolicyDynamicRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1497, 20)))

InterfaceNATPolicyDynamicRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'destinations'), NetworkInterfaceObjectsRefs, scope=InterfaceNATPolicyDynamicRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1498, 20)))

InterfaceNATPolicyDynamicRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'services'), CTD_ANON_21, scope=InterfaceNATPolicyDynamicRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1499, 20)))

InterfaceNATPolicyDynamicRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'advancedOptions'), FirewallNATAdvancedOptions, scope=InterfaceNATPolicyDynamicRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1507, 20)))

def _BuildAutomaton_166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1507, 20))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isRuleEnabled')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1493, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'realInterfaceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1494, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'poolId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1495, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'original')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1496, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'outsideNAT')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1497, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'destinations')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1498, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'services')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1499, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATPolicyDynamicRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'advancedOptions')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1507, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InterfaceNATPolicyDynamicRulesFirewallPolicy._Automaton = _BuildAutomaton_166()




InterfaceNATStaticRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isRuleEnabled'), pyxb.binding.datatypes.boolean, scope=InterfaceNATStaticRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1516, 20)))

InterfaceNATStaticRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'translationType'), STD_ANON_6, scope=InterfaceNATStaticRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1517, 20)))

InterfaceNATStaticRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'realInterfaceGID'), ObjectIdentifier, scope=InterfaceNATStaticRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1525, 20)))

InterfaceNATStaticRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'mappedInterfaceGID'), ObjectIdentifier, scope=InterfaceNATStaticRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1526, 20)))

InterfaceNATStaticRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'original'), NetworkOrIPRef, scope=InterfaceNATStaticRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1527, 20)))

InterfaceNATStaticRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'translated'), NetworkObjectRefs, scope=InterfaceNATStaticRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1528, 20)))

InterfaceNATStaticRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'policyNAT'), CTD_ANON_22, scope=InterfaceNATStaticRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1529, 20)))

InterfaceNATStaticRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'protocol'), IPTransportProtocol, scope=InterfaceNATStaticRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1544, 20)))

InterfaceNATStaticRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'originalPort'), pyxb.binding.datatypes.unsignedInt, scope=InterfaceNATStaticRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1545, 20)))

InterfaceNATStaticRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'translatedPort'), pyxb.binding.datatypes.unsignedInt, scope=InterfaceNATStaticRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1546, 20)))

InterfaceNATStaticRulesFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'advancedOptions'), FirewallNATAdvancedOptions, scope=InterfaceNATStaticRulesFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1547, 20)))

def _BuildAutomaton_167 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1529, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1545, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1546, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1547, 20))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isRuleEnabled')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1516, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'translationType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1517, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'realInterfaceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1525, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'mappedInterfaceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1526, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'original')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1527, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'translated')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1528, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'policyNAT')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1529, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'protocol')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1544, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'originalPort')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1545, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'translatedPort')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1546, 20))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATStaticRulesFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'advancedOptions')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1547, 20))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InterfaceNATStaticRulesFirewallPolicy._Automaton = _BuildAutomaton_167()




InterfaceNATManualFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isRuleEnabled'), pyxb.binding.datatypes.boolean, scope=InterfaceNATManualFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1569, 20)))

InterfaceNATManualFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'section'), STD_ANON_7, scope=InterfaceNATManualFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1570, 20)))

InterfaceNATManualFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'realInterface'), CTD_ANON_25, scope=InterfaceNATManualFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1579, 20)))

InterfaceNATManualFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'mappedInterface'), CTD_ANON_26, scope=InterfaceNATManualFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1587, 20)))

InterfaceNATManualFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'source'), CTD_ANON_27, scope=InterfaceNATManualFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1595, 20)))

InterfaceNATManualFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'destination'), CTD_ANON_29, scope=InterfaceNATManualFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1611, 20)))

InterfaceNATManualFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'service'), CTD_ANON_30, scope=InterfaceNATManualFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1620, 20)))

InterfaceNATManualFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isTransDNSReplies'), pyxb.binding.datatypes.boolean, scope=InterfaceNATManualFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1628, 20)))

InterfaceNATManualFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'direction'), STD_ANON_8, scope=InterfaceNATManualFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1629, 20)))

InterfaceNATManualFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isNoProxyARP'), pyxb.binding.datatypes.boolean, scope=InterfaceNATManualFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1637, 20)))

InterfaceNATManualFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isRouteLookUp'), pyxb.binding.datatypes.boolean, scope=InterfaceNATManualFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1638, 20)))

def _BuildAutomaton_168 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1579, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1587, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1611, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1620, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1629, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1637, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1638, 20))
    counters.add(cc_19)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isRuleEnabled')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1569, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'section')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1570, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'realInterface')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1579, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'mappedInterface')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1587, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'source')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1595, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'destination')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1611, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'service')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1620, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isTransDNSReplies')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1628, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'direction')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1629, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isNoProxyARP')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1637, 20))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isRouteLookUp')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1638, 20))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, True) ]))
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InterfaceNATManualFirewallPolicy._Automaton = _BuildAutomaton_168()




InterfaceNATObjectFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'section'), STD_ANON_9, scope=InterfaceNATObjectFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1647, 20), fixed=True, unicode_default='2'))

InterfaceNATObjectFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'realInterface'), pyxb.binding.datatypes.string, scope=InterfaceNATObjectFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1656, 20)))

InterfaceNATObjectFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'mappedInterface'), pyxb.binding.datatypes.string, scope=InterfaceNATObjectFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1657, 20)))

InterfaceNATObjectFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'natType'), NATType, scope=InterfaceNATObjectFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1658, 20)))

InterfaceNATObjectFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'originalObjectGID'), ObjectIdentifier, scope=InterfaceNATObjectFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1659, 20)))

InterfaceNATObjectFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'translated'), CTD_ANON_31, scope=InterfaceNATObjectFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1660, 20)))

InterfaceNATObjectFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isTransDNSReplies'), pyxb.binding.datatypes.boolean, scope=InterfaceNATObjectFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1669, 20)))

InterfaceNATObjectFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isNoProxyARP'), pyxb.binding.datatypes.boolean, scope=InterfaceNATObjectFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1670, 20)))

InterfaceNATObjectFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isRouteLookUp'), pyxb.binding.datatypes.boolean, scope=InterfaceNATObjectFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1671, 20)))

InterfaceNATObjectFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'service'), CTD_ANON_32, scope=InterfaceNATObjectFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1672, 20)))

def _BuildAutomaton_169 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1660, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1670, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1671, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1672, 20))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'section')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1647, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'realInterface')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1656, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'mappedInterface')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1657, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'natType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1658, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'originalObjectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1659, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'translated')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1660, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isTransDNSReplies')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1669, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isNoProxyARP')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1670, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isRouteLookUp')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1671, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNATObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'service')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1672, 20))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InterfaceNATObjectFirewallPolicy._Automaton = _BuildAutomaton_169()




FirewallACLSettingsPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'aclName'), pyxb.binding.datatypes.string, scope=FirewallACLSettingsPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2616, 4)))

FirewallACLSettingsPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interfaceGID'), ObjectIdentifier, scope=FirewallACLSettingsPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2618, 4)))

FirewallACLSettingsPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'trafficDirection'), STD_ANON_15, scope=FirewallACLSettingsPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2620, 4)))

FirewallACLSettingsPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'useUserDefinedACLName'), pyxb.binding.datatypes.boolean, scope=FirewallACLSettingsPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2629, 4)))

FirewallACLSettingsPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'enablePerUserDownloadableACLs'), pyxb.binding.datatypes.boolean, scope=FirewallACLSettingsPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2631, 4)))

FirewallACLSettingsPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'enableObjectGroupSearch'), pyxb.binding.datatypes.boolean, scope=FirewallACLSettingsPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2633, 4)))

FirewallACLSettingsPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'enableAccessListCompilation'), pyxb.binding.datatypes.boolean, scope=FirewallACLSettingsPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2635, 4)))

def _BuildAutomaton_170 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2616, 4))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2618, 4))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2635, 4))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'aclName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2616, 4))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2618, 4))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'trafficDirection')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2620, 4))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'useUserDefinedACLName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2629, 4))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'enablePerUserDownloadableACLs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2631, 4))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'enableObjectGroupSearch')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2633, 4))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(FirewallACLSettingsPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'enableAccessListCompilation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 2635, 4))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FirewallACLSettingsPolicy._Automaton = _BuildAutomaton_170()




ConfigChangeEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deploymentType'), DeploymentType, scope=ConfigChangeEvent, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 73, 5)))

ConfigChangeEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'updateType'), UpdateType, scope=ConfigChangeEvent, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 74, 5)))

def _BuildAutomaton_171 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 59, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 61, 5))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConfigChangeEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'subscriptionId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 48, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConfigChangeEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'eventType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 49, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConfigChangeEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCategory')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 50, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConfigChangeEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'time')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 51, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConfigChangeEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'content')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 52, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConfigChangeEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'srcIP')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 59, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConfigChangeEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'srcGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 60, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConfigChangeEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'srcDns')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 61, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConfigChangeEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'srcOSType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 62, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConfigChangeEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'deploymentType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 73, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConfigChangeEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'updateType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 74, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConfigChangeEvent._Automaton = _BuildAutomaton_171()




DeviceStatusEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'updateType'), UpdateType, scope=DeviceStatusEvent, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 84, 5)))

def _BuildAutomaton_172 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 59, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 61, 5))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStatusEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'subscriptionId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 48, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStatusEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'eventType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 49, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStatusEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCategory')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 50, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStatusEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'time')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 51, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStatusEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'content')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 52, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStatusEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'srcIP')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 59, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStatusEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'srcGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 60, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStatusEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'srcDns')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 61, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceStatusEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'srcOSType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 62, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceStatusEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'updateType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/events.xsd', 84, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceStatusEvent._Automaton = _BuildAutomaton_172()




DeviceAccessRuleUnifiedFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sourceSG'), SecurityGrpObjectsRefs, scope=DeviceAccessRuleUnifiedFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 375, 20)))

DeviceAccessRuleUnifiedFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'destinationSG'), SecurityGrpObjectsRefs, scope=DeviceAccessRuleUnifiedFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 376, 20)))

def _BuildAutomaton_173 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 317, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 318, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 326, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 327, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 328, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 329, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 330, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 331, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 332, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 341, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 357, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 366, 20))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 375, 20))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 376, 20))
    counters.add(cc_26)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isEnabled')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 317, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'direction')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 318, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'permit')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 326, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'sectionName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 327, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'policyName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 328, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'interfaceRoleObjectGIDs')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 329, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'users')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 330, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'sources')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 331, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'destinations')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 332, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'services')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 333, 20))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'logOptions')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 341, 20))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'iosOptions')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 357, 20))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'timeRangeObjectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 366, 20))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'sourceSG')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 375, 20))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(DeviceAccessRuleUnifiedFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'destinationSG')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 376, 20))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_26, True) ]))
    st_28._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeviceAccessRuleUnifiedFirewallPolicy._Automaton = _BuildAutomaton_173()




InterfaceNAT64ManualFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isInterfaceIpv6'), pyxb.binding.datatypes.boolean, scope=InterfaceNAT64ManualFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1702, 20)))

InterfaceNAT64ManualFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isNetToNet'), pyxb.binding.datatypes.boolean, scope=InterfaceNAT64ManualFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1703, 20)))

def _BuildAutomaton_174 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1579, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1587, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1611, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1620, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1629, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1637, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1638, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1702, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1703, 20))
    counters.add(cc_21)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isRuleEnabled')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1569, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'section')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1570, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'realInterface')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1579, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'mappedInterface')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1587, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'source')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1595, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'destination')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1611, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'service')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1620, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isTransDNSReplies')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1628, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'direction')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1629, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isNoProxyARP')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1637, 20))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isRouteLookUp')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1638, 20))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isInterfaceIpv6')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1702, 20))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ManualFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isNetToNet')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1703, 20))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, True) ]))
    st_26._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InterfaceNAT64ManualFirewallPolicy._Automaton = _BuildAutomaton_174()




InterfaceNAT64ObjectFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isInterfaceIpv6'), pyxb.binding.datatypes.boolean, scope=InterfaceNAT64ObjectFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1755, 20)))

InterfaceNAT64ObjectFirewallPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isNetToNet'), pyxb.binding.datatypes.boolean, scope=InterfaceNAT64ObjectFirewallPolicy, location=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1756, 20)))

def _BuildAutomaton_175 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_175
    del _BuildAutomaton_175
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1660, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1670, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1671, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1672, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1755, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1756, 20))
    counters.add(cc_18)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'gid')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 19, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastUpdateTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'parentGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'updatedByUser')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'lastCommitTime')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 25, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'ticketId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 26, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'activityName')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/common.xsd', 27, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 9, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'orderId')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 10, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isMandatoryAggregation')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 11, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 12, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'eventCorrelationID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 13, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'configState')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 14, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'section')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1647, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'realInterface')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1656, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'mappedInterface')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1657, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'natType')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1658, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'originalObjectGID')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1659, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'translated')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1660, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isTransDNSReplies')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1669, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isNoProxyARP')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1670, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isRouteLookUp')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1671, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'service')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1672, 20))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isInterfaceIpv6')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1755, 20))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceNAT64ObjectFirewallPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'isNetToNet')), pyxb.utils.utility.Location('file:///C:/Users/502339781/PycharmProjects/cisco-security-rest-api/pyxb/config.xsd', 1756, 20))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InterfaceNAT64ObjectFirewallPolicy._Automaton = _BuildAutomaton_175()

